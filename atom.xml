<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>子君的个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.zijunfe.cn/"/>
  <updated>2021-02-26T10:09:06.052Z</updated>
  <id>http://blog.zijunfe.cn/</id>
  
  <author>
    <name>Zi Jun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>自问自答系列(持续更新！2-26)</title>
    <link href="http://blog.zijunfe.cn/2021/02/26/qustion-answer/"/>
    <id>http://blog.zijunfe.cn/2021/02/26/qustion-answer/</id>
    <published>2021-02-26T10:01:02.000Z</published>
    <updated>2021-02-26T10:09:06.052Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、写-React-Vue-项目时为什么要在列表组件中写-key，其作用是什么？"><a href="#1、写-React-Vue-项目时为什么要在列表组件中写-key，其作用是什么？" class="headerlink" title="1、写 React / Vue 项目时为什么要在列表组件中写 key，其作用是什么？"></a>1、写 React / Vue 项目时为什么要在列表组件中写 key，其作用是什么？</h4><p>自答：</p><p>要明白key的作用，首先我们要知道列表组件带key与不带key会有什么区别。</p><p>前提我们需要知道vue如何更新列表组件的。</p><p>在vue的diff函数中。经过交叉对比后，当新节点跟旧节点头尾交叉对比没有结果时，会根据新节点的key去对比旧节点数组中的key，从而找到相应旧节点（这里对应的是一个key =&gt; index 的map映射）。如果没找到就认为是一个新增节点。而如果没有key，那么就会采用遍历查找的方式去找到对应的旧节点。</p><a id="more"></a><p><strong>不带key：</strong></p><ul><li><p>就地复用组件：当 Vue 用 v-for 正在更新已渲染过的元素列表时，它默认用“就地复用”策略。比如绑定的数据项发生了改变，Vue 将不会移动 DOM 元素来匹配数据项的顺序， 而是简单复用此处每个元素，这个默认的模式是高效的，但是只适用于<strong>不依赖子组件状态或临时 DOM 状态 (例如：表单输入值) 的列表渲染输出</strong>。以上是vue官网的说法。当不带key时，在比较新旧两个组件是否是同一个组件的过程中会判断成新旧两个组件是同一个组件，因为 old.key 和 new.key 都是 undefined。所以不会重新创建组件和删除组件，只会在组件的属性层面上进行比较和更新。所以可能在某种程度上（创建和删除组件方面）会有渲染性能上的提升。</p></li><li><p>无法维持组件的状态：因为时就地复用组件，可能在维持组件状态方面会导致不可预知的错误，比如无法维持改组件的动画效果、开关等状态，在现实业务场景中会有更多不可预知的问题。</p></li><li><p>也有可能带来性能下降：因为是直接就地复用节点，如果修改的组件，需要复用的很多节点，顺序又和原来的完全不同的话，那么创建和删除的节点数量就会比带 key 的时候增加很多，(为什么会很多)，性能就会有所下降；</p></li></ul><p><strong>带key：</strong></p><ul><li><p>维持组件的状态：保证组件的复用：因为有 key 唯一标识了组件，在进行新旧节点比较的时候，会在接下来的节点中找到 key 相同的节点去比较，能找到相同的 key 的话就复用节点，不能找到的话就增加或者删除节点。</p></li><li><p>查找性能上的提升：有 key 的时候，会生成 hash（即对应关系），这样在查找的时候就是 hash 查找了，基本上就是 O(1) 的复杂度。</p></li><li><p>节点复用带来的性能提升：因为有 key 唯一标识了组件，所以会尽可能多的对组件进行复用（尽管组件顺序不同），那么创建和删除节点数量就会变少，这方面的消耗就会下降，带来性能的提升。</p></li></ul><p>衍生问题：为什么不推荐使用数组的index作为列表组件的key？</p><p>官网推荐推荐的使用key，应该理解为“使用唯一id作为key”。因为index作为key，和不带key的效果是一样的。index作为key时，每个列表项的index在变更前后也是一样的，都是直接判断为sameVnode然后复用。</p><h4 id="2、-‘1’-‘2’-‘3’-map-parseInt-what-amp-why"><a href="#2、-‘1’-‘2’-‘3’-map-parseInt-what-amp-why" class="headerlink" title="2、[‘1’, ‘2’, ‘3’].map(parseInt) what &amp; why ?"></a>2、[‘1’, ‘2’, ‘3’].map(parseInt) what &amp; why ?</h4><p>自答：</p><p>像此类的问题只需要逐个分析函数的参数即可，map函数第一个参数是时候一个callback，而这里相当于parseInt这个函数，callback有三个参数，第一个参数元素本身，第二个参数是下标，第三个参数为执行数组。parseInt第一个参数是需要取整的字符串，第二个参数radix是解析时的基数，是一个介于2-36之间的整数，默认是10。</p><p>那么执行’1’的过程就是，<code>parseInt(&#39;1&#39;,0) === 1</code> 为啥为1呢？因为radix为0时，且string参数不以“0x”和“0”开头时，按照10为基数处理。这个时候返回1</p><p>那么执行’2’的过程就是，<code>parseInt(&#39;2&#39;,1) === NaN</code> radix是一个介于2-36之间的整数</p><p>那么执行’3’的过程就是，<code>parseInt(&#39;3&#39;,2) === NaN</code> 没有数的二进制能用3来表示。</p><p>返回的结果为<code>[1,NaN,NaN]</code>。</p><h4 id="3、什么是防抖和节流？有什么区别？如何实现？"><a href="#3、什么是防抖和节流？有什么区别？如何实现？" class="headerlink" title="3、什么是防抖和节流？有什么区别？如何实现？"></a>3、什么是防抖和节流？有什么区别？如何实现？</h4><p>自答：</p><p><strong>防抖：</strong></p><blockquote><p>指定时间内，方法只能执行一次。而这个时间的计算，是从最后一次触发监听事件开始算起。</p><p>自己的理解：无数次请求执行方法，如果最后一次请求在规定时间内没有再发生请求，那么以最后一次为准</p><p>一般表现为，在一段连续触发的事件中，最终会转化为一次方法执行，就像防止抖动一样，你做一个事，防止你手抖不小心重复干了</p></blockquote><p>场景：如在一个输入框内输入文字，你想在输入停止一段时间过后再去获取数据（如过滤），而不是每输入一个文字就去请求一次，那么这时候你就可以利用防抖，指定<code>keyup</code>事件不断触发的过程中不要重复发请求，到最后一次停止输入再去请求。</p><p>函数实现</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 防抖函数</span></span><br><span class="line"><span class="comment"> * @param &#123;Function&#125; fn - 实际要执行的函数</span></span><br><span class="line"><span class="comment"> * @param &#123;Number&#125; wait - 规定在什么时间内执行一次函数，单位是秒</span></span><br><span class="line"><span class="comment"> * @param &#123;Boolean&#125; immediate - 是否立即执行，true为立即执行，立即执行指触发监听事件是先执行</span></span><br><span class="line"><span class="comment"> * @return &#123;Function&#125; 经过防抖处理后的要执行的函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, wait, immediate</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timerId = <span class="literal">null</span>; <span class="comment">// 记录定时器id</span></span><br><span class="line">    wait = +wait || <span class="number">0</span>; <span class="comment">// 如果wait没有传，那么初始化0值</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">'function'</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'debounce的第一个参数请传入函数'</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 防抖后的执行函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">debounced</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        timerId &amp;&amp; clearTimeout(timerId);</span><br><span class="line">        <span class="comment">// 如果是立即执行</span></span><br><span class="line">        <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">            <span class="comment">// 如果已经过了规定时间，则执行函数 或 第一次触发监听事件</span></span><br><span class="line">            !timerId &amp;&amp; fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">            <span class="comment">// 规定时间后情况定时器id，表明到达了规定时间</span></span><br><span class="line">            timerId = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                timerId = <span class="literal">null</span>;</span><br><span class="line">            &#125;, wait);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 延后执行</span></span><br><span class="line">            <span class="comment">// 只有到达了规定时间后才会执行fn函数</span></span><br><span class="line">            timerId = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">                timerId = <span class="literal">null</span>;</span><br><span class="line">            &#125;, wait);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 手动取消该次设定的防抖时间，取消后当成是“第一次触发”一样</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">cancel</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        clearTimeout(timerId);</span><br><span class="line">        timerId = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    debounced.cancel = cancel;</span><br><span class="line">    <span class="keyword">return</span> debounced;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><strong>节流：</strong></p><blockquote><p>指定时间内，方法只能执行一次。而这个时间的计算，是从上次执行方法开始算起。</p><p>自己的理解：立马执行第一请求，在一次执行方法请求后的规定时间内，不能再次发出请求，规定时间结束后可再次请求，如果规定时间内再次发出，则重置规定时间。</p><p>一般表现为，在一段连续触发的事件中，根据你设定的时间间隔，降低触发频率，重复执行。</p></blockquote><p>场景：如你需要做无限加载，监听到滚动条到达底部就加载更多数据，这时候其实你不必要时时刻刻都执行<code>scroll</code>事件绑定的函数，这样没必要，只要把执行频率降低点同样可以达到效果，节约资源。这就是利用节流。</p><p>函数实现</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 节流函数</span></span><br><span class="line"><span class="comment"> * @param &#123;Function&#125; fn - 实际要执行的函数，对其进行节流处理</span></span><br><span class="line"><span class="comment"> * @param &#123;Number&#125; wait - 规定的执行时间间隔</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; option - 用于设置节流的函数的触发时机，</span></span><br><span class="line"><span class="comment"> *                        - 默认是&#123;leading: true, trailing: true&#125;，表示第一次触发监听事件马上执行，停止后最后也执行一次</span></span><br><span class="line"><span class="comment"> *                        - leading为false时，表示第一次触发不马上执行</span></span><br><span class="line"><span class="comment"> *                        - trailing为false时，表示最后停止触发后不执行</span></span><br><span class="line"><span class="comment"> * @return &#123;Function&#125; 返回经过节流处理后的函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, wait, option</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timerId = <span class="literal">null</span>; <span class="comment">// 用于记录定时器的id</span></span><br><span class="line">    <span class="keyword">let</span> lastTime = <span class="number">0</span>; <span class="comment">// 上次触发fn的时间戳</span></span><br><span class="line">    wait = +wait || <span class="number">0</span>; <span class="comment">// 如果wait没有传，那么初始化0值</span></span><br><span class="line">    option = option || &#123;&#125;; <span class="comment">// 如果option没有传，那么初始化&#123;&#125;值</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">'function'</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'throttle的第一个参数请传入函数'</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (option.leading === <span class="literal">false</span> &amp;&amp; option.trailing === <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'option的leading 和 trailing不能同时为false'</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 节流后的执行函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">throttled</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> now = +<span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">// 获取当前时间</span></span><br><span class="line">        <span class="comment">// 如果没有上次触发执行时间（即第一次运行），以及leading设置为false</span></span><br><span class="line">        !lastTime &amp;&amp; option.leading === <span class="literal">false</span> &amp;&amp; (lastTime = now);</span><br><span class="line">        <span class="comment">// 距离到达规定的wait时间剩余时间</span></span><br><span class="line">        <span class="keyword">let</span> remainingTime = wait - (now - lastTime);</span><br><span class="line">        <span class="comment">// 条件①：如果到达了规定的间隔时间或用户自己设定了系统时间导致的不合理时间差，则立刻执行一次触发函数</span></span><br><span class="line">        <span class="keyword">if</span> (remainingTime &lt;= <span class="number">0</span> || remainingTime &gt; wait) &#123;</span><br><span class="line">            fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">            lastTime = now;</span><br><span class="line">            <span class="keyword">if</span> (timerId) &#123;</span><br><span class="line">                clearTimeout(timerId);</span><br><span class="line">                timerId = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 条件②：如果未达到规定时间，以及要求停止后延迟执行（trailing=false）</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!timerId &amp;&amp; option.trailing !== <span class="literal">false</span>) &#123;</span><br><span class="line">            timerId = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                timerId = <span class="literal">null</span>;</span><br><span class="line">                fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">                lastTime = option.leading === <span class="literal">false</span> ? <span class="number">0</span> : +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">            &#125;, remainingTime);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 手动提前终止节流时间，恢复初始状态</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">cancel</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        clearTimeout(timerId);</span><br><span class="line">        timerId = <span class="literal">null</span>;</span><br><span class="line">        lastTime = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    throttled.cancel = cancel;</span><br><span class="line">    <span class="keyword">return</span> throttled;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="4、介绍下-Set、Map、WeakSet-和-WeakMap-的区别？"><a href="#4、介绍下-Set、Map、WeakSet-和-WeakMap-的区别？" class="headerlink" title="4、介绍下 Set、Map、WeakSet 和 WeakMap 的区别？"></a>4、介绍下 Set、Map、WeakSet 和 WeakMap 的区别？</h4><p>自答：</p><p>Set(集合)</p><p>Set 是一种叫做集合的数据结构，成员是唯一且无序的，没有重复的值。<br><strong>Set 本身是一种构造函数，用来生成 Set 数据结构。</strong>，Set 对象允许你储存任何类型的唯一值，Set 内部判断两个值是否不同的判断类似于精确相等运算符（===），主要的区别是在Set内NaN和NaN是相同的，但是<code>NaN === NaN =&gt; false</code>。</p><p>Set的实例方法：add(value)，delete(value)，has(value)，clear()，keys()，values()，entries()，forEach(callbackFn, thisArg)，map()，filter()</p><p>WeakSet</p><p>WeakSet 对象允许你将<strong>弱引用对象</strong>储存在一个集合中。</p><p>WeakSet 与 Set 的区别：</p><ul><li>WeakSet 只能储存对象引用，不能存放值，而 Set 对象都可以</li><li>WeakSet 对象中储存的对象值都是被弱引用的，即垃圾回收机制不考虑 WeakSet 对该对象的引用，如果没有其他的变量或属性引用这个对象值，则这个对象将会被垃圾回收掉（不考虑该对象还存在于 WeakSet 中），所以，WeakSet 对象里有多少个成员元素，取决于垃圾回收机制有没有运行，运行前后成员个数可能不一致，遍历结束之后，有的成员可能取不到了（被垃圾回收了），WeakSet 对象是无法被遍历的（ES6 规定 WeakSet 不可遍历），也没有办法拿到它包含的所有元素。</li></ul><p>WeakSet实例方法：add(value)，has(value)，delete(value)</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foos = <span class="keyword">new</span> <span class="built_in">WeakSet</span>()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    foos.add(<span class="keyword">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  method () &#123;</span><br><span class="line">    <span class="keyword">if</span> (!foos.has(<span class="keyword">this</span>)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Foo.prototype.method 只能在Foo的实例上调用！'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>上面代码保证了Foo的实例方法，只能在Foo的实例上调用。这里使用 WeakSet 的好处是，foos对实例的引用，不会被计入内存回收机制，所以删除实例的时候，不用考虑foos，也不会出现内存泄漏。</p><p>Map(字典)</p><p>集合 与 字典 的区别：</p><ul><li>共同点：集合、字典 可以储存不重复的值（Map里的key如果是引用类型，看上去像”重复”了一样，实际上不重复是指内存地址的不重复）</li><li>不同点：集合 是以 [value, value]的形式储存元素，字典 是以 [key, value] 的形式储存</li></ul><p>任何具有 Iterator 接口、且每个成员都是一个双元素的数组的数据结构(即<code>[[key,value],[key,value]]</code>)都可以当作Map构造函数的参数，例如：</p><p>Map 的键实际上是跟内存地址绑定的，只要内存地址不一样，就视为两个键。这就解决了同名属性碰撞（clash）的问题，我们扩展别人的库的时候，如果使用对象作为键名，就不用担心自己的属性与原作者的属性同名。</p><p>如果 Map 的键是一个简单类型的值（数字、字符串、布尔值），则只要两个值严格相等（===），Map 将其视为一个键，比如<code>0</code>和<code>-0</code>就是一个键，布尔值<code>true</code>和字符串<code>&#39;true&#39;</code>则是两个不同的键。另外，<code>undefined</code>和<code>null</code>也是两个不同的键。虽然<code>NaN</code>不严格相等于自身，但 Map 将其视为同一个键（这个点和Set是一样的）。</p><p>实例方法：set(key, value)，get(key)，has(key)，delete(key)，clear()，keys()，values()，entries()，forEach(callback(value,key,map),thisArg)</p><p>WeakMap</p><p>WeakMap 对象是一组键值对的集合，其中的键是弱引用对象，而值可以是任意。注意，WeakMap 弱引用的只是键名，而不是键值。键值依然是正常引用。</p><p>WeakMap 中，每个键对自己所引用对象的引用都是弱引用，在没有其他引用和该键引用同一对象，这个对象将会被垃圾回收（相应的key则变成无效的），所以，WeakMap 的 key 是不可枚举的。</p><p>实例方法：has(key)，get(key)，set(key)，delete(key)</p><p>总结：</p><ul><li>Set<ul><li>成员唯一、无序且不重复</li><li>[value, value]，键值与键名是一致的（或者说只有键值，没有键名）</li><li>可以遍历，方法有：add、delete、has</li></ul></li><li>WeakSet<ul><li>成员都是对象</li><li>成员都是弱引用，可以被垃圾回收机制回收，可以用来保存DOM节点，不容易造成内存泄漏</li><li>不能遍历，方法有add、delete、has</li></ul></li><li>Map<ul><li>本质上是键值对的集合，类似集合</li><li>可以遍历，方法很多可以跟各种数据格式转换</li></ul></li><li>WeakMap<ul><li>只接受对象作为键名（null除外），不接受其他类型的值作为键名</li><li>键名是弱引用，键值可以是任意的，键名所指向的对象可以被垃圾回收，此时键名是无效的</li><li>不能遍历，方法有get、set、has、delete</li></ul></li></ul><h4 id="5、介绍下深度优先遍历和广度优先遍历，如何实现？"><a href="#5、介绍下深度优先遍历和广度优先遍历，如何实现？" class="headerlink" title="5、介绍下深度优先遍历和广度优先遍历，如何实现？"></a>5、介绍下深度优先遍历和广度优先遍历，如何实现？</h4><p>自答：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">parent= &#123;</span><br><span class="line">child_1: &#123;</span><br><span class="line">child_1_1: &#123;</span><br><span class="line">child_1_1_1</span><br><span class="line">&#125;,</span><br><span class="line">child_1_2: &#123;</span><br><span class="line">child_1_2_1</span><br><span class="line">&#125;,</span><br><span class="line">child_1_3</span><br><span class="line">&#125;,</span><br><span class="line">child_2: &#123;</span><br><span class="line">child_2_1,</span><br><span class="line">chhild_2_2,</span><br><span class="line">&#125;,</span><br><span class="line">child_3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><strong>深度优先遍历DFS：</strong>深度优先遍历 与树的先序遍历比较类似。从某个顶点出发，首先访问该顶点然后依次从它的各个未被访问的邻接点出发深度优先搜索遍历图，直至图中所有和v有路径相通的顶点都被访问到。若此时尚有其他顶点未被访问到，则另选一个未被访问的顶点作起始点，重复上述过程。有点类似正则中的嵌套捕获，捕获内容以深度优先。</p><p>遍历结果为</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">child_1,</span><br><span class="line">child_1_1,</span><br><span class="line">child_1_1_1,</span><br><span class="line">child_1_2,</span><br><span class="line">child_1_2_1,</span><br><span class="line">child_1_3,</span><br><span class="line">child_2,</span><br><span class="line">child_2_1,</span><br><span class="line">child_2_2,</span><br><span class="line">child_3</span><br><span class="line">]</span><br></pre></td></tr></table></figure></div><p><strong>广度优先遍历 BFS:</strong>从某顶点v出发，在访问了v之后依次访问v的各个未曾访问过的<strong>邻接点</strong>，然后分别从这些邻接点出发依次访问它们的邻接点，并使得“先被访问的顶点的邻接点先于后被访问的顶点的邻接点被访问，直至图中所有已被访问的顶点的邻接点都被访问到。 如果此时图中尚有顶点未被访问，则需要另选一个未曾被访问过的顶点作为新的起始点，重复上述过程。</p><p>遍历结果为</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">child_1,</span><br><span class="line">child_2,</span><br><span class="line">child_3,</span><br><span class="line">child_1_1,</span><br><span class="line">child_1_2,</span><br><span class="line">child_1_3,</span><br><span class="line">child_2,</span><br><span class="line">child_2_1,</span><br><span class="line">child_2_2,</span><br><span class="line">child_1_1_1,</span><br><span class="line">child_1_2_1</span><br><span class="line">]</span><br></pre></td></tr></table></figure></div><p>深度优先与广度优先经常用在<strong>二叉树</strong>的搜索上。</p><p>二叉树：一种每个节点不能多于有两个儿子的非线性的数据结构。</p><h4 id="6、请分别用深度优先思想和广度优先思想实现一个拷贝函数。"><a href="#6、请分别用深度优先思想和广度优先思想实现一个拷贝函数。" class="headerlink" title="6、请分别用深度优先思想和广度优先思想实现一个拷贝函数。"></a>6、请分别用深度优先思想和广度优先思想实现一个拷贝函数。</h4><h4 id="7、setTimeout、Promise、Async-Await-的区别"><a href="#7、setTimeout、Promise、Async-Await-的区别" class="headerlink" title="7、setTimeout、Promise、Async/Await 的区别"></a>7、setTimeout、Promise、Async/Await 的区别</h4><p>事件循环中分为宏任务队列和微任务队列。<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/7" target="_blank" rel="noopener">参考文章</a></p><p>在事件循环中，每进行一次循环操作称为 tick，每一次 tick 的任务处理模型是比较复杂的，但关键步骤如下：</p><ul><li>执行一个宏任务（栈中没有就从事件队列中获取）</li><li>执行过程中如果遇到微任务，就将它添加到微任务的任务队列中</li><li>宏任务执行完毕后，立即执行当前微任务队列中的所有微任务（依次执行）</li><li>当前宏任务执行完毕，开始检查渲染，然后GUI线程接管渲染</li><li>渲染完毕后，JS线程继续接管，开始下一个宏任务（从事件队列中获取）</li></ul><p><strong>宏任务</strong>主要包含：script(整体代码)、setTimeout、setInterval、I/O、UI交互事件、postMessage、MessageChannel、setImmediate(Node.js 环境)。</p><p><strong>微任务</strong>主要包含：Promise.then、MutaionObserver、process.nextTick(Node.js 环境)</p><p>其中settimeout的回调函数放到宏任务队列里，等到执行栈清空以后执行；</p><blockquote><p>浏览器和Node 事件循环的区别，主要区别在node10:</p><p>Node 10以前：node会先执行完一个阶段的所有任务,将同源的宏任务队列执行完毕后再去清空微任务队列。</p><p>Node 11以后：，node与浏览器统一，执行完一个宏任务就会去清空微任务队列</p></blockquote><p>promise本身是同步的立即执行函数，promise.then里的回调函数会放到相应宏任务的微任务队列里，等宏任务里面的同步代码执行完再执行；</p><p>async函数表示函数里面可能会有异步方法，await是一个让出线程的标志。await后面的表达式会先执行一遍，将await后面的代码加入到microtask中，然后就会跳出整个async函数来执行后面的代码。</p><p>由于因为async await 本身就是promise+generator的语法糖。所以await后面的代码是微任务。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'async1 start'</span>);</span><br><span class="line"><span class="keyword">await</span> async2();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'async1 end'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*等价于*/</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'async1 start'</span>);</span><br><span class="line"><span class="built_in">Promise</span>.resolve(async2()).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'async1 end'</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>相关例子</p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'async1 start'</span>);</span><br><span class="line">    <span class="keyword">await</span> async2();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'async1 end'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'async2'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script start'</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setTimeout'</span>);</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line">async1();</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise1'</span>);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise2'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script end'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行顺序</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">script start</span></span><br><span class="line"><span class="comment">async1 start</span></span><br><span class="line"><span class="comment">async2</span></span><br><span class="line"><span class="comment">promise1</span></span><br><span class="line"><span class="comment">script end</span></span><br><span class="line"><span class="comment">async1 end</span></span><br><span class="line"><span class="comment">promise2</span></span><br><span class="line"><span class="comment">setTimeout</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">a1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a1 start'</span>)</span><br><span class="line">    <span class="keyword">await</span> a2()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a1 end'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">a2</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a2'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script start'</span>)</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setTimeout'</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise1'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">a1()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">'promise2.then'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise2'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise2.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">    <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'promise3'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script end'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">script start</span><br><span class="line">a1 start</span><br><span class="line">a2</span><br><span class="line">promise2</span><br><span class="line">script end</span><br><span class="line">promise1</span><br><span class="line">a1 end</span><br><span class="line">promise2.then</span><br><span class="line">promise3</span><br><span class="line">setTimeout</span><br></pre></td></tr></table></figure></div><h4 id="8、JS-异步解决方案的发展历程以及优缺点。"><a href="#8、JS-异步解决方案的发展历程以及优缺点。" class="headerlink" title="8、JS 异步解决方案的发展历程以及优缺点。"></a>8、JS 异步解决方案的发展历程以及优缺点。</h4><blockquote><p>回调函数（callback)</p></blockquote><p>缺点：回调地狱，不能用 try catch 捕获错误，不能 return</p><p>优点：解决了同步的问题（只要有一个任务耗时很长，后面的任务都必须排队等着，会拖延整个程序的执行。这是所有异步解决方案的共同问题）</p><blockquote><p>Promise</p></blockquote><p>Promise就是为了解决callback的问题而产生的，本质上感觉还是个回调函数，只是代码顺序让人看着舒服。<br>Promise 实现了链式调用，也就是说每次 then 后返回的都是一个全新 Promise，如果我们在 then 中 return ，return 的结果会被 Promise.resolve() 包装 </p><p>优点：解决了回调地狱的问题</p><p>缺点：无法取消 Promise ，错误需要通过回调函数来捕获</p><blockquote><p>Generator 生成器函数</p></blockquote><p>特点：可以控制函数的执行，可以配合 co 函数库使用</p><p>缺点：不够普及，需要自行调用next方法继续执行。</p><blockquote><p>Async/await</p></blockquote><p>优点：代码清晰，以同步的方式解决了异步请求，不用像 Promise 写一大堆 then 链，处理了回调地狱的问题</p><p>缺点：await 将异步代码改造成同步代码，如果多个异步操作没有依赖性而使用 await 会导致性能上的降低。</p><h4 id="9、Promise-构造函数是同步执行还是异步执行，那么-then-方法呢？"><a href="#9、Promise-构造函数是同步执行还是异步执行，那么-then-方法呢？" class="headerlink" title="9、Promise 构造函数是同步执行还是异步执行，那么 then 方法呢？"></a>9、Promise 构造函数是同步执行还是异步执行，那么 then 方法呢？</h4><p>Promise 构造函数是同步的，then方法也是同步的，只是then里的回电函数callback是异步的。</p><h4 id="10、使用-sort-对数组-3-15-8-29-102-22-进行排序，输出结果"><a href="#10、使用-sort-对数组-3-15-8-29-102-22-进行排序，输出结果" class="headerlink" title="10、使用 sort() 对数组 [3, 15, 8, 29, 102, 22] 进行排序，输出结果"></a>10、使用 sort() 对数组 [3, 15, 8, 29, 102, 22] 进行排序，输出结果</h4><p><code>[102, 15, 22, 29, 3, 8]</code>,根据MDN上对Array.sort()的解释，默认的排序方法会将数组元素转换为字符串，然后比较字符串中字符的UTF-16编码顺序来进行排序。所以’102’ 会排在 ‘15’ 前面</p><h4 id="11、new关键词的作用，如何实现一个new"><a href="#11、new关键词的作用，如何实现一个new" class="headerlink" title="11、new关键词的作用，如何实现一个new"></a>11、new关键词的作用，如何实现一个new</h4><ul><li>不用创建临时对象，因为 new 会帮你做（你使用「this」就可以访问到临时对象）；</li><li>不用绑定原型，因为 new 会帮你做（new 为了知道原型在哪，所以指定原型的名字为 prototype）；</li><li>不用 return 临时对象，因为 new 会帮你做；</li><li>不要给原型想名字了，因为 new 指定名字为 prototype。</li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_new</span>(<span class="params">fn, ...arg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> obj = <span class="built_in">Object</span>.create(fn.prototype);</span><br><span class="line">    <span class="keyword">const</span> ret = fn.apply(obj, arg);</span><br><span class="line">    <span class="keyword">return</span> ret <span class="keyword">instanceof</span> <span class="built_in">Object</span> ? ret : obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="12、介绍下重绘和回流（Repaint-amp-Reflow），以及如何进行优化"><a href="#12、介绍下重绘和回流（Repaint-amp-Reflow），以及如何进行优化" class="headerlink" title="12、介绍下重绘和回流（Repaint &amp; Reflow），以及如何进行优化"></a>12、介绍下重绘和回流（Repaint &amp; Reflow），以及如何进行优化</h4><p>重绘：由于节点的几何属性发生改变或者由于样式发生改变而不会影响布局的，称为重绘，例如outline, visibility, color、background-color等，重绘的代价是高昂的，因为浏览器必须验证DOM树上其他节点元素的可见性。</p><p>回流：回流是布局或者几何属性需要改变就称为回流。回流是影响浏览器性能的关键因素，因为其变化涉及到部分页面（或是整个页面）的布局更新。一个元素的回流可能会导致了其所有子元素以及DOM中紧随其后的节点、祖先节点元素的随后的回流。</p><p>回流必定会发生重绘，重绘不一定会引发回流。</p><h4 id="13、改造下面的代码，使之输出0-9，写出你能想到的所有解法。"><a href="#13、改造下面的代码，使之输出0-9，写出你能想到的所有解法。" class="headerlink" title="13、改造下面的代码，使之输出0 - 9，写出你能想到的所有解法。"></a>13、改造下面的代码，使之输出0 - 9，写出你能想到的所有解法。</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i&lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>利用 setTimeout 函数的第三个参数，会作为回调函数的第一个参数传入</li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">i</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;, <span class="number">1000</span>, i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 代码2</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="built_in">console</span>.log, <span class="number">1000</span>, i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>利用 bind 函数部分执行的特性</li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="built_in">console</span>.log.bind(<span class="built_in">Object</span>.create(<span class="literal">null</span>), i), <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>利用 let 变量的特性 — 在每一次 for 循环的过程中，let 声明的变量会在当前的块级作用域里面（for 循环的 body 体，也即两个花括号之间的内容区域）创建一个文法环境（Lexical Environment），该环境里面包括了当前 for 循环过程中的 i</li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>利用函数自执行的方式，把当前 for 循环过程中的 i 传递进去，构建出块级作用域。IIFE (自运行函数)其实并不属于闭包的范畴。</li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  (<span class="function"><span class="params">i</span> =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;)(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 代码2</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(i);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (&#123;</span><br><span class="line">    message: i</span><br><span class="line">  &#125;) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>很多其它的方案只是把 console.log(i) 放到一个函数里面，因为 setTimeout 函数的第一个参数只接受函数以及字符串，如果是 js 语句的话，js 引擎应该会自动在该语句外面包裹一层函数。</li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="built_in">console</span>.log(i), <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="function">(<span class="params">(</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;)(), <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  setTimeout((<span class="function"><span class="params">i</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;)(i), <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  setTimeout((<span class="function"><span class="params">i</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;).call(<span class="built_in">Object</span>.create(<span class="literal">null</span>), i), <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>利用 eval 或者 new Function 执行字符串</li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="built_in">eval</span>(<span class="string">'console.log(i)'</span>), <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'i'</span>, <span class="string">'console.log(i)'</span>)(i), <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="14、下面代码中-a-在什么情况下会打印-1？"><a href="#14、下面代码中-a-在什么情况下会打印-1？" class="headerlink" title="14、下面代码中 a 在什么情况下会打印 1？"></a>14、下面代码中 a 在什么情况下会打印 1？</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = ?;</span><br><span class="line"><span class="keyword">if</span>(a == <span class="number">1</span> &amp;&amp; a == <span class="number">2</span> &amp;&amp; a == <span class="number">3</span>)&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>引用类型在比较运算符时候,隐式转换会调用本类型toString或valueOf方法，所以要将a设置为引用类型，并且重写toString或者valueOf方法。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  i: <span class="number">1</span>,</span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> a.i++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( a == <span class="number">1</span> &amp;&amp; a == <span class="number">2</span> &amp;&amp; a == <span class="number">3</span> ) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">var</span> a = &#123;<span class="attr">num</span>:<span class="number">0</span>&#125;;</span><br><span class="line">a.valueOf = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ++a.num</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a == <span class="number">1</span> &amp;&amp; a == <span class="number">2</span> &amp;&amp; a == <span class="number">3</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="15、介绍下-BFC-及其应用。"><a href="#15、介绍下-BFC-及其应用。" class="headerlink" title="15、介绍下 BFC 及其应用。"></a>15、介绍下 BFC 及其应用。</h4><p>BFC全场Block Formatting context(格式化上下文) 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。</p><p>具有 BFC 特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且 BFC 具有普通容器所没有的一些特性。</p><p>只要元素满足下面任一条件即可触发 BFC 特性：</p><ul><li>body 根元素</li><li>浮动元素：float 除 none 以外的值</li><li>绝对定位元素：position (absolute、fixed)</li><li>display 为 inline-block、table-cells、flex</li><li>overflow 除了 visible 以外的值 (hidden、auto、scroll)</li></ul><h4 id="16、HTTPS为什么比HTTP安全"><a href="#16、HTTPS为什么比HTTP安全" class="headerlink" title="16、HTTPS为什么比HTTP安全"></a>16、HTTPS为什么比HTTP安全</h4><p>HTTP传输为明文传输，相当于在网络世界裸奔，容易被hacker劫持并且串改传输内容，比如一些微信网页会被当地电信商劫持并且插入广告。</p><p>而加密传输就是将传输内容经过一种可逆的数学计算后发送给接受方，接受方通过逆计算获得原数据。</p><p>把操作数A作为明文，操作数B作为密钥，结果C作为密文。可以看到加密解密运用同一个密钥B，把这种加解密都用同一个密钥的方式叫做<strong>对称加密（AES）</strong>。但是对称加密有一个问题，这个对称加密用到的密钥怎么互相告知呢？如果在传输真正的数据之前，先把密钥传过去，那Hacker还是能嗅探到，那之后就了无秘密了。</p><p>所以有一种更安全的<strong>非对称加密（RSA）</strong>方式:任何人都可以通过拿到A公开的公钥对内容进行加密，然后只A自己私有的钥匙才能解密还原出原来内容。但是非对称加密由于要经过更多的计算，所以会被认为性能更低，因此我们用它来先协商<strong>对称加密的密钥</strong>即可，后续真正通信的内容还是用对称加密的手段，提高整体的性能。</p><p>上边虽然解决了密钥配送的问题，但是中间人还是可以欺骗双方，只要在Alice像Bob要公钥的时候，Hacker把自己公钥给了Alice，而Alice是不知道这个事情的，以为一直都是Bob跟她在通信。</p><p><img src="http://rapheal-wordpress.stor.sinaapp.com/uploads/2015/09/%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%AC%BA%E9%AA%97.png" alt></p><p>为了解决这个问题，我们需要证明这个公钥就是Bob给的，所以我们要看Bob的“身份证”。这个身份证就是一个数字证书。数字证书是一个权威组织CA颁发给Bob的，前边说到用公钥进行加密，只有拥有私钥的人才能解密。数字证书有点反过来：用私钥进行加密，用公钥进行解密。CA用自己的私钥对Bob的信息（包含Bob公钥）进行加密，由于Alice无条件信任CA，所以已经提前知道CA的公钥，当她收到Bob证书的时候，只要用CA的公钥对Bob证书内容进行解密，发现能否成功解开（还需要校验完整性），此时说明Bob就是Bob，那之后用证书里边的Bob公钥来走之前的流程，就解决了中间人欺骗这个问题了。</p><p>最后还要解决传输的完整性，单向Hash函数可以把输入变成一个定长的输出串，其特点就是无法从这个输出还原回输入内容，并且不同的输入几乎不可能产生相同的输出，即便你要特意去找也非常难找到这样的输入（抗碰撞性），因此Alice只要将明文内容做一个Hash运算得到一个Hash值，并一起加密传递过去给Bob。Hacker即便篡改了内容，Bob解密之后发现拿到的内容以及对应计算出来的Hash值与传递过来的不一致，说明这个包的完整性被破坏了。</p><p><img src="http://rapheal-wordpress.stor.sinaapp.com/uploads/2015/09/%E6%95%B0%E6%8D%AE%E5%AE%8C%E6%95%B4%E6%80%A7.png" alt></p><p>一次安全可靠的通信包括以下几点：</p><ol><li>对称加密以及非对称加密来解决：保密性</li><li>数字签名：认证、不可抵赖</li><li>单向Hash算法：完整性</li></ol><p><img src="http://rapheal-wordpress.stor.sinaapp.com/uploads/2015/09/%E4%B8%80%E6%AC%A1%E5%8F%AF%E9%9D%A0%E7%9A%84%E9%80%9A%E4%BF%A1.png" alt></p><p><a href="https://developers.weixin.qq.com/community/develop/article/doc/000046a5fdc7802a15f7508b556413" target="_blank" rel="noopener">参考文章</a></p><p>所以HTTPS握手过程为：</p><p>1、客户端通过https的url访问服务端要求建立ssh连接</p><p>2、服务端收到消息后，把自己的公钥和网站证书(证书里一般有数字签名)打包发给客户端。</p><p>3、客户端使收到后，会检查证书的颁发机构以及过期时间, 如果没有问题就随机产生一个会话秘钥。</p><p>4、客户端用服务端发过来的的公钥对这个随机产生的会话密钥进行加密发给服务端，服务端再用自己的密钥对其解密获得客户端发过来的会话密钥。(这一步即为非对称加密传输过程)</p><p>5、接下来客户端与服务端就可以通过这个会话密钥进行加密传输了(这一步即为对称加密传输过程)。</p><p>HTTPS 握手过程中，客户端如何验证证书的合法性？</p><p>浏览器都会有内置的根证书，根据证书上写的CA签发机构，找到对应的证书公钥，用此公钥解开数字签名，得到摘要（digest,证书内容的hash值），据此验证证书的合法性。</p><h4 id="17、为什么通常在发送数据埋点请求的时候使用的是-1x1-像素的透明-gif-图片？"><a href="#17、为什么通常在发送数据埋点请求的时候使用的是-1x1-像素的透明-gif-图片？" class="headerlink" title="17、为什么通常在发送数据埋点请求的时候使用的是 1x1 像素的透明 gif 图片？"></a>17、为什么通常在发送数据埋点请求的时候使用的是 1x1 像素的透明 gif 图片？</h4><p>够完成整个 HTTP 请求+响应（尽管不需要响应内容）,请求图片资源不会造成跨域的问题，gif相比其他图片资源又是最小的，一般埋点操作后单不需要做响应(响应码为204，即接受到请求但不做响应)，相比XMLHttpRequest 对象发送 GET 请求，性能上更好，因为不会对dom产生影响，所以不会阻塞页面加载，影响用户的体验，只要new Image对象就好了,一般情况下也不需要append到DOM中，通过它的onerror和onload事件来检测发送状态；</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"> <span class="keyword">var</span> thisPage = location.href;</span><br><span class="line"> <span class="keyword">var</span> referringPage = (<span class="built_in">document</span>.referrer) ? <span class="built_in">document</span>.referrer : <span class="string">"none"</span>;</span><br><span class="line"> <span class="keyword">var</span> beacon = <span class="keyword">new</span> Image();</span><br><span class="line"> beacon.src = <span class="string">"http://www.example.com/logger/beacon.gif?page="</span> + <span class="built_in">encodeURI</span>(thisPage)</span><br><span class="line"> + <span class="string">"&amp;ref="</span> + <span class="built_in">encodeURI</span>(referringPage);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></div><h4 id="18、模拟实现一个-Promise-finally"><a href="#18、模拟实现一个-Promise-finally" class="headerlink" title="18、模拟实现一个 Promise.finally"></a>18、模拟实现一个 Promise.finally</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.protptype.finally = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> P = <span class="keyword">this</span>.constructor;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.then(</span><br><span class="line">value =&gt; P.resolve(callback()).then(<span class="function"><span class="params">()</span>=&gt;</span>value),</span><br><span class="line">reason =&gt; P.reject(callback()).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123; <span class="keyword">throw</span>.reason&#125; )</span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><code>in</code>运算符会检查到原型链上，hasOwnProperty方法只会检查到实例上</p><h4 id="19、用已有的promise实现-Prmoise-all方法"><a href="#19、用已有的promise实现-Prmoise-all方法" class="headerlink" title="19、用已有的promise实现 Prmoise.all方法"></a>19、用已有的promise实现 Prmoise.all方法</h4><p>首先需要将输入数组中的所有 Promise 对象均运行起来； 2. 在有 Promise 对象 resolve 后，判断是否所有对象均已 resolve，当所有 Promise 均被 resolve 后进行整体的 resolve；此外，当任何一个 Promise 对象出现 reject 后，直接 reject。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">promiseAll</span>(<span class="params">promises</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isArray(promises)) &#123;</span><br><span class="line">      <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'arguments must be an array'</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> resolvedCounter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> promiseNum = promises.length;</span><br><span class="line">    <span class="keyword">var</span> resolvedValues = <span class="keyword">new</span> <span class="built_in">Array</span>(promiseNum);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; promiseNum; i++) &#123;</span><br><span class="line">      (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">Promise</span>.resolve(promises[i]).then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">          resolvedCounter++</span><br><span class="line">          resolvedValues[i] = value</span><br><span class="line">          <span class="keyword">if</span> (resolvedCounter == promiseNum) &#123;</span><br><span class="line">            <span class="keyword">return</span> resolve(resolvedValues)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> reject(reason)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)(i)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="20、用已有的promise实现-Prmoise-race方法"><a href="#20、用已有的promise实现-Prmoise-race方法" class="headerlink" title="20、用已有的promise实现 Prmoise.race方法"></a>20、用已有的promise实现 Prmoise.race方法</h4><p>上面的修改一下，不用resolvedCounter == promiseNum判断。</p><h4 id="21、闭包的理解"><a href="#21、闭包的理解" class="headerlink" title="21、闭包的理解"></a>21、闭包的理解</h4><p>你不知道的JS摘抄：当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行。(无论通过何种手段将内部函数传递到所在的词法作用域以外，它都会持有对原始定义作用域的引用，无论在何处执行这个函数都会使用闭包)。本质上无论何时何地，如果将(访问它们各自词法作用域的)函数当作第一 级的值类型并到处传递，你就会看到闭包在这些函数中的应用。在定时器、事件监听器、 Ajax 请求、跨窗口通信、Web Workers 或者任何其他的异步(或者同步)任务中，只要使 用了回调函数，实际上就是在使用闭包!</p><h4 id="22、精度问题"><a href="#22、精度问题" class="headerlink" title="22、精度问题"></a>22、精度问题</h4><p>如何判断0.1+0.2和0.3是否相等？最常见的方法是设置一个误差范围值，通常称为“机器精度”，对于JavaScript来说，这个值通常是2^-52。在ES6开始，该值定义在Number.EPSILON中，ES6之前的版本可以写polyfill:Math.pow(2, -52)。可是使用Number.EPSILON来比较俩个数字是否相等。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">numbersCloseEnoughToEqual</span>(<span class="params">n1,n2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.abs( n1 - n2 ) &lt; <span class="built_in">Number</span>.EPSILON;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">0.1</span> + <span class="number">0.2</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">0.3</span>;</span><br><span class="line">numbersCloseEnoughToEqual( a, b );</span><br></pre></td></tr></table></figure></div><h4 id="23、原型链"><a href="#23、原型链" class="headerlink" title="23、原型链"></a>23、原型链</h4><p>[[Prototype]] 机制就是存在于对象中的一个内部链接，它会引用其他对象，通常来说，这个链接的作用是:如果在对象上没有找到需要的属性或者方法引用，引擎就 会继续在[[Prototype]]关联的对象上进行查找。同理，如果在后者中也没有找到需要的引用就会继续查找它的[[Prototype]]，以此类推。这一系列对象的链接被称为“原型链”。</p><h4 id="24、Promise"><a href="#24、Promise" class="headerlink" title="24、Promise"></a>24、Promise</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Promise.resolve // 返回一个Promise，状态为fulfilled</span></span><br><span class="line"><span class="comment">// Promise.reject // 返回一个Promise，状态为rekected</span></span><br><span class="line"><span class="comment">// Promise.all // 所有都成功=&gt;fulfilled 有一个失败=&gt;rejected</span></span><br><span class="line"><span class="comment">// Promise.race // 有一个率先改变，就跟着它的状态</span></span><br><span class="line"><span class="comment">// Promise.any // 有一个成功=&gt;fulfilled 全部失败=&gt;rejected</span></span><br><span class="line"><span class="comment">// Promise.allSettled // 无论成功失败，等所有都改变了状态，返回为一个数组包含了每个Promise的值和状态</span></span><br><span class="line"><span class="comment">// Promise.try // 如果是同步代码执行同步的，异步的就返回Promise，和async 函数相似</span></span><br></pre></td></tr></table></figure></div><p>手写实现一个简单版的Promise</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pending = <span class="string">'pending'</span>;</span><br><span class="line"><span class="keyword">let</span> reject = <span class="string">'reject'</span>;</span><br><span class="line"><span class="keyword">let</span> resolve = <span class="string">'resolve'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(fn) &#123;</span><br><span class="line">    <span class="keyword">this</span>.status = pending;</span><br><span class="line">    <span class="keyword">this</span>.value = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">this</span>.reason = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">this</span>.resolveCbs = [];</span><br><span class="line">    <span class="keyword">this</span>.rejectCbs = [];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.status !== pending) <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">this</span>.status = resolve;</span><br><span class="line">      <span class="keyword">this</span>.value = value;</span><br><span class="line">      <span class="keyword">this</span>.resolveCbs.map(<span class="function"><span class="params">fn</span> =&gt;</span> fn(<span class="keyword">this</span>.value));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.status !== pending) <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">this</span>.status = reject;</span><br><span class="line">      <span class="keyword">this</span>.reason = reason;</span><br><span class="line">      <span class="keyword">this</span>.rejectCbs.map(<span class="function"><span class="params">fn</span> =&gt;</span> fn(<span class="keyword">this</span>.reason));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fn(resolve.bind(<span class="keyword">this</span>), reject.bind(<span class="keyword">this</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  then(onResolve, onReject) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.status === resolve) &#123;</span><br><span class="line">      onResolve(<span class="keyword">this</span>.value)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.status === reject) &#123;</span><br><span class="line">      onReject(<span class="keyword">this</span>.reason)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.status === pending) &#123;</span><br><span class="line">      <span class="keyword">this</span>.resolveCbs.push(onResolve);</span><br><span class="line">      <span class="keyword">this</span>.rejectCbs.push(onReject);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="25、async-await"><a href="#25、async-await" class="headerlink" title="25、async await"></a>25、async await</h4><p>async函数的返回值是 Promise 对象，async函数内部return语句返回的值，会成为then方法回调函数的参数。async函数内部抛出错误，会导致返回的 Promise 对象变为reject状态。抛出的错误对象会被catch方法回调函数接收到。只有async函数内部的异步操作执行完，才会执行then方法指定的回调函数。</p><p>async函数完全可以看作多个异步操作，包装成的一个 Promise 对象，而await命令就是内部then命令的语法糖。</p><p>任何一个await语句后面的 Promise 对象变为reject状态，那么整个async函数都会中断执行。有时，我们希望即使前一个异步操作失败，也不要中断后面的异步操作。这时可以将第一个await放在try…catch结构里面，这样不管这个异步操作是否成功，第二个await都会执行。另一种方法是await后面的 Promise 对象再跟一个catch方法，处理前面可能出现的错误。</p><h4 id="26、http2"><a href="#26、http2" class="headerlink" title="26、http2"></a>26、http2</h4><p>二进制分帧： HTTP/2 采用二进制格式传输数据，而非 HTTP 1.x 的文本格式，二进制协议解析起来更高效。HTTP / 1 的请求和响应报文，都是由起始行，首部和实体正文（可选）组成，各部分之间以文本换行符分隔。HTTP/2 将请求和响应数据分割为更小的帧，并且它们采用二进制编码。HTTP/2 中，同域名下所有通信都在单个连接上完成，该连接可以承载任意数量的双向数据流</p><p>多路复用：多路复用，代替原来的序列和阻塞机制。所有就是请求的都是通过一个 TCP连接并发完成。 HTTP 1.x 中，如果想并发多个请求，必须使用多个 TCP 链接，且浏览器为了控制资源，还会对单个域名有 6-8个的TCP链接请求限制，如下图，红色圈出来的请求就因域名链接数已超过限制，而被挂起等待了一段时间。</p><p>服务器推送：服务端可以在发送页面HTML时主动推送其它资源，而不用等到浏览器解析到相应位置，发起请求再响应。例如服务端可以主动把JS和CSS文件推送给客户端，而不需要客户端解析HTML时再发送这些请求。服务端可以主动推送，客户端也有权利选择是否接收。</p><p>头部压缩：HTTP 1.1请求的大小变得越来越大，有时甚至会大于TCP窗口的初始大小，因为它们需要等待带着ACK的响应回来以后才能继续被发送。HTTP/2对消息头采用HPACK（专为http/2头部设计的压缩格式）进行压缩传输，能够节省消息头占用的网络的流量。</p><h4 id="27、JS继承的方式"><a href="#27、JS继承的方式" class="headerlink" title="27、JS继承的方式"></a>27、JS继承的方式</h4><ol><li>原型链继承</li></ol><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">Cat.prototype = <span class="keyword">new</span> Animal()</span><br><span class="line">Cat.prototype = <span class="string">'cat'</span></span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat();</span><br></pre></td></tr></table></figure></div><ol start="2"><li>构造继承</li></ol><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">Animal.call(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">this</span>.name = name || <span class="string">'cat'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat();</span><br></pre></td></tr></table></figure></div><ol start="3"><li>实例继承</li></ol><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> Animal();</span><br><span class="line">instance.name = name || <span class="string">'Tom'</span>;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ol start="4"><li>拷贝继承</li></ol><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> animal = <span class="keyword">new</span> Animal();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> p <span class="keyword">in</span> animal)&#123;</span><br><span class="line">Cat.prototype[p]=animal[p];</span><br><span class="line">&#125;</span><br><span class="line">Cat.prototype.name = name || <span class="string">'Tom'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ol start="5"><li>组合继承</li></ol><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">Animal.call(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">this</span>.name = name || <span class="string">'Tom'</span>;</span><br><span class="line">&#125;</span><br><span class="line">Cat.prototype = <span class="keyword">new</span> Animal();</span><br></pre></td></tr></table></figure></div><ol start="6"><li>寄生组合继承</li></ol><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">Animal.call(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">this</span>.name = name || <span class="string">'Tom'</span>;</span><br><span class="line">&#125;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> Super = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">Super.prototype = Animal.prototype;</span><br><span class="line">Cat.prototype = <span class="keyword">new</span> Super();</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></div><h4 id="28、三次握手，四次挥手"><a href="#28、三次握手，四次挥手" class="headerlink" title="28、三次握手，四次挥手"></a>28、三次握手，四次挥手</h4><p>TCP提供了一种可靠、面向连接、字节流、传输层的服务，采用三次握手建立一个连接，采用四次挥手关闭一个连接。</p><p>三次握手的作用就是双方都能明确自己和对方的收、发能力是正常的。需要三次握手才能确认双方的接收与发送能力是否正常</p><p>第一次握手：客户端发送网络包。服务端收到，服务端得出结论：客户端的发送能力、服务端的接受能力是正常的。</p><p>第二次握手：服务端发包，客户端收到了，这样客户端得出结论：服务端的接收、发送能留，客户端的接收、发送能力是正常的。</p><p>第三次握手：客户端发包，服务端收到了。这样服务端就能得出结论：客户端的接收、发送能力，服务端的发送、接收能力是正常的。</p><p>经历了上面三次握手过程，客户端和服务端都确认了自己的接收、发送能力是正常的，之后就可以正常通信了。</p><p>四次挥手，TCP连接是双向传输的对等模式，就是说双方都可以同时向对方发送或接收数据，当有一方要关闭连接时，会发送指令告知对方。为什么是四次，是由于TCP的半关闭照成的，半关闭就是TCP提供了连接的一端在结束它的发送后还能接受来自另一段数据的能力。</p><p>为什么挥手需要四次：当服务端收到客服端SYN连接请求报文后，可以直接发送SYN+ACK报文。其中ACK报文是用来应答的，SYN报文是用来同步的。但是关闭连接时，当服务端收到FIN报文时，很可能并不会立即关闭SOCKET，所以只能先回复一个ACK报文，告诉客户端，”你发的FIN报文我收到了”。只有等到我服务端所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送。故需要四次挥手。</p><p>29、快速排序</p><p>先找到一个基准点（一般指数组的中部），然后数组被该基准点分为两部分，依次与该基准点数据比较，如果比它小，放左边；反之，放右边。左右分别用一个空数组去存储比较后的数据，最后递归执行上述操作，直到数组长度 &lt;= 1。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">list</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (list.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> minInd = <span class="built_in">Math</span>.floor(list.length / <span class="number">2</span>);</span><br><span class="line"><span class="keyword">let</span> left = [];</span><br><span class="line"><span class="keyword">let</span> right = [];</span><br><span class="line"><span class="keyword">let</span> minVal = list.splice(minInd,<span class="number">1</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i =<span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (list[i] &lt; minVal) &#123;</span><br><span class="line">left.push(list[i])</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">right.push(list[i])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> [...quickSort(left), minVal, ...quickSort(right)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1、写-React-Vue-项目时为什么要在列表组件中写-key，其作用是什么？&quot;&gt;&lt;a href=&quot;#1、写-React-Vue-项目时为什么要在列表组件中写-key，其作用是什么？&quot; class=&quot;headerlink&quot; title=&quot;1、写 React / Vue 项目时为什么要在列表组件中写 key，其作用是什么？&quot;&gt;&lt;/a&gt;1、写 React / Vue 项目时为什么要在列表组件中写 key，其作用是什么？&lt;/h4&gt;&lt;p&gt;自答：&lt;/p&gt;
&lt;p&gt;要明白key的作用，首先我们要知道列表组件带key与不带key会有什么区别。&lt;/p&gt;
&lt;p&gt;前提我们需要知道vue如何更新列表组件的。&lt;/p&gt;
&lt;p&gt;在vue的diff函数中。经过交叉对比后，当新节点跟旧节点头尾交叉对比没有结果时，会根据新节点的key去对比旧节点数组中的key，从而找到相应旧节点（这里对应的是一个key =&amp;gt; index 的map映射）。如果没找到就认为是一个新增节点。而如果没有key，那么就会采用遍历查找的方式去找到对应的旧节点。&lt;/p&gt;
    
    </summary>
    
      <category term="自问自答" scheme="http://blog.zijunfe.cn/categories/%E8%87%AA%E9%97%AE%E8%87%AA%E7%AD%94/"/>
    
    
  </entry>
  
  <entry>
    <title>LeeCode常见算法系列(持续更新！2-26)</title>
    <link href="http://blog.zijunfe.cn/2021/02/26/leetcode/"/>
    <id>http://blog.zijunfe.cn/2021/02/26/leetcode/</id>
    <published>2021-02-26T06:21:02.000Z</published>
    <updated>2021-02-26T10:09:38.938Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol start="215"><li>数组中的第K个最大元素 <a href="https://leetcode-cn.com/problems/kth-largest-element-in-an-array" target="_blank" rel="noopener">https://leetcode-cn.com/problems/kth-largest-element-in-an-array</a></li></ol></blockquote><p>选择最大数排序，选到下标为k-1的元素时，就可以返回了</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> findKthLargest = <span class="function"><span class="keyword">function</span>(<span class="params">nums, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> maxInd, tmp;</span><br><span class="line">    <span class="keyword">let</span> len = nums.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; len; i++) &#123;</span><br><span class="line">        maxInd = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = i+<span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[j] &gt; nums[maxInd]) &#123;</span><br><span class="line">                maxInd = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        tmp = nums[i];</span><br><span class="line">        nums[i] = nums[maxInd];</span><br><span class="line">        nums[maxInd] = tmp;</span><br><span class="line">        <span class="keyword">if</span> (i === k <span class="number">-1</span>) <span class="keyword">return</span> nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><a id="more"></a><blockquote><ol start="209"><li>长度最小的子数组 <a href="https://leetcode-cn.com/problems/minimum-size-subarray-sum" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-size-subarray-sum</a></li></ol></blockquote><p>滑动窗口，维护俩个下标值start，end，通过Math.min记录窗口的最小长度</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> minSubArrayLen = <span class="function"><span class="keyword">function</span>(<span class="params">target, nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> min = <span class="number">999999999999</span>;</span><br><span class="line">    <span class="keyword">let</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> end = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(end &lt; nums.length) &#123;</span><br><span class="line">        sum += nums[end];</span><br><span class="line">        <span class="keyword">while</span>(sum &gt;= target) &#123;</span><br><span class="line">            min = <span class="built_in">Math</span>.min(min, end - start + <span class="number">1</span>)</span><br><span class="line">            sum -= nums[start];</span><br><span class="line">            start++;</span><br><span class="line">        &#125;</span><br><span class="line">        end++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> min === <span class="number">999999999999</span> ? <span class="number">0</span> : min;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><blockquote><ol start="88"><li>合并两个有序数组 <a href="https://leetcode-cn.com/problems/merge-sorted-array" target="_blank" rel="noopener">https://leetcode-cn.com/problems/merge-sorted-array</a></li></ol></blockquote><p>最直接调用api的方法（不推荐）<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> merge = <span class="function"><span class="keyword">function</span>(<span class="params">nums1, m, nums2, n</span>) </span>&#123;</span><br><span class="line">    nums1.splice(m);</span><br><span class="line">    nums2.splice(n);</span><br><span class="line">    nums1.push(...nums2);</span><br><span class="line">    <span class="keyword">return</span> nums1.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span> a-b);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></p><blockquote><ol start="112"><li>路径总和 <a href="https://leetcode-cn.com/problems/path-sum" target="_blank" rel="noopener">https://leetcode-cn.com/problems/path-sum</a></li></ol></blockquote><p>先收集所有从根到叶子节点的路径，然后判断路径有没有相加为targetSum的</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hasPathSum = <span class="function"><span class="keyword">function</span>(<span class="params">root, targetSum</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">node, pathArr</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!node.left &amp;&amp; !node.right) &#123;</span><br><span class="line">            result.push(pathArr);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.left) &#123;</span><br><span class="line">            fn(node.left, [...pathArr, node.left.val])</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.right) &#123;</span><br><span class="line">            fn(node.right, [...pathArr, node.right.val])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fn(root, [root.val]);</span><br><span class="line">    <span class="keyword">return</span> result.some(<span class="function"><span class="params">item</span> =&gt;</span> item.reduce(<span class="function">(<span class="params">pre, next</span>)=&gt;</span>pre+next, <span class="number">0</span>) === targetSum);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><p>递归，到最后的叶子节点，判断当前的数字是不是0</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hasPathSum = <span class="function"><span class="keyword">function</span>(<span class="params">root, targetSum</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    targetSum -= root.val;</span><br><span class="line">    <span class="keyword">if</span> (!root.left &amp;&amp; !root.right) &#123;</span><br><span class="line">        <span class="keyword">if</span> (targetSum === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> val = root.val;</span><br><span class="line">    <span class="keyword">return</span> hasPathSum(root.left || &#123;&#125;, targetSum) || hasPathSum(root.right || &#123;&#125;, targetSum)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><blockquote><ol start="415"><li>字符串相加 <a href="https://leetcode-cn.com/problems/add-strings" target="_blank" rel="noopener">https://leetcode-cn.com/problems/add-strings</a></li></ol></blockquote><p>简单的加法运算</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> addStrings = <span class="function"><span class="keyword">function</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> p1 = num1.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> p2 = num2.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> arr = [];</span><br><span class="line">    <span class="keyword">while</span>(p1 &gt;= <span class="number">0</span> || p2 &gt;= <span class="number">0</span> || tmp !== <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> count1 = num1.charAt(p1) ? num1.charAt(p1) - <span class="number">0</span> : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> count2 = num2.charAt(p2) ? num2.charAt(p2) - <span class="number">0</span> : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> sum = count1 + count2 + tmp;</span><br><span class="line">        <span class="keyword">if</span> (sum &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            arr.unshift(sum);</span><br><span class="line">            tmp=<span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tmp = <span class="built_in">Math</span>.floor(sum / <span class="number">10</span>);</span><br><span class="line">            arr.unshift(sum % <span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        p1--;</span><br><span class="line">        p2--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr.join(<span class="string">''</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><blockquote><ol start="165"><li>比较版本号 <a href="https://leetcode-cn.com/problems/compare-version-numbers" target="_blank" rel="noopener">https://leetcode-cn.com/problems/compare-version-numbers</a></li></ol></blockquote><p>自个的想法，挨个数比较</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> compareVersion = <span class="function"><span class="keyword">function</span>(<span class="params">version1, version2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr1 = version1.split(<span class="string">'.'</span>);</span><br><span class="line">    <span class="keyword">let</span> arr2 = version2.split(<span class="string">'.'</span>);</span><br><span class="line">    <span class="keyword">let</span> p1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> p2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(p1 &lt; arr1.length || p2 &lt; arr2.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr1[p1] === <span class="literal">undefined</span> &amp;&amp; arr2[p2] - <span class="number">0</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (arr2[p2] === <span class="literal">undefined</span>  &amp;&amp; arr1[p1] - <span class="number">0</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> n1 = arr1[p1] - <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> n2 = arr2[p2] - <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (n1 &gt; n2) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n1 &lt; n2) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        p1++;</span><br><span class="line">        p2++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><blockquote><ol start="226"><li>翻转二叉树 <a href="https://leetcode-cn.com/problems/invert-binary-tree" target="_blank" rel="noopener">https://leetcode-cn.com/problems/invert-binary-tree</a></li></ol></blockquote><p>递归，用一个暂时的中间变量</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> invertTree = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!node) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">let</span> tmp = node.left;</span><br><span class="line">        node.left = node.right;</span><br><span class="line">        node.right = tmp;</span><br><span class="line">        <span class="keyword">if</span> (node.left) &#123;</span><br><span class="line">            fn(node.left)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.right) &#123;</span><br><span class="line">            fn(node.right)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fn(root)</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><blockquote><ol><li>两数之和 <a href="https://leetcode-cn.com/problems/two-sum" target="_blank" rel="noopener">https://leetcode-cn.com/problems/two-sum</a></li></ol></blockquote><p>哈希表，用空间换时间</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    <span class="keyword">let</span> tmp;</span><br><span class="line">    map.set(nums[<span class="number">0</span>], <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        tmp = target - nums[i];</span><br><span class="line">        <span class="keyword">if</span> (map.get(tmp) !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> [map.get(tmp), i]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            map.set(nums[i], i)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><blockquote><p>路径总和 II <a href="https://leetcode-cn.com/problems/path-sum-ii/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/path-sum-ii/</a></p></blockquote><p>递归，得到每一条路径，然后最后判断这条路径的数相加是不是目标数</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pathSum = <span class="function"><span class="keyword">function</span>(<span class="params">root, targetSum</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> [];</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">node, arr</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!node.left &amp;&amp; !node.right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr.reduce(<span class="function">(<span class="params">a,b</span>) =&gt;</span> a+b, <span class="number">0</span>) === targetSum) &#123;</span><br><span class="line">                result.push(arr);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.left) &#123;</span><br><span class="line">            fn(node.left, [...arr, node.left.val])</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.right) &#123;</span><br><span class="line">            fn(node.right, [...arr, node.right.val])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fn(root, [root.val])</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><blockquote><p>141 判断环形链表     <a href="https://leetcode-cn.com/problems/linked-list-cycle" target="_blank" rel="noopener">https://leetcode-cn.com/problems/linked-list-cycle</a></p></blockquote><ol><li>使用一个set数据记录每一步的数据</li></ol><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hasCycle = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">set</span> = new Set();</span><br><span class="line">    let pre = head;</span><br><span class="line">    while(pre) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">set</span>.has(pre)) return true;</span><br><span class="line">        <span class="keyword">set</span>.add(pre)</span><br><span class="line">        pre = pre.next;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><ol start="2"><li>快慢指针，快指针走俩步，慢指针走一步，相等了就是环形</li></ol><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hasCycle = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> d = <span class="keyword">new</span> ListNode();</span><br><span class="line">    d.next = head;</span><br><span class="line">    <span class="keyword">let</span> fast = slow = d;</span><br><span class="line">    <span class="keyword">if</span> (!fast.next || !fast.next.next) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span>(fast &amp;&amp; fast.next) &#123;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        <span class="keyword">if</span> (fast === slow) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><blockquote><p>53 最大子序和 <a href="https://leetcode-cn.com/problems/maximum-subarray/submissions/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximum-subarray/submissions/</a></p></blockquote><p>动态规划</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> maxSubArray = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> pre = <span class="number">0</span>, maxAns = nums[<span class="number">0</span>];</span><br><span class="line">    nums.forEach(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">        pre = <span class="built_in">Math</span>.max(pre + x, x);</span><br><span class="line">        maxAns = <span class="built_in">Math</span>.max(maxAns, pre);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> maxAns;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><blockquote><ol start="121"><li>买卖股票的最佳时机 <a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock" target="_blank" rel="noopener">https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock</a></li></ol></blockquote><p>维护一个最大值</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> maxProfit = <span class="function"><span class="keyword">function</span>(<span class="params">prices</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> len = prices.length;</span><br><span class="line">    <span class="keyword">let</span> min = prices[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> result = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">let</span> start = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(start &lt; len) &#123;</span><br><span class="line">        <span class="keyword">if</span> (prices[start] &lt; min) &#123;</span><br><span class="line">            min = prices[start];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (min &lt; prices[start]) &#123;</span><br><span class="line">            result = <span class="built_in">Math</span>.max(result, prices[start] - min);</span><br><span class="line">        &#125;</span><br><span class="line">        start++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result === <span class="number">-1</span> ? <span class="number">0</span> : result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><blockquote><ol start="94"><li>二叉树的中序遍历 <a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal" target="_blank" rel="noopener">https://leetcode-cn.com/problems/binary-tree-inorder-traversal</a></li></ol></blockquote><p>中序遍历： 按照访问左子树——根节点——右子树的方式遍历这棵树，而在访问左子树或者右子树的时候我们按照同样的方式遍历，直到遍历完整棵树。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> inorderTraversal = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!node) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (node.left) &#123;</span><br><span class="line">            fn(node.left)</span><br><span class="line">        &#125;</span><br><span class="line">        result.push(node.val);</span><br><span class="line">        <span class="keyword">if</span> (node.right) &#123;</span><br><span class="line">            fn(node.right)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fn(root)</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><blockquote><ol start="15"><li>三数只和 <a href="https://leetcode-cn.com/problems/3sum/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/3sum/</a></li></ol></blockquote><p>先对数组进行从小到大的排序，再对排序数组进行循环，如果当前数大与0，已经不可能有三数相加为0了，跳出循环，维护左右俩个指针，相加三个数，和为0的时候，加入结果，并且为了避免没有重复数据，要对俩个指针进行while循环，去除重复数据，小于0 的时候，左边++，大于0 的时候右边减减。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> threeSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> len = nums.length;</span><br><span class="line">    <span class="keyword">if</span> (len &lt; <span class="number">3</span>) <span class="keyword">return</span> [];</span><br><span class="line">    <span class="keyword">if</span> (len === <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>] + nums[<span class="number">1</span>] + nums[<span class="number">2</span>] === <span class="number">0</span> ? [nums] : [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    <span class="keyword">let</span> sortNums = nums.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a-b);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> p = <span class="number">0</span>; p &lt; len; p++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sortNums[p] &gt; <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">       <span class="keyword">if</span> (p &gt; <span class="number">0</span> &amp;&amp; sortNums[p] === sortNums[p<span class="number">-1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">       <span class="keyword">let</span> left = p + <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">let</span> right = len - <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">while</span>(left &lt; right) &#123;</span><br><span class="line">           <span class="keyword">let</span> sum = sortNums[p] + sortNums[left] + sortNums[right];</span><br><span class="line">           <span class="keyword">if</span> (sum === <span class="number">0</span>) &#123;</span><br><span class="line">               result.push([sortNums[p],sortNums[left],sortNums[right]])</span><br><span class="line">               <span class="keyword">while</span>(left &lt; right &amp;&amp; sortNums[left] === sortNums[left+<span class="number">1</span>]) left++;</span><br><span class="line">               <span class="keyword">while</span>(left &lt; right &amp;&amp; sortNums[right] === sortNums[right<span class="number">-1</span>]) right--;</span><br><span class="line">               left++;</span><br><span class="line">               right--; </span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">               right--;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               left++;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ol start=&quot;215&quot;&gt;
&lt;li&gt;数组中的第K个最大元素 &lt;a href=&quot;https://leetcode-cn.com/problems/kth-largest-element-in-an-array&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode-cn.com/problems/kth-largest-element-in-an-array&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;选择最大数排序，选到下标为k-1的元素时，就可以返回了&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; findKthLargest = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;nums, k&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; maxInd, tmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; len = nums.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ; i &amp;lt; len; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        maxInd = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; j = i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; j &amp;lt; len; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (nums[j] &amp;gt; nums[maxInd]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                maxInd = j;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        tmp = nums[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        nums[i] = nums[maxInd];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        nums[maxInd] = tmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (i === k &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; nums[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://blog.zijunfe.cn/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Webpack优化总结</title>
    <link href="http://blog.zijunfe.cn/2021/01/24/webpack/"/>
    <id>http://blog.zijunfe.cn/2021/01/24/webpack/</id>
    <published>2021-01-24T08:10:23.000Z</published>
    <updated>2021-02-26T10:00:56.455Z</updated>
    
    <content type="html"><![CDATA[<h4 id="缩小文件搜索范围"><a href="#缩小文件搜索范围" class="headerlink" title="缩小文件搜索范围"></a>缩小文件搜索范围</h4><ol><li>优化loader配置。</li></ol><p>由于Loader对文件的转化操作很耗时，需要让尽可能少的文件被Loader处理。为了尽可能少的让文件被 Loader 处理，可以通过 include 去命中只有哪些文件需要被处理。</p><a id="more"></a><ol start="2"><li>优化resolve.modules配置</li></ol><p>resolve.modules 用于配置 Webpack 去哪些目录下寻找第三方模块。resolve.modules 的默认值是 [‘node_modules’]，含义是先去当前目录下的 ./node_modules 目录下去找想找的模块，如果没找到就去上一级目录 ../node_modules 中找，再没有就去 ../../node_modules 中找，以此类推，这和 Node.js 的模块寻找机制很相似。</p><p>当安装的第三方模块都在项目根目录下的 ./node_modules 目录下时，没有必要按照默认方式去一层层的寻找，可以指明存放第三方模块下的绝对路径，以减少寻找。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    // 使用绝对路径指明第三方模块存放的位置，以减少搜索步骤</span><br><span class="line">    // 其中 __dirname 表示当前工作目录，也就是项目根目录</span><br><span class="line">    modules: [path.resolve(__dirname, &apos;node_modules&apos;)]</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><ol start="3"><li>优化resove.mainFields配置</li></ol><p>resove.mainFields 用于配置第三方模块使用哪个入口文件。安装的第三方模块中会有一个 package.json 文件用于描述这个模块的属性，其中有些字段用于描述入口文件在哪里，resolve.mainFields 用于配置采用哪个字段作为入口文件的描述。可以存在多个字段描述入口文件的原因是因为有些模块可以同时用在多个环境中，针对不同的运行环境需要使用不同的代码。</p><p>为了减少搜索步骤，在你明确第三方模块的入口文件描述字段时，你可以把它设置的尽量少。 由于大多数第三方模块都采用 main 字段去描述入口文件的位置，直接把mainFields设置为[main]</p><ol start="4"><li>优化resolve.alias配置</li></ol><p>resolve.alias 配置项通过别名来把原导入路径映射成一个新的导入路径。</p><p>vue-cli3的默认配置已做次优化：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alias: &#123;</span><br><span class="line">  &apos;@&apos;: &apos;/Users/biyangjun/gridsum/zeta/metaspace-ui/src&apos;,</span><br><span class="line">  vue$: &apos;vue/dist/vue.runtime.esm.js&apos;, // 直接将Vue库指向Vue源码中的runtime版本文件，从而跳过耗时的递归解析操作</span><br><span class="line">  src: &apos;/Users/biyangjun/gridsum/zeta/metaspace-ui/src&apos;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></div></p><ol start="5"><li>优化 resolve.extensions 配置</li></ol><p>在导入语句没带文件后缀时，Webpack 会自动带上后缀后去尝试询问文件是否存在，resolve.extensions 用于配置在尝试过程中用到的后缀列表，默认为[‘.js’,’.json’]。</p><p>后缀尝试列表尽可能的小，不要把项目中不可能存在的情况写到后缀尝试列表中。</p><p>频率出现最高的文件优先放到最前面，做到尽快的退出寻找过程。</p><p>在源码中写入导入语句时，要经可能带上后缀，避免寻找过程。</p><ol start="6"><li>优化module.noParse配置</li></ol><p>module.noParse 配置项可以让Webpack忽略对部分没采用模块化的文件的递归解析处理，这样做的好处是能提高构建性能。原因是一些库，例如 jQuery 、ChartJS， 它们庞大又没有采用模块化标准，让 Webpack 去解析这些文件耗时又没有意义。</p><p>注意被忽略掉的文件里不应该包含 import 、 require 、 define 等模块化语句，不然会导致构建出的代码中包含无法在浏览器环境下执行的模块化语句。</p><h4 id="使用可以多进程处理的Plugin"><a href="#使用可以多进程处理的Plugin" class="headerlink" title="使用可以多进程处理的Plugin"></a>使用可以多进程处理的Plugin</h4><ol><li>使用HappyPack</li></ol><p>在整个Webpack构建流程中，最耗时的流程可能就是Loader对文件的转换操作，因为需要转换的文件太多，而且这些转换操作只能一个个挨着处理，HappyPack和核心原理就是把这部分任务分解到多个进程去并行处理，从而减少总的构建时间。</p><p>核心调度器的逻辑代码在主进程中，也就是运行着 Webpack 的进程中，核心调度器会把一个个任务分配给当前空闲的子进程，子进程处理完毕后把结果发送给核心调度器，它们之间的数据交换是通过进程间通信 API 实现的。核心调度器收到来自子进程处理完毕的结果后会通知 Webpack 该文件处理完毕。</p><p>Webpack4官方推出了 thread-loader, 把这个loader放置在其他loader之前，放置在这个loader之后的loader就会在一个单独的worker池中运行。但在worker池中运行的loader是受到限制的，例如：</p><ul><li>这些loader不能产生新的文件</li><li>这些loader不能使用定制的loader API(也就是通过插件)</li><li>这些loader无法获取webpack的选项设置</li></ul><ol start="2"><li>使用ParalleUglifyPlugin</li></ol><p>在使用 Webpack 构建出用于发布到线上的代码时，都会有压缩代码这一流程。 最常见的 JavaScript 代码压缩工具是 UglifyJS，并且 Webpack 也内置了它。由于压缩JavaScript代码需要先把代码解析成用Objectt抽象表示的AST语法树，再去应用各种规则分析和处理AST，导致这个过程计算量巨大，耗时非常多。</p><p>ParalleUglifyPlugin会开启多个子进程，把对多个文件的压缩工作分配给多个子进程完成，每个子进程其实还是通过UglifyJS去压缩代码，但是变成了并行执行，所以ParalleUglifyPlugin能更快的完成对多个文件的压缩工作。</p><h4 id="Webpack文件监听的原理"><a href="#Webpack文件监听的原理" class="headerlink" title="Webpack文件监听的原理"></a>Webpack文件监听的原理</h4><p>在Webpack中监听一个文件发生变化的原理是定时的去获取这个文件的最后编辑时间，每次都存下最新的最后编辑时间，如果发现当前获取的和最后一次保存的最后编辑时间不一致，就认为该文件发生了变化。当发现某个文件发生了变化时，并不会立刻告诉监听者，而是先缓存起来，收集一段时间的变化后，再一次性告诉监听者。</p><h4 id="压缩代码"><a href="#压缩代码" class="headerlink" title="压缩代码"></a>压缩代码</h4><ol><li>从UglifyJS入手</li></ol><p>浏览器从服务器访问网页时获取的js、css资源都是文本形式的，文件越大网页加载时间越长。</p><p>为了提升网页加速速度和减少网络传输流量，可以对这些资源进行压缩，压缩的方法除了可以通过GZIP算法对文件压缩外，还可以对文本本身进行压缩。</p><p>目前最成熟的JavaScript代码压缩工具是UglifyJS，它会分析JavaScript代码语法树，理解代码含义，从而能做到诸如去掉无效代码，去掉日志输出代码，缩短变量名等优化。</p><p>UglifyJS如何改写配置以达到最优的压缩效果。</p><ul><li>sourceMap：是否为压缩后的代码生成对应的SourceMap，默认不开启，开启后耗时会大大增加。建议不开启。</li><li>beautify：是否输出可读性较强的代码，即会保留空格和制表符，默认是。建议关闭。</li><li>comments：是否保留代码中的注释，默认为保留。可以关闭。</li><li>compress.warnings: 是否在UglifyJS删除没有用到的代码时输出警告信息，默认开启。可以关闭。</li><li>drop_console: 是否删除代码中的console语句，默认为不删除。可以开启删除，开启后不仅可以提升代码压缩效果，也可以兼容不支持console语句的IE浏览器。</li><li>collapse_vars：是否内嵌定义了但是只用到一次的变量，例如把 var x = 5; y = x 转换成 y = 5，默认为不转换。为了达到更好的压缩效果，可以设置为 true。</li><li>reduce_vars： 是否提取出出现多次但是没有定义成变量去引用的静态值，例如把 x = ‘Hello’; y = ‘Hello’ 转换成 var a = ‘Hello’; x = a; y = b，默认为不转换。为了达到更好的压缩效果，可以设置为 true。</li></ul><ol start="2"><li>压缩ES6</li></ol><p>因为ES6的代码相比转换后的ES5代码有以下优点</p><ul><li>一样的逻辑ES6实现的代码量比ES5少</li><li>JS引擎对ES6中的语法做了性能优化。</li></ul><p>所以在运行环境允许的情况下，要尽可能的使用原生的ES6代码去运行。但是UglifyJS只认识ES5语法的代码，为了压缩ES6代码，需要专门针对ES6代码的UglifyES。</p><p>UglifyES 和 UglifyJS 来自同一个项目的不同分支，它们的配置项基本相同，并且在给 Webpack 接入 UglifyES 时，不能使用内置的 UglifyJsPlugin，而是需要单独安装和使用最新版本的 uglifyjs-webpack-plugin。</p><p>优化配置和上面的配置一样。</p><ol start="3"><li>压缩CSS</li></ol><p>目前比较成熟可靠的css压缩工具是cssnano，基于PostCSS，把 cssnano 接入到 Webpack 中也非常简单，因为 css-loader 已经将其内置了，要开启 cssnano 去压缩代码只需要开启 css-loader 的 minimize 选项。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use: [&apos;css-loader?minimize&apos;]</span><br></pre></td></tr></table></figure></div><h4 id="使用Tree-Shaking"><a href="#使用Tree-Shaking" class="headerlink" title="使用Tree Shaking"></a>使用Tree Shaking</h4><p>Tree Shaking 可以用来剔除JS上用不到的死代码，它依赖静态的ES6模块化语法，例如通过import和export导入导出。</p><p>栗子：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 一个工具函数文件 util.js</span><br><span class="line">export function a() &#123;&#125;</span><br><span class="line">export function b() &#123;&#125;</span><br><span class="line">export const d = &apos;d&apos;;</span><br><span class="line">// 使用到util.js的main.js</span><br><span class="line">import &#123;a&#125; from &apos;./utils.js&apos;</span><br><span class="line">// 经过Tree Shaking处理后的util.js</span><br><span class="line">export function a() &#123;&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;缩小文件搜索范围&quot;&gt;&lt;a href=&quot;#缩小文件搜索范围&quot; class=&quot;headerlink&quot; title=&quot;缩小文件搜索范围&quot;&gt;&lt;/a&gt;缩小文件搜索范围&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;优化loader配置。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由于Loader对文件的转化操作很耗时，需要让尽可能少的文件被Loader处理。为了尽可能少的让文件被 Loader 处理，可以通过 include 去命中只有哪些文件需要被处理。&lt;/p&gt;
    
    </summary>
    
      <category term="Webpack" scheme="http://blog.zijunfe.cn/categories/Webpack/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue源码分析</title>
    <link href="http://blog.zijunfe.cn/2020/06/24/vue-code/"/>
    <id>http://blog.zijunfe.cn/2020/06/24/vue-code/</id>
    <published>2020-06-24T06:49:41.000Z</published>
    <updated>2021-02-26T10:21:11.241Z</updated>
    
    <content type="html"><![CDATA[<p>作为一名日常使用Vue开发的前端开发，Vue的源码是有意义去了解的。今天的分享主要是Vue2.x源码的部分概念，包括以下三个内容：Vue的初始化、挂载与渲染流程、响应式系统的构建。</p><h3 id="1-Vue的初始化"><a href="#1-Vue的初始化" class="headerlink" title="1. Vue的初始化"></a>1. Vue的初始化</h3><p>在所有以Vue为开发框架的项目里，都必定会执行new Vue语句来形成Vue的根实例。那么在源码里都干了些什么事呢？</p><p>在源码里，Vue是一个非常简单的以Function实现的类。在<code>src/core/instance/index.js</code>里定义了它。并且在这里执行了初始化所需要的所有方法函数。</p><a id="more"></a><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp;</span><br><span class="line">    !(<span class="keyword">this</span> <span class="keyword">instanceof</span> Vue)</span><br><span class="line">  ) &#123;</span><br><span class="line">    warn(<span class="string">'Vue is a constructor and should be called with the `new` keyword'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>._init(options)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">initMixin(Vue)</span><br><span class="line">stateMixin(Vue)</span><br><span class="line">eventsMixin(Vue)</span><br><span class="line">lifecycleMixin(Vue)</span><br><span class="line">renderMixin(Vue)</span><br></pre></td></tr></table></figure></div><blockquote><p>Vue源码都在src目录下，并且它的目录结构是非常清晰的，概括如下。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">    ├── compiler        # 编译相关 </span><br><span class="line">    ├── core            # 核心代码 </span><br><span class="line">    ├── platforms       # 不同平台的支持</span><br><span class="line">    ├── server          # 服务端渲染</span><br><span class="line">    ├── sfc             # .vue 文件解析</span><br><span class="line">    ├── shared          # 共享代码</span><br></pre></td></tr></table></figure></div></p></blockquote><p>这里可以看出，代码保证了Vue只能通过new关键字进行初始化，一系列的mixin方法分别定义了原型上与数据，事件，生命周期，渲染相关的静态属性与方法，也就是以$开头的那些属性与方法。而_init方法来自initMixin中，其内部也是进行一系列初始化操作，包括选项的规范校验与合并，初始化生命周期，初始化事件中心，构建数据响应式系统等。最后最关键的根据我们填写的el参数，来进行模版的渲染与挂载。</p><blockquote><p>选项的合并是一个很关键的点，因为我们平时写的组件代码都是通过配置的方式传入并且执行Vue内部的方法Vue.extend去创建一个子类的，那么子类的选项必定会与父类的选项产生合并行为，大致分为常规选项合并，自带资源的合并(‘compoent’,’directive’,’filter’),生命周期函数的合并。其中，为什么在new Vue里data选项能写成Object形式，组件里要写成Functino的原因也在这里。(因为源代码里写死了，不是Function就会报错，哈哈，当然最终目的还是为了保证组件的复用，数据不互相影响)</p></blockquote><p>在所有配置初始化完成后，如果我们配置el参数存在，会执行Vue的内部方法$mount。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (vm.$options.el) &#123;</span><br><span class="line">  vm.$mount(vm.$options.el)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>而$mount函数定义的地方会与我们选择的平台和构建版本有关。比如在platforms文件夹里有web和weex俩个平台，web里有一些入口文件js，为了保证性能以及代码体积更小，我们使用的都是runtime only的构建版本(基本上就是除去编译器外的完整代码)，而编译的工作都交给了webpack的vue-loader了。但是为了更好分析Vue源码，我们要看runtime + compiler的版本，所以这时候我们要找的$mount方法在<code>src/platforms/web/entry-runtime-with-compiler</code>里，但是$mount的核心方法是mountComponent方法。</p><p>mountComponent方法定义在<code>src/core/instance/lifecycle.js</code>里，其主要作用就是进行模版的挂载、执行beforeMount,mounted生命周期函数、实例化一个组件只有一个的渲染Watcher。</p><h3 id="2-挂载与渲染流程"><a href="#2-挂载与渲染流程" class="headerlink" title="2. 挂载与渲染流程"></a>2. 挂载与渲染流程</h3><p>在Vue的内部方法$mount里有着挂载和渲染过程的一切，大概流程图如下。</p><p><img src="/2020/06/24/vue-code/img1.png" alt></p><p>根据流程图我们可以得知以下这么几个点：</p><ol><li>确定挂载的DOM，这个DOM不能是boyd，html标签</li><li>template模版的写法会被编译，首先会被编译成字符串模板会转换为抽象的语法树(AST)，最终被编译成render函数。(在runtime-only版本中这一步交给插件了)</li><li>无论是template模板还是手写render函数，最终都将进入mountComponent过程,这个阶段会实例化一个渲染watcher。</li><li>渲染wathcer的莫一个参数是updateComponent函数，其内部通过_render方法将render函数生成为虚拟DOM树(一个以VNode类生成的Virtual Dom)，_update方将虚拟DOM生成真实的DOM。</li></ol><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">updateComponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  vm._update(vm._render(), hydrating)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>其中编译的过程Vue源码里有一个名为compiler的文件夹来处理，不用去看懂，我们只需要知道编译的流程是怎样的即可。compiler的入口为一个名为createCompiler的函数。</p><ol><li>因为不同平台对Vue的编译过程是不一样的，所以传给createCompiler的配置是不一样的，比如Vue内置的只有web和weex俩个平台，像市场上比较流行Vue跨端开源项目，如mpVue，uni-app等都会在platform下添加一个对应的文件夹。</li><li>内部经过一系列的处理会生成三种东西。<ul><li>AST抽象树，一个对象，里面放了各种属性，方法的描述</li><li>render 一个以函数封装好的with语句</li><li>staticRenderFns 以数组形式存在的静态render</li></ul></li></ol><p>有了render函数后，接下来就是将它解析成虚拟DOM，在Vue中，就是用VNode这个构造函数去描述一个真实DOM节点，但并不会把真实DOM所有的东西都描述出来，因为真实DOM包括了自身的属性描述，大小位置，浏览器事件等，东西太多了。源码中VNode定义了的属性差不多有20个左右。定义的路径为<code>src/core/vdom/vnode</code>。在Vue2.x的版本中，VNode有三中类型：注释节点，普通节点，文本节点。</p><p>_render()生成虚拟DOM的过程中，代码里也会做很多事情，比如：数据的规范性检测、特殊属性key的规范性检测、子节点children的规范化、遇到用户自定义组件对其进行组件初始化。</p><p>有了虚拟DOM后，最后就是执行_update方法将其渲染成真实DOM，其中核心内容就是通过调用操作真实DOM的方法来生成真实DOM，比如调用createElm方法创建节点，插入子节点，经过递归创建后成为一个完整的DOM树并插入body中，并且在发生了数据变化影响真实DOM的阶段，会有diff算法来判断前后VNode的差异，以求最小化变化改变真实DOM。</p><blockquote><p>当响应式数据发生了频繁的修改，会引起整个DOM树的频繁的重绘和重排，这是及其消耗性能的，如何优化这一渲染过程，Vue源码中给出俩个思路。</p><ol><li>将多次修改推到一个队列中，在下一个tick去执行视图更新。</li><li>使用diff算法，将需要修改的数据进行比较，并只渲染必要的DOM。</li></ol></blockquote><blockquote><p>而diff算法本质上就是进行新旧节点的对比，如果新旧节点的根节点不是同一个节点，则直接替换节点。(只进行同层节点的比较，节点不一致，直接用新节点及其子节点替换旧节点)，如果是同一节点会进行如下的比较</p><ol><li>节点相同，且节点除了拥有文本节点外没有其他子节点，直接替换文本内容。</li><li>新节点没有子节点，旧节点有子节点，则删除旧节点所有子节点。</li><li>旧节点没有子节点，新节点有子节点，则用新的所有子节点去更新旧节点。</li><li>新旧都存在子节点，则对比子节点内容做操作(最复杂的一步)。</li></ol></blockquote><p>在_update执行的过程中，如果碰到了自定义组件时，会去调用子组件init方法，开始进行该组件的合并配置，初始化生命周期，初始化事件中心，初始化渲染的过程。实例挂载又会执行$mount过程。</p><p><img src="/2020/06/24/vue-code/img2.png" alt></p><h3 id="3-响应式系统的构建"><a href="#3-响应式系统的构建" class="headerlink" title="3. 响应式系统的构建"></a>3. 响应式系统的构建</h3><p>Vue作为数据驱动为特点的一个框架，响应式系统是其非常核心的一个概念。</p><p>首先我们要先了解，Vue源码中和响应式系统的构建相关的类为以下三种：</p><ol><li>Observer类，实例化一个Observer类会通过Object.defineProperty对数据的getter,setter方法进行改写，在getter阶段进行依赖的收集,在数据发生更新阶段，触发setter方法进行依赖的更新。</li><li>Watcher类，实例化Watcher类相当于创建一个依赖，简单的理解是数据在哪里被使用就需要产生了一个依赖。当数据发生改变时，会通知到每个依赖进行更新。</li><li>Dep类，既然Watcher理解为每个数据需要监听的依赖，那么对这些依赖的收集和通知则需要另一个类来管理，这个类便是Dep,Dep需要做的只有两件事，收集依赖和派发更新依赖。</li></ol><p>在这张图里我们可以看到这三个类的关系<br><img src="/2020/06/24/vue-code/img3.png" alt></p><p>在最前面的初始化的时候，执行_init函数的时候，响应式系统的构建也已经同步开始了。经过初始化后的数据，我们在控制台打印<code>this._data</code>或者引用类型的数据时，我们会发现在其原型里会有一个不可枚举的<code>__ob__</code>字段，标示这是经过Observer类实例化后。</p><h4 id="3-1-数据初始化"><a href="#3-1-数据初始化" class="headerlink" title="3.1 数据初始化"></a>3.1 数据初始化</h4><ol><li>data初始化：对data进行Observer类实例化，添加响应式对象标志<code>__ob__</code>, 执行walk函数(其核心内容为defineReactive函数)，该函数主要作用是对每个属性实例化一个Dep类，即为每个数据都创建一个依赖的管理，如果遇到深层次对象(属性为一个对象)，则会递归调用实例化Observer类，让其也转换为响应式对象。defineReactive函数就是利用Object.defineProperty重写getter，setter方法。数据被访问时，通过dep.depend收集被访问时的依赖Watcher。数据被修改时，通过dep.notify通知收集到的Watcher进行相应的更新。</li><li>computed初始化：computed初始化和data类似，但是computed是直接通过Object.defineProperty设置set与get的，还有几点不同之处。1、如果我们写的computed是function类型的时候，set函数是为空函数的。2、与computed涉及的data会收集当前computed的watcher，方便后面data更改时，来通知computed的更新。3、computedWatcher的标志为{lazy: true}，并且不会立刻执行依赖的更新操作，通过一个dirty设置为true进行标记，访问computed的时候如果dirty为true会重新计算值。4、computed不会收集渲染watcher，computed更新的时候视图会更新是为其涉及的data收集了渲染watcher。</li><li>props初始化：遍历定义的props配置。遍历的过程主要做两件事情：一是调用Observer类里的defineReactive方法把每个prop对应的值变成响应式，二是使用Proxy为props做了一层代理，用户通过vm.XXX可以代理访问到vm._props上的值。</li><li>watch初始化：当传入的选项里有watch选项时，会执行watch的初始化内容，其核心为createWatcher，无论传入watch是什么形式最终都会调用实例的$watch方法，$watch的核心是创建一个user watcher，其中{user: true}是当前用户定义watcher的标志。</li></ol><h4 id="3-2-依赖收集"><a href="#3-2-依赖收集" class="headerlink" title="3.2 依赖收集"></a>3.2 依赖收集</h4><p>既然数据的初始化完成以后，就是等待数据被访问，收集当前的依赖了，我们可以先看下Watcher的定义，和上面几种类型Watcher实例化时传了哪些参数。</p><p>Watcher基本定义</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">    ... </span><br><span class="line">      <span class="keyword">constructor</span> (</span><br><span class="line">        vm: Component, // vue实例</span><br><span class="line">        expOrFn: string | Function, // 用于收集依赖的方法</span><br><span class="line">        cb: Function, // 回调函数</span><br><span class="line">        options?: ?Object, // 自定义参数，比如自定义watch传入的depp，immediate</span><br><span class="line">        isRenderWatcher?: boolean // 是否为渲染Watcher</span><br><span class="line">      )</span><br><span class="line">     ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>渲染Watcher实例化<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Watcher(</span><br><span class="line">  vm,</span><br><span class="line">  updateComponent, <span class="comment">// 渲染模版更新DOM的方法</span></span><br><span class="line">  noop, <span class="comment">// 没有回调，空函数</span></span><br><span class="line">  &#123;</span><br><span class="line">  before () &#123;</span><br><span class="line">    <span class="comment">// 数据更新之前执行beforeUpdate生命周期</span></span><br><span class="line">    <span class="keyword">if</span> (vm._isMounted &amp;&amp; !vm._isDestroyed) &#123;</span><br><span class="line">      callHook(vm, <span class="string">'beforeUpdate'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="literal">true</span> <span class="comment">/* isRenderWatcher */</span>)</span><br></pre></td></tr></table></figure></div></p><p>计算属性Watcher实例化<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">watchers[key] = <span class="keyword">new</span> Watcher(</span><br><span class="line">  vm,</span><br><span class="line">  getter || noop, <span class="comment">// getter是我们写的computed函数或者是自定义的get函数</span></span><br><span class="line">  noop, <span class="comment">// 空函数</span></span><br><span class="line">  computedWatcherOptions <span class="comment">// &#123; lazy: true &#125; 标示自己是计算属性Watcher</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></div></p><p>用户自定义Watcher实例化<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> watcher = <span class="keyword">new</span> Watcher(</span><br><span class="line">    vm, </span><br><span class="line">    expOrFn, <span class="comment">// watch key值</span></span><br><span class="line">    cb, <span class="comment">// 用户写的函数</span></span><br><span class="line">    options <span class="comment">// depp，immediate之类的</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></div></p><p>在Watcher类定义的地方，构造函数内有这么一段逻辑<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> expOrFn === <span class="string">'function'</span>) &#123;</span><br><span class="line">  <span class="keyword">this</span>.getter = expOrFn</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.getter = parsePath(expOrFn) <span class="comment">// parsePath是一个工具函数，返回一个访问vm.expOrFn的执行函数</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.getter) &#123;</span><br><span class="line">    <span class="keyword">this</span>.getter = noop</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.value = <span class="keyword">this</span>.lazy</span><br><span class="line">  ? <span class="literal">undefined</span></span><br><span class="line">  : <span class="keyword">this</span>.get();</span><br><span class="line"></span><br><span class="line"><span class="comment">// get 函数内部</span></span><br><span class="line">value = <span class="keyword">this</span>.getter.call(vm, vm)</span><br></pre></td></tr></table></figure></div></p><p>意味着expOrFn参数是否为函数，都会在Watcher实例化的时候执行。所以可以解释各个依赖都是在哪些地方第一次被收集的。</p><ol><li>渲染Watcher：updateComponent作为expOrFn参数传入的，也就是进行模版渲染的过程中有地方访问到了写在模版里的数据，更详细的讲是_render方法中，生成的render渲染函数<code>fuction(){width(){}}</code>的width语句中访问到了相应数据，该数据就会收集到渲染Watcher。</li><li>计算属性Watcher：执行我们写入的computed函数，访问到了相关数据，相关数据收集计算属性Watcher。</li><li>用户自定义Watcher：expOrFn传入的是我们写的watch key，在执行this.getter的时候会访问到vm.[key],所以是在被定义的时候就被对应的数据收集了。</li></ol><h4 id="3-3-更新视图"><a href="#3-3-更新视图" class="headerlink" title="3.3 更新视图"></a>3.3 更新视图</h4><p>无论是在哪收集到的watcher，数据更新的时候最终的目的还是要更新视图。</p><p>比如我们data里的数据被更新了，会触发set方法，其主要干了以下几件事：</p><ol><li>判断数据更改前后是否一致，如果数据相等则不进行任何派发更新操作。</li><li>新值为对象时，会对该值的属性进行依赖收集过程</li><li>通知该数据收集的watcher依赖，遍历每个watcher进行数据更新(调用dep.notify方法进行更新的派发，该方法内通过调用watcher类的update方法进行更新数据操作)</li><li>更新时将每个watcher推到队列中，等待下一个tick(事件循环)到来时取出每个watcher进行run操作。</li></ol><p>update函数执行的过程很复杂，其内部会执行Vue自定义的nextTick函数，nextTick会缓冲多个数据处理过程，等到下一个事件循环tick中再去执行DOM操作，原理是利用事件循环的微任务队列实现异步更新。当tick到来时，还会对各个依赖进行排序，因为依赖有优先级关系(自定义watcher优先于渲染watcher)，组件也有父子关系(父的渲染watcher优先于子的渲染watcher更新)。</p><p>对于渲染Watcher来说，run函数就是更新DOM的地方，也是执行我们执行实例化Watcher时传入的expOrFn参数。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">run () &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.active) &#123;</span><br><span class="line">    <span class="keyword">const</span> value = <span class="keyword">this</span>.get() <span class="comment">// 重新求值</span></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      value !== <span class="keyword">this</span>.value ||</span><br><span class="line">      isObject(value) ||</span><br><span class="line">      <span class="keyword">this</span>.deep</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="comment">// set new value</span></span><br><span class="line">      <span class="keyword">const</span> oldValue = <span class="keyword">this</span>.value</span><br><span class="line">      <span class="keyword">this</span>.value = value</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.user) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>.cb.call(<span class="keyword">this</span>.vm, value, oldValue)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          handleError(e, <span class="keyword">this</span>.vm, <span class="string">`callback for watcher "<span class="subst">$&#123;<span class="keyword">this</span>.expression&#125;</span>"`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.cb.call(<span class="keyword">this</span>.vm, value, oldValue)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><p>根据依赖收集的地方我们得知，thi.get内会执行this.getter,而此时的getter就是updateComponent方法。</p><h4 id="3-4-思考"><a href="#3-4-思考" class="headerlink" title="3.4 思考"></a>3.4 思考</h4><blockquote><p>为什么Vue官方文档中提到以下几种方式的赋值是构不成响应式数据的呢？又为什么通过数组的splice、push、shift等方法，或者通过this.$set的方法进行赋值就能构成响应式数据了呢？</p></blockquote><p>在Vue2.x的文档中有提到如果给直接修改数组的length属性，或者利用索引修改数组长度时，对象属性的添加或者删除，Vue不能检测到变动。这些都是与Object.defineProperty的特新有关。</p><ol><li><p>首先Object.defineProperty的get，set方法只能检测到对象属性的变化，对数组的变化无能为力。之所以能通过数组方法进行更改，是因为Vue在保留原数组功能的前提下，重新定义了数组部分方法(主要是增删改查的方法，push,pop,shift,unshift,splice,sort,reverse)。在<code>src/core/observer/array.js</code>里放这数组改写的相关代码。</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arrayProto = <span class="built_in">Array</span>.prototype;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> arrayMethods = <span class="built_in">Object</span>.create(arrayProto);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> methodsToPatch = [</span><br><span class="line">  <span class="string">'push'</span>,</span><br><span class="line">  <span class="string">'pop'</span>,</span><br><span class="line">  <span class="string">'shift'</span>,</span><br><span class="line">  <span class="string">'unshift'</span>,</span><br><span class="line">  <span class="string">'splice'</span>,</span><br><span class="line">  <span class="string">'sort'</span>,</span><br><span class="line">  <span class="string">'reverse'</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Intercept mutating methods and emit events</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">methodsToPatch.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">method</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// cache original method</span></span><br><span class="line">  <span class="keyword">const</span> original = arrayProto[method]</span><br><span class="line">  <span class="comment">// def函数用于快捷设置属性为不可枚举</span></span><br><span class="line">  def(arrayMethods, method, <span class="function"><span class="keyword">function</span> <span class="title">mutator</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> result = original.apply(<span class="keyword">this</span>, args)</span><br><span class="line">    <span class="keyword">const</span> ob = <span class="keyword">this</span>.__ob__</span><br><span class="line">    <span class="keyword">let</span> inserted</span><br><span class="line">    <span class="keyword">switch</span> (method) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'push'</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'unshift'</span>:</span><br><span class="line">        inserted = args</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'splice'</span>:</span><br><span class="line">        inserted = args.slice(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (inserted) ob.observeArray(inserted)</span><br><span class="line">    <span class="comment">// notify change</span></span><br><span class="line">    ob.dep.notify()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p> 首先先会调用原始的数组方法进行运算，保证与原始数组类型的方法一致。之后取出<strong>ob</strong>(Observer实例)，调用ob.dep.notiify()进行依赖的派发更新。通过inserted来标志数组是否增加了元素，如果增加的元素时候数组对象类型，则触发observeArray方法对每个元素进行依赖收集。</p></li><li><p>Vue在对对象进行依赖收集的时候，会为对象的每个属性都进行收集依赖，而直接通过object.key添加的新属性并没有依赖收集的过程，因此当之后数据key发生改变时也不会进行依赖的更新。$set的方法定义在<code>src/core/observer/index.js</code>里。</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">set</span> (<span class="params">target, key, val</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//target必须为非空对象</span></span><br><span class="line">    <span class="keyword">if</span> (isUndef(target) || isPrimitive(target)</span><br><span class="line">    ) &#123;</span><br><span class="line">      warn((<span class="string">"Cannot set reactive property on undefined, null, or primitive value: "</span> + ((target))));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 数组场景，调用重写的splice方法，对新添加属性收集依赖。</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(target) &amp;&amp; isValidArrayIndex(key)) &#123;</span><br><span class="line">      target.length = <span class="built_in">Math</span>.max(target.length, key);</span><br><span class="line">      target.splice(key, <span class="number">1</span>, val);</span><br><span class="line">      <span class="keyword">return</span> val</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 新增对象的属性存在时，直接返回新属性，触发依赖收集</span></span><br><span class="line">    <span class="keyword">if</span> (key <span class="keyword">in</span> target &amp;&amp; !(key <span class="keyword">in</span> <span class="built_in">Object</span>.prototype)) &#123;</span><br><span class="line">      target[key] = val;</span><br><span class="line">      <span class="keyword">return</span> val</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 拿到目标源的Observer 实例</span></span><br><span class="line">    <span class="keyword">var</span> ob = (target).__ob__;</span><br><span class="line">    <span class="comment">// _isVue为Vue实例的标志</span></span><br><span class="line">    <span class="keyword">if</span> (target._isVue || (ob &amp;&amp; ob.vmCount)) &#123;</span><br><span class="line">      warn(</span><br><span class="line">        <span class="string">'Avoid adding reactive properties to a Vue instance or its root $data '</span> +</span><br><span class="line">        <span class="string">'at runtime - declare it upfront in the data option.'</span></span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">return</span> val</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 目标源对象本身不是一个响应式对象，则不需要处理</span></span><br><span class="line">    <span class="keyword">if</span> (!ob) &#123;</span><br><span class="line">      target[key] = val;</span><br><span class="line">      <span class="keyword">return</span> val</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 手动调用defineReactive，为新属性设置getter,setter</span></span><br><span class="line">    defineReactive(ob.value, key, val);</span><br><span class="line">    ob.dep.notify();</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div><p> 主要做了以下几点事。</p><ul><li>目标对象必须为非空的对象，可以是数组，否者抛出异常</li><li>如果目标对象是数组时，调用数组的splice方法，进而调用ob.observeArray(inserted)对数组新增的元素收集依赖</li><li>新增的属性值在原对象已经存在，则手动的访问该属性值，此操作会触发依赖收集</li><li>新的属性值在原对象不存在时，手动定义新属性的getter，setter方法，并通过notify触发依赖更新。</li></ul></li></ol><p>如果你觉得以上知识点还不过瘾～附赠本人学习时画的思维导图，希望对你有帮助^_^</p><p><img src="/2020/06/24/vue-code/img4.png" alt></p><blockquote><p><a href="vue源码解析思维导图.xmind">vue源码解析思维导图.xmind</a></p></blockquote><blockquote><p>参考资料: <a href="https://book.penblog.cn/" target="_blank" rel="noopener">深入剖析Vue源码</a></p></blockquote><blockquote><p>参考资料: <a href="https://ustbhuangyi.github.io/vue-analysis/v2/prepare/" target="_blank" rel="noopener">Vue.js技术揭秘</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为一名日常使用Vue开发的前端开发，Vue的源码是有意义去了解的。今天的分享主要是Vue2.x源码的部分概念，包括以下三个内容：Vue的初始化、挂载与渲染流程、响应式系统的构建。&lt;/p&gt;
&lt;h3 id=&quot;1-Vue的初始化&quot;&gt;&lt;a href=&quot;#1-Vue的初始化&quot; class=&quot;headerlink&quot; title=&quot;1. Vue的初始化&quot;&gt;&lt;/a&gt;1. Vue的初始化&lt;/h3&gt;&lt;p&gt;在所有以Vue为开发框架的项目里，都必定会执行new Vue语句来形成Vue的根实例。那么在源码里都干了些什么事呢？&lt;/p&gt;
&lt;p&gt;在源码里，Vue是一个非常简单的以Function实现的类。在&lt;code&gt;src/core/instance/index.js&lt;/code&gt;里定义了它。并且在这里执行了初始化所需要的所有方法函数。&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://blog.zijunfe.cn/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>Http缓存总结</title>
    <link href="http://blog.zijunfe.cn/2020/03/10/http-cache/"/>
    <id>http://blog.zijunfe.cn/2020/03/10/http-cache/</id>
    <published>2020-03-10T06:49:41.000Z</published>
    <updated>2021-02-26T10:21:11.241Z</updated>
    
    <content type="html"><![CDATA[<p>了解Http的缓存机制。</p><a id="more"></a><p><img src="/2020/03/10/http-cache/img1.png" alt></p><blockquote><p><a href="http缓存.xmind">http缓存.xmind</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;了解Http的缓存机制。&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://blog.zijunfe.cn/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>JS中的正则表达式</title>
    <link href="http://blog.zijunfe.cn/2020/01/01/RegExp/"/>
    <id>http://blog.zijunfe.cn/2020/01/01/RegExp/</id>
    <published>2019-12-31T16:00:00.000Z</published>
    <updated>2020-01-02T03:32:49.860Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>学一门前端工具，几年就过时了。学正则表达式，受用一辈子。</p></blockquote><p>正则表达式，英文简称:RegExp，全称:Regular Expression。关于正则表达式的由来和介绍就不多说了，大家只要记住正则是匹配模式，要么匹配字符，要么匹配位置。</p><p>我们系统的学习知识和打游戏是一样的，初期只能挑战一些小喽啰，涨涨经验值，等级和装备齐全后就可以逐一去挑战boss们。所以我们先来看下正则世界里都有哪些小怪物。</p><p>友情提示：学习正则表达式对新手来说并不是很友好，一些基础的知识需要通过死记硬背来学习，你得先记住它，才能灵活运用它。</p><a id="more"></a><h4 id="小怪：学习正则的语法"><a href="#小怪：学习正则的语法" class="headerlink" title="小怪：学习正则的语法"></a>小怪：学习正则的语法</h4><ol><li><p><strong>弄一个正则出来</strong>：使用字面量, 构造函数和工厂符号都可以写出一个正则表达式。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/pattern/flags</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">RegExp</span>(pattern [, flags])</span><br><span class="line"><span class="built_in">RegExp</span>(pattern [, flags])</span><br></pre></td></tr></table></figure></div><p>其中<code>pattern</code>为正则表达式的文本，<code>flags</code>为修饰符，可以为一个，也可以是多个为一组。<br>一般来说需要动态构造正则的时候才会用到构造函数的方式。因为字面量写法的正则性能更好一些。<br>当一个正则实例创建出来以后，它都会有以下的实例属性：</p><ul><li><code>lastIndex</code>属性。它的作用是全局匹配时标记下一次匹配开始的位置，全局匹配的抓手就是它。</li><li><code>source</code>属性。它的作用是存储正则模式的主体。比如<code>/abc/gi</code>中的abc。</li><li>对应的修饰符属性。目前有<code>global</code>、<code>ignoreCase</code>、<code>multiline</code>、<code>sticky</code>、<code>dotAll</code>、<code>unicode</code>属性，返回布尔值表明是否开启对应修饰符。</li><li><code>flags</code>属性。返回所有的修饰符。比如<code>/abc/gi</code>中的gi。</li></ul><p>ps:如果以构造函数方式构造正则的时候，<code>pattern</code>中定义了修饰符，但<code>flags</code>中又有值，则以<code>flags</code>定义的修饰符为准，这是ES2015的新特性。</p></li><li><p><strong>普通字符</strong>：何为普通字符？就是包括各种人类语言，24个英文字母(包括大小写)，没有特殊含义的符号，甚至emoji表情也算普通字符。普通字符在正则中的含义就是检索它本身，你看:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&apos;hello 😀 regex&apos;.match(/😀/);</span><br><span class="line">// [&quot;😀&quot;, index: 6, input: &quot;hello 😀 regex&quot;, groups: undefined]</span><br></pre></td></tr></table></figure></div></li><li><p><strong>元字符</strong>：在正则世界里大部分符号都是作为普通字符的存在，但总是有钉子户的存在，还有几个符号是有自己的特殊含义的，这种符号被称为元字符。</p><hr><p>常用</p><p>字符相关</p><ul><li><p><code>\</code>:将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，“n”匹配字符“n”。“\n”匹配一个换行符。串行“\”匹配“\”而“(”则匹配“(”。简单来说，转义符能将一些普通字符提升成元字符，转义符能将任何符号砭为庶民(普通字符)，包括它自己(我狠起来自己都打)，当然普通字符转义后还是转义字符。</p></li><li><p><code>|</code>:<code>|</code>就代表<code>或者</code>。字符组其实也是一个多选结构，但是它们俩有本质区别。字符组最终只能匹配一个字符，而分支匹配的是左边所有的字符或者右边所有的字符。经常在<code>()</code>中使用。</p></li><li><code>\d</code>:匹配一个数字字符，等价于[0-9]，这里的数字不是JS中的Number类型，指字符串中的数字。</li><li><code>\D</code>:匹配一个非数字字符，等价于[^0-9]。</li><li><code>\s</code>:匹配一个空白字符，空白字符不单单包括空格，它是一个总集<code>空格\f\n\r\t\v</code>，包括空格，换页符，换行符，回车符，水平制表符，垂直制表符。但是这个总集里大部分符号都是不可打印的符号，只有<code>\n</code>和我们经常接触了，如果你不需要区分空格与换行，可以大胆使用<code>\s</code>，如果你想只匹配一个空格，在正则的写法就是空一格。</li><li><code>\S</code>:匹配任何非空白字符。等价于<code>[^ \f\n\r\t\v]</code>。</li><li><code>\w</code>:匹配一个26个英文字母或者一个数字或者一个下划线，等价于<code>[A-Za-z0-9_]</code>.注意这里会多一个下划线，因为在Javascript中的变量规则中，使用这三种命名是比较合理的。</li><li><code>\W</code>:匹配任何非单词字符。等价于<code>[^A-Za-z0-9_]</code>。</li><li><code>.</code>:所谓字越少，事情越大。这个小点号在正则世界里的能量非常大。它能匹配任意字符(但是行结束符除外：<code>\n</code> <code>\r</code> <code>\u2028</code> 或 <code>\u2029</code>),但是在字符组中它就是个点，无论你怎么转义都没有用。</li></ul><p>位置相关</p><ul><li><code>^</code>:通常匹配输入字符串的开始位置,说通常，因为它在字符组中<code>[^abc]</code>另有含义。</li><li><code>$</code>:与上面的相反，匹配输入字符串的结束位置。<br>需要注意的几点地方：<ul><li>作为匹配文本开始元字符的时候必须是正则主体的第一个符号或者最后一个符号，否则正则无效。</li><li>它匹配的是一个位置，而不是具体的文本</li><li>多行匹配模式时(修饰符中带<code>m</code>)，二者分别是行开头和行结尾的概念</li><li><code>^</code>符号在正则的字符组中有其他含义，<code>$</code>在字符串方法<code>replace</code>中有其他含义。</li></ul></li><li><p><code>\b</code>:匹配一个单词边界(boundary)，匹配的是一个位置，而不是一个字符。单词和空格之间的位置，就是所谓单词边界，并且对汉字及其他语言是无效的。具体来讲就是匹配<code>\w</code>和<code>\W</code>之间的位置，也包括<code>\w</code>和<code>^</code>之间的位置，也包括<code>\w</code>和<code>$</code>之间的位置。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'hello regex'</span>.match(<span class="regexp">/\bregex$/</span>); <span class="comment">// ['regex']</span></span><br><span class="line"><span class="string">'hello regex'</span>.match(<span class="regexp">/\b/g</span>); <span class="comment">// ["", "", "", ""] 有4个单词边界，分别为hello前后位置，regex前后位置</span></span><br><span class="line"><span class="string">'窝窝头 一块钱 4个'</span>.match(<span class="regexp">/\b窝窝头\b/</span>); <span class="comment">// null</span></span><br></pre></td></tr></table></figure></div></li><li><p><code>\B</code>:匹配一个非单词边界，匹配的一个不是单词边界的位置。具体说来就是匹配<code>\w</code>与<code>\w</code>、<code>\W</code>与<code>\W</code>、<code>^</code>与<code>\W</code>，<code>\W</code>与<code>$</code>之间的位置。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'1234'</span>.match(<span class="regexp">/1\B2/</span>); <span class="comment">// ['12']</span></span><br><span class="line"><span class="string">'1234'</span>.match(<span class="regexp">/\B/g</span>); <span class="comment">// ["", "", ""] 有3个非单词边界，分别为12，23，34中间的位置</span></span><br><span class="line"><span class="string">'#'</span>.match(<span class="regexp">/\B/g</span>);  <span class="comment">// ["", ""]</span></span><br></pre></td></tr></table></figure></div></li></ul><hr><p>不常用</p><ul><li><code>\cx</code>:匹配由x指明的控制字符。例如，\cM匹配一个Control-M或回车符。x的值必须为A-Z或a-z之一。否则，将c视为一个原义的“c”字符。</li><li><code>\f</code>:匹配一个换页符。等价于\x0c和\cL。</li><li><code>\n</code>:匹配一个换行符。等价于\x0a和\cJ。</li><li><code>\r</code>:匹配一个回车符。等价于\x0d和\cM。</li><li><code>\t</code>:匹配一个制表符。等价于\x09和\cI。</li><li><code>\v</code>:匹配一个垂直制表符。等价于\x0b和\cK。</li></ul></li><li><p><strong>量词</strong>：在正则的世界里，一个字符或者元字符也只能匹配对应的一个字符，但是如果需要匹配重复的字符，正则世界里量词就能帮助我们，量词加上元字符的使用，就像是加特林机枪加上了蓝光特效，强大并且炫酷。</p><ul><li><code>?</code>：重复零次或者一次。很好记忆，就像我们理解的问号一样，不确定有没有。</li><li><code>+</code>：重复一次或者多次，也就是至少一次。懂的自然懂，为东方长者+1s。</li><li><code>*</code>：重复零次或者多次，也就是任意次数。可以把这个想象成天上的星星，有时候你看不到星星 ，有时候你可以看到数不完的星星。</li><li><code>{n}</code>：重复n次，在正则中<code>{}</code>符号中间要是有个数字或者是数字加<code>,</code>是有特殊含义的，但是如果中间是其他东西是不需要转义的。</li><li><code>{n,}</code>：重复n次或者更多次，<code>{1,}</code>相当于<code>+</code>，<code>{0,}</code>相当于<code>*</code>。</li><li><code>{n,m}</code>：重复n次到m次之间的次数，包含n次和m次，<code>{0,1}</code>相当于<code>?</code>。</li></ul><hr><p>量词虽好，但还是需要注意以下几点：</p><ul><li><code>{n,m}</code>中间不能有空格，空格在正则中是有含义的，<code>{,m}</code>是没有意义的，甚至不用对他进行转义，它就是普通的字符串。</li><li>量词后面跟着量词会报错(有特殊情况，下面说的非贪婪模式)。</li><li><code>/.*/</code>功能强大，常用于匹配对我们没有价值的字符，能匹配<strong>若干除换行符之外的字符</strong>，但是性能不太好。</li><li>正则中不是所有地方的<code>?</code>都是做量词用的，<code>?</code>还有其他含义，在下面的内容我会都列出来。</li></ul></li><li><p><strong>贪婪模式与非贪婪模式</strong>：上面说到了量词后面不能跟量词，但是会有一种特殊情况，那就是通过<code>?</code>切换贪婪模式与非贪婪模式</p><p>正则世界的默认模式是贪婪模式，什么意思呢？比如<code>&#39;Gooooogle&#39;.match(/o+/g)</code>这个正则里，无论你有多少个<code>o</code>我都给你匹配出来。</p><p>当<code>?</code>紧跟在任何一个其他限制符（*,+,?，{n}，{n,}，{n,m}）后面时，匹配模式切换成非贪婪模式。非贪婪模式会尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'gridsum good'</span>.match(<span class="regexp">/g\w&#123;1,3&#125;/g</span>) <span class="comment">// ["grid", "good"] 既然你能给我3个，我就要3个</span></span><br><span class="line"><span class="string">'gridsum good'</span>.match(<span class="regexp">/g\w&#123;1,3&#125;?/g</span>) <span class="comment">// ["gr", "go"]  我只要一个就好啦，不贪</span></span><br></pre></td></tr></table></figure></div></li></ol><p>  正确的使用非贪婪模式可以无形的优化你的正则表达式，因为正则引擎在解析你写的正则的时候能更明确你所要的东西。</p><blockquote><p>小练习：<code>&#39;123 1234 12345 123456&#39;.match(/\d{2,5}/g)</code>的匹配结果，<code>&#39;123 1234 12345 123456&#39;.match(/\d{2,5}?/g)</code>的匹配结果</p></blockquote><ol start="6"><li><p><strong>字符组</strong>：在正则的世界里，一个字符只能匹配到它自己，但是如果你只知道这个字符是’abc’中的一种，这时候字符组就能帮助到我们。注意：字符组虽然里面带组，但是它是匹配一个字符的。</p><ul><li><p><code>[]</code>:方括号在正则中表示一个区间,我们称它为字符组,字符组中的字符集合只是所有的可选项，最终它只能匹配一个字符,除了<code>-</code>和<code>^</code>在字符组中有特殊含义，其他字符一律作为普通字符处理。但是呢 ，带<code>\</code>的元字符还是可以正常使用的。</p><p><code>^</code>如果在字符组的最前面中表示取反，不再是文本开始的位置了。如果在字符组的其他位置就是个普通字符。</p><p><code>-</code>本来是一个普通字符，在字符组中摇身一变成为连字符。但是注意，只能连接<strong>大小写英文字母和数字</strong>，比如<code>数字-数字</code>，<code>数字-字母</code>，<code>字母-字母</code>。如果<code>-</code>前后有一个地方是数字或者字母，但是另一边是其他符号，正则会报错哦，其中<code>小写字母-大写字母</code>这种方式也会报错，为什么会报错呢，我们想一下<a href="https://baike.baidu.com/item/ASCII/309296?fromtitle=ascii%E7%A0%81&amp;fromid=99077&amp;fr=aladdin" target="_blank" rel="noopener">ASCII码</a>，大写字母是在小写字母前面的。但是<code>数字-小写字母</code>或者<code>数字-大写字母</code>或者<code>大写字母-小写字母</code>这些方式不能乱用哦，因为这里面包含的不只是数字与字母了，还会有其他符号。所以可以看出字符组里的连接符是根据ASCII码来的。</p>   <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'123abcABC~!@#$%^&amp;*()_+=-&#123;&#125;[]\|:;,.?/&lt;&gt;`'</span>;</span><br><span class="line">str.match(<span class="regexp">/[A-z]/g</span>) <span class="comment">// ["a", "b", "c", "A", "B", "C", "^", "_", "[", "]", "`"]</span></span><br><span class="line">str.match(<span class="regexp">/[0-z]/g</span>) <span class="comment">// ["1", "2", "3", "a", "b", "c", "A", "B", "C", "@", "^", "_", "=", "[", "]", ":", ";", "?", "&lt;", "&gt;", "`"]</span></span><br><span class="line">str.match(<span class="regexp">/[0-Z]/g</span>) <span class="comment">// ["1", "2", "3", "A", "B", "C", "@", "=", ":", ";", "?", "&lt;", "&gt;"]</span></span><br></pre></td></tr></table></figure></div><p>如果你只需要<code>-</code>和<code>^</code>作为普通字符，前面加<code>\</code>转义即可。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'grey or gray'</span>.match(<span class="regexp">/gr[ae]y/g</span>); <span class="comment">// ['grey','gray']</span></span><br><span class="line"><span class="string">'$'</span>.match(<span class="regexp">/[$&amp;@]/</span>); <span class="comment">// ['$']</span></span><br><span class="line"><span class="string">'xyz-3'</span>.match(<span class="regexp">/[0-c]/</span>); <span class="comment">// ['3']</span></span><br></pre></td></tr></table></figure></div></li></ul><blockquote><p>小练习：匹配24小时时间制：<code>/^([01][0-9]|[2][0-3]):[0-5][0-9]$/</code></p></blockquote></li><li><p><strong>捕获组与非捕获组</strong>：前面我们知道了普通字符加量词的组合，能够匹配出单个字符重复很多次的字符串，那么我要匹配一个重复的字符串呢？此时捕获组来了，它跨着大马步向我们走来。</p><p>在正则中<code>()</code>俩个圆括号代表着将它其中的字符集合打包成一个整体，然后量词就可以操作这个整体了。并且<code>()</code>的匹配结果默认是可以捕获的。如果你不想将括号内的字符捕获出来，只要在圆括号内最前面加上<code>?:</code>标识，像这样<code>(?:)</code>。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'窝窝头 一块钱 一块钱 一块钱 4个'</span>.match(<span class="regexp">/窝窝头 (一块钱 )+4个/</span>); <span class="comment">// ['窝窝头 一块钱 一块钱 一块钱 4个', '一块钱'] 默认情况下，括号内的内容也会匹配出来</span></span><br><span class="line"><span class="string">'窝窝头 一块钱 一块钱 一块钱 4个'</span>.match(<span class="regexp">/窝窝头 (?:一块钱 )+4个/</span>); <span class="comment">// ['窝窝头 一块钱 一块钱 一块钱 4个'] ‘一块钱’没有了</span></span><br></pre></td></tr></table></figure></div><p>捕获分为正则内捕获和正则外捕获</p><ul><li>正则内捕获，正则内捕获使用<code>\数字</code>的形式，分别对应前面的圆括号捕获的内容。这种捕获的引用也叫反向引用。比如我们把html所有非自闭合标签都匹配出来，非自闭合标签的特性就是前后有对应的标签名，像<code>&lt;div&gt;&lt;/div&gt;</code>。如果在括号内使用了<code>?:</code>标示，<code>\数字</code>的反向引用方式就会失效。</li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'&lt;App&gt;hello regex&lt;/App&gt;'</span>.match(<span class="regexp">/&lt;([a-zA-Z]+)&gt;.*&lt;\/\1&gt;/</span>); <span class="comment">// ['&lt;App&gt;hello regex&lt;/App&gt;'] 这里的\1就是前面()捕获到的内容</span></span><br><span class="line"><span class="string">'&lt;App&gt;hello regex&lt;/App&gt;'</span>.match(<span class="regexp">/&lt;(?:[a-zA-Z]+)&gt;.*&lt;\/\1&gt;/</span>); <span class="comment">// null</span></span><br></pre></td></tr></table></figure></div><p>同时，括号内是可以继续加括号的，那么<code>\数字</code>是如何一一对应前面的括号的，记住一点深度优先的原则，同级捕获按前后顺序，同一个捕获内最外面一层优先(就像剥洋葱),比如下面的栗子：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'&lt;App&gt;hello regex&lt;/App&gt;&lt;p&gt;A&lt;/p&gt;&lt;p&gt;hello regex&lt;/p&gt;'</span>.match(<span class="regexp">/&lt;((A|a)pp)&gt;(hello regex)+&lt;\/\1&gt;&lt;p&gt;\2&lt;\/p&gt;&lt;p&gt;\3&lt;\/p&gt;/</span>);</span><br><span class="line"><span class="comment">// ["&lt;App&gt;hello regex&lt;/App&gt;&lt;p&gt;A&lt;/p&gt;&lt;p&gt;hello regex&lt;/p&gt;", "App", "A", "hello regex"]</span></span><br><span class="line"><span class="comment">// \1对应的是((A|a)pp)这个捕获，</span></span><br><span class="line"><span class="comment">// \2对应的是(A|a)这个捕获，</span></span><br><span class="line"><span class="comment">// \3对应的是(hello regex)这个捕获</span></span><br></pre></td></tr></table></figure></div><p>(ps:小思考——既然反向应用是按照数字顺序来的，那么<code>\10</code>表示的是第十个括号，还是<code>\1</code>和<code>0</code>的意思呢？)</p><p><img src="http://ww3.sinaimg.cn/bmiddle/9150e4e5gw1f9blhpsvs0j204e04ggll.jpg" alt></p><p>这个确实有点绕，如果你还没整明白，你可以尝试使用<strong>ES2018的新特性——捕获命名</strong>。在捕获组内部最前面加上<code>?&lt;key&gt;</code>，它就被命名了。使用<code>\k&lt;key&gt;</code>语法就可以引用已经命名的捕获组。捕获命名只在正则内捕获生效哦，对上面的代码该改造如下。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'&lt;App&gt;hello regex&lt;/App&gt;&lt;p&gt;A&lt;/p&gt;&lt;p&gt;hello regex&lt;/p&gt;'</span>.match(<span class="regexp">/&lt;(?&lt;bar&gt;(?&lt;foo&gt;A|a)pp)&gt;(?&lt;tob&gt;hello regex)+&lt;\/\k&lt;bar&gt;&gt;&lt;p&gt;\k&lt;foo&gt;&lt;\/p&gt;&lt;p&gt;\k&lt;tob&gt;&lt;\/p&gt;/</span>);</span><br><span class="line"><span class="comment">// ["&lt;App&gt;hello regex&lt;/App&gt;&lt;p&gt;A&lt;/p&gt;&lt;p&gt;hello regex&lt;/p&gt;", "App", "A", "hello regex"]</span></span><br><span class="line"><span class="comment">// \k&lt;bar&gt;对应的是((A|a)pp)这个捕获，</span></span><br><span class="line"><span class="comment">// \k&lt;foo&gt;对应的是(A|a)这个捕获，</span></span><br><span class="line"><span class="comment">// \k&lt;tob&gt;对应的是(hello regex)这个捕获</span></span><br></pre></td></tr></table></figure></div><ul><li>正则外捕获，我们先看下面这个栗子。</li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'@abc'</span>.match(<span class="regexp">/@(abc)/</span>);</span><br><span class="line"><span class="comment">// ["@abc", "abc", index: 0, input: "@abc", groups: undefined]</span></span><br><span class="line"><span class="built_in">RegExp</span>.$<span class="number">1</span>;</span><br><span class="line"><span class="comment">// "abc"</span></span><br></pre></td></tr></table></figure></div><p>没错，<code>RegExp</code>就是构造正则的构造函数。如果有捕获组，它的实例属性<code>$数字</code>会显示对应的引用。如果有多个正则，<code>RegExp</code>构造函数的引用只显示最后一个正则的捕获。</p><p>其实正则外的捕获更加常用的是字符串的方法<code>replace</code>，<code>replace</code>是我们日常开发中比较常用的。在下面的环节中会详细介绍它。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'hello **regex**'</span>.replace(<span class="regexp">/\*&#123;2&#125;(.*)\*&#123;2&#125;/</span>, <span class="string">'&lt;strong&gt;$1&lt;/strong&gt;'</span>);</span><br><span class="line"><span class="comment">// "hello &lt;strong&gt;regex&lt;/strong&gt;"</span></span><br></pre></td></tr></table></figure></div></li><li><p><strong>修饰符</strong>：和<code>vue</code>指令后面跟着的修饰符一样，正则表达式有修饰符，它像小尾巴一样跟在正则主体后面。</p><ul><li><p><code>g</code>修饰符(常用):<code>g</code>是<code>global</code>的缩写。默认情况下，正则从左向右匹配，只要匹配到了结果就会收工。<code>g</code>修饰符会开启全局匹配模式，找到所有匹配的结果。</p></li><li><p><code>i</code>修饰符(常用):<code>i</code>是<code>ignoreCase</code>的缩写。在正则世界里，大小写字母是有区别的,<code>/z/</code>小写的是无法匹配到大写的<code>Z</code>,<code>i</code>修饰符可以全局忽略大小写。</p></li><li><p><code>m</code>修饰符(常用):<code>m</code>是<code>multiline</code>的缩写。这个修饰符有特定起作用的场景：它要和<code>^</code>和<code>$</code>搭配起来使用。默认情况下，<code>^</code>和<code>$</code>匹配的是文本的开始和结束，加上<code>m</code>修饰符，它们的含义就变成了行的开始和结束。在匹配换行文本的时候很有用</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`</span></span><br><span class="line"><span class="string">abc</span></span><br><span class="line"><span class="string">xyz</span></span><br><span class="line"><span class="string">`</span>.match(<span class="regexp">/^xyz$/</span>);</span><br><span class="line"><span class="comment">// 匹配结果为null。如果不加m，这里^和$还是代表文本的开始与结束，这里文本的开始和结束相邻的字符都是换行符，所以匹配不到东西</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="string">abc</span></span><br><span class="line"><span class="string">xyz</span></span><br><span class="line"><span class="string">`</span>.match(<span class="regexp">/^xyz$/m</span>); </span><br><span class="line"><span class="comment">// 匹配结果为['xyz']。加了m，这里^和$还是代表行的开始与结束，其中xyz就为一行。</span></span><br></pre></td></tr></table></figure></div></li><li><p><code>y</code>修饰符(ES2015新特性，不常用):<code>y</code>是<code>sticky</code>的缩写。<code>y</code>修饰符有和<code>g</code>修饰符重合的功能，它们都是全局匹配。所以重点在<code>sticky</code>上，怎么理解这个粘连呢？<code>g</code>修饰符不挑食，匹配完一个接着匹配下一个，对于文本的位置没有要求。但是<code>y</code>修饰符要求必须从文本的开始实施匹配，因为它会开启全局匹配，匹配到的文本的下一个字符就是下一次文本的开始。这就是所谓的粘连。</p></li><li><p><code>s</code>修饰符(ES2018新特性，不常用):<code>s</code>是<code>singleline</code>的缩写。<code>s</code>修饰符要和<code>.</code>搭配使用，默认情况下，<code>.</code>匹配除了换行符之外的任意单个字符，然而它还没有强大到无所不能的地步，所以正则索性给它开个挂。<code>s</code>修饰符的作用就是让<code>.</code>可以匹配任意单个字符。</p></li><li><p><code>u</code>修饰符(ES2015新特性，不常用):<code>u</code>是<code>unicode</code>的缩写。有一些<code>Unicode</code>字符超过一个字节，正则就无法正确的识别它们。<code>u</code>修饰符就是用来处理这些不常见的情况的。</p></li></ul></li></ol><h4 id="正则世界的武器：JS中与正则相关的方法"><a href="#正则世界的武器：JS中与正则相关的方法" class="headerlink" title="正则世界的武器：JS中与正则相关的方法"></a>正则世界的武器：JS中与正则相关的方法</h4><p>经过前面一番小怪的历练，我们经验值逐渐涨了起来，但是光有等级，没有好使的武器可不行啊，所以我们接下来去正则世界里的”武器库”，看看有哪些好使的武器。</p><p>但是在进入武器库前，我们先解决一下看守武器库的小怪物。</p><h5 id="看门小怪物——零宽断言"><a href="#看门小怪物——零宽断言" class="headerlink" title="看门小怪物——零宽断言"></a>看门小怪物——零宽断言</h5><p>在前面的元字符环节，我们了解到，正则里有一些元字符只匹配位置，不匹配字符。比如<code>^</code>,<code>$</code>,<code>\b</code>,<code>\B</code>等。当然正则还有一些比较高级的匹配位置的语法，它匹配的是：在这个位置之前或之后应该有什么内容。</p><p>所谓<code>零宽</code>指的就是它匹配一个位置，位置是没有宽度的(<strong>这句话很关键的，所以位置匹配可以无限重复的，所以上面说的位置相关元字符也是可以和断言搭配使用的</strong>)。所谓<code>断言</code>指的是一种判断，断言之前或之后应该有什么或应该没有什么。</p><ul><li><p><code>零宽肯定先行断言</code>:所谓的肯定就是判断有什么，而不是判断没有什么。而先行指的是向前看(lookahead)，断言的这个位置是为前面的正则规则服务的(人话：整个圆括号匹配的是个位置，那么匹配到这个位置的规则写在圆括号内，圆括号里的内容为括号前面的正则息息相关)。语法很简单：圆括号内最左边加上<code>?=</code>标识。看下面这个栗子：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`CoffeeScript JavaScript Typescript`</span>.match(<span class="regexp">/\b\w&#123;4&#125;(?=Script\b)/</span>); <span class="comment">// ["Java"]</span></span><br></pre></td></tr></table></figure></div><p>这句正则什么意思呢？匹配4个字母，这4个字母最前面是一个单词边界，并且后面有一个符合一个规则的位置，这个规则为一个结尾为单词边界位置的<code>Script</code>字符串。在<code>CoffeeScript JavaScript Typescript</code>里，满足这个规则的只有前面俩个<code>CoffeeScript JavaScript</code>，其中<code>CoffeeScript</code>的<code>Script</code>前面为<code>\b\w{6}</code>，所以不符合正则要求，只有<code>JavaScript</code>符合，并且牢记断言是没有宽度的这个特性，所以只匹配出里<code>Java</code>出来。</p><p>为了说明没有宽度这个特性，我们接着看这个栗子：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'CoffeeScript JavaScript javascript'</span>.match(<span class="regexp">/\b\w&#123;4&#125;(?=Script\b)\w+/</span>); <span class="comment">// ['JavaScript']</span></span><br></pre></td></tr></table></figure></div><p>我们在<code>(?=Script\b)</code>后面新添里正则<code>\w+</code>，根据前面的解释，<code>\b\w{4}(?=Script\b)</code>依旧匹配的是<code>Java</code>，然后<code>\w+</code>匹配到里<code>Script</code>，所以匹配结果为<code>JavaScript</code>。</p></li><li><p><code>零宽否定先行断言</code>:肯定是判断有什么，那么否定就是判断没有什么，语法是圆括号内最左边加上<code>?!</code>标识。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'TypeScript Perl JavaScript'</span>.match(<span class="regexp">/\b\w&#123;4&#125;(?!Script\b)/</span>); <span class="comment">// ['Perl']</span></span><br></pre></td></tr></table></figure></div></li><li><p><code>零宽肯定后行断言</code>:前面说的先行是向前看，那么后行就是向后看(lookbehind)，断言的这个位置是为后面的规则服务的。语法很简单：圆括号内最左边加上<code>?&lt;=</code>标识。<strong>有一点要注意，后行断言是ES2018的新特性，目前桌面浏览器只有Chrome62和Opera49以上的版本才支持，其他浏览器都不支持，会报错</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'演员高圆圆 将军霍去病 演员霍思燕'</span>.match(<span class="regexp">/(?&lt;=演员)霍\S+/</span>);</span><br><span class="line"><span class="comment">// 匹配结果为['霍思燕']。我们先看`霍\S+`这个正则的意思，霍开头并且后面有一个或者无数个为非空字符的字符组，满足这个正则条件的是`霍去病`和`霍思燕`，而后行断言是为后面的规则服务的，`(?&lt;=演员)`的意思就是谁前面的字符串为演员，很明显`霍思燕`是满足这个条件的。</span></span><br></pre></td></tr></table></figure></div></li><li><p><code>零宽否定先行断言</code>:同理，肯定是判断有什么，那么否定就是判断没有什么，语法是圆括号内最左边加上<code>?&lt;!</code>标识。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'演员高圆圆 将军霍去病 演员霍思燕'</span>.match(<span class="regexp">/(?&lt;!演员)霍\S+/</span>);</span><br><span class="line"><span class="comment">// 匹配结果为['霍去病']</span></span><br></pre></td></tr></table></figure></div></li></ul><p>  讲到这里，我们已经手撕了<code>零宽断言</code>，推开了武器库的大门，让我们看看都有哪些趁手的武器吧。</p><p>   因为正则表达式是用来处理字符串的，所以大部分的方法与String类型有关。在上面的栗子中，使用的<code>match</code>，就是其中一种，下面我把所有和正则有关的的方法集结如下(有些MDN上标明已废弃的就不列出)，我们简单的过一下。</p><p>  <code>String</code>相关:</p><hr><p>  <code>match</code>: 检索返回一个字符串匹配正则表达式的的结果。</p><blockquote><p>语法: <code>str.match(regexp)</code></p></blockquote><p>  它接受一个正则表达式作为唯一参数，但是你传一个字符串进去，会隐式的将其转换为一个正则实例。<br>  <code>match</code>的返回值可以分为三种情况</p><ul><li>匹配失败的时候返回<code>null</code>。</li><li><p>非全局匹配：返回一个数组，数组的第一项为匹配结果，如果你没有传任何参数给<code>match</code>,匹配结果为空字符串，如果正则里有捕获组并且没有设置<code>?:</code>，那么从第二项开始依次排列捕获的结果。并且数组里有三个属性:<code>index</code>,<code>input</code>,<code>groups</code>。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'i love gridsum'</span>.match(<span class="regexp">/\blo(v)(?&lt;key&gt;e)/</span>)</span><br><span class="line"><span class="comment">//  ["love", "v", "e", index: 2, input: "i love gridsum", groups: &#123;key: "e"&#125;]</span></span><br><span class="line"><span class="comment">// index属性，标明匹配结果在文本中的起始位置。</span></span><br><span class="line"><span class="comment">// input属性，显示源文本。</span></span><br><span class="line"><span class="comment">// groups属性，它存储的不是捕获组的信息，而是捕获命名的信息。</span></span><br></pre></td></tr></table></figure></div></li><li><p>全局匹配：返回一个数组，匹配的结果会依次在数组列出，但是其他信息都不会列出来。</p></li></ul><hr><p>  <code>matchAll</code>: 方法返回一个包含所有匹配正则表达式的结果及分组捕获组的迭代器。迭代器相关的知识可以参考<a href="https://es6.ruanyifeng.com/#docs/generator" target="_blank" rel="noopener">阮一峰ECMAScript入门</a>;</p><blockquote><p>语法：<code>str.matchAll(regexp)</code></p></blockquote>  <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bar = <span class="string">'@gridsum1-good-$gridsum3'</span>.matchAll(<span class="regexp">/([^-]+)gridsum(\d+)/g</span>);</span><br><span class="line">bar.next(); <span class="comment">// &#123;value:['@gridsum1', '@', '1'], done: false&#125;</span></span><br><span class="line">bar.next(); <span class="comment">// &#123;value:['@gridsum3', '$', '3'], done: false&#125;</span></span><br><span class="line">bar.next(); <span class="comment">// &#123;value:undefined, done: true&#125; 结束</span></span><br><span class="line"><span class="comment">// value里的这个数组里，第一个数代表的是匹配的结果，后面依次为捕获组的内容</span></span><br></pre></td></tr></table></figure></div><p>  如果没有 <code>g</code> 标志则<code>matchAll</code> 只会返回首个匹配。当迭代器消耗尽了，无法再次复用，需要重新获取一个新的迭代器。</p><p>  也可以通过扩展运算符或者<code>Array.form()</code>或者<code>for...of</code>来进行循环。</p>  <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bar = <span class="string">'@gridsum1-good-$gridsum3'</span>.matchAll(<span class="regexp">/([^-]+)gridsum(\d+)/g</span>);</span><br><span class="line"><span class="keyword">var</span> [bar1,bar2,bar3] = <span class="built_in">Array</span>(<span class="number">3</span>).fill(bar, <span class="number">0</span> , <span class="number">3</span>);</span><br><span class="line"><span class="keyword">var</span> arr1 = [...bar];</span><br><span class="line"><span class="comment">// [["@gridsum1", "@", "1", index: 0, input: "@gridsum1-good-$gridsum3", groups: undefined],["$gridsum3", "$", "3", index: 15, input: "@gridsum1-good-$gridsum3", groups: undefined]];</span></span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="built_in">Array</span>.from(bar2);</span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">of</span> bar3) &#123;</span><br><span class="line">  i.next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><hr><p>  <code>replace</code>: 根据给定的字符串或者正则替换匹配结果，并返回新的替换后的文本。源文本不会改变。它有俩个参数，第一个参数为 字符串或者正则表达式，作用为匹配（字符串只能替换一次，不如正则的表达能力强）。第二个参数为字符串或者一个函数，作用为替换。</p><blockquote><p>语法: <code>str.replace(regexp|substr, newSubStr|function)</code></p></blockquote><p>  我们在正则小怪中的捕获中埋了一个坑，说正则外捕获大部分与<code>replace</code>有关，现在我们就讲讲为啥与<code>replace</code>有关。</p><p>  在替换字符串中，<code>replace</code>提供了一些特殊的变量名。</p><table><thead><tr><th>变量名</th><th>代表的值</th><th>示例</th><th>示例结果</th></tr></thead><tbody><tr><td><code>$$</code></td><td>插入一个 <code>$</code>。</td><td><code>&#39;-abcd-&#39;.replace(/-/g, &#39;$$&#39;)</code></td><td>‘$abcd$’</td></tr><tr><td><code>$&amp;</code></td><td>插入匹配的子串。</td><td><code>&#39;-abcd-&#39;.replace(/-abcd-/g, &#39;{$&amp;}&#39;)</code></td><td>‘{-abcd-}’</td></tr><tr><td> <code>$`</code></td><td>插入当前匹配的子串左边的内容。</td><td><code>&#39;-abcd-&#39;.replace(/-/g, &#39;{$</code>}’)`</td><td>‘{abcd-}abcd{}’</td></tr><tr><td><code>$&#39;</code></td><td>插入当前匹配的子串右边的内容。</td><td><code>&#39;-abcd-&#39;.replace(/-/g, &quot;{$&#39;}&quot;)</code></td><td>‘{abcd-}abcd{}’</td></tr><tr><td><code>$n</code></td><td>假如负责匹配的参数是一个正则，<code>$n</code>代表的是第n个括号匹配到的字符串(同样为内部没有<code>?:</code>的括号)，n是从1开始并且小于100的非负整数。</td><td><code>&#39;-abcd-&#39;.replace(/(-)(a)bcd-/g, &#39;$1$2&#39;)</code></td><td>‘-a’</td></tr></tbody></table><p>  其中用的最多的还是<code>$n</code>这种方式。所以正则外捕获是与<code>replace</code>息息相关的。</p><p>  当<code>replace</code>的第二个参数为一个函数时，当匹配执行时，该函数就会执行，函数的返回值作为替换字符串，如果你没设置返回值，默认返回<code>undefined</code>字符串，如果第一个参数是正则表达式，并且其为全局匹配模式，那么这个方法将被多次调用，每次匹配都会被调用。</p><p>  该函数共有4个参数。</p><p>  函数的第一个参数，是匹配结果。对应于上述的<code>$&amp;</code>。</p>  <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'hello gridsum'</span>.replace(<span class="regexp">/gridsum/g</span>, (match) =&gt; <span class="string">`&#123;<span class="subst">$&#123;match&#125;</span>&#125;`</span>);</span><br><span class="line"><span class="comment">// "hello &#123;gridsum&#125;"</span></span><br><span class="line"><span class="string">'hello gridsum'</span>.replace(<span class="regexp">/gridsum/g</span>, (match) =&gt; &#123;&#125;);</span><br><span class="line"><span class="comment">// "hello undefined"</span></span><br></pre></td></tr></table></figure></div><p>  如果<code>replace</code>方法第一个参数是正则表达式，函数的第二个参数开始与正则中的捕获组一一对应，对应与上诉的<code>$n</code>。</p>  <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'@gridsum1-good-$gridsum3'</span>.replace(<span class="regexp">/([^-]+)gridsum(\d+)/g</span>, (match, $<span class="number">1</span>, $<span class="number">2</span>) =&gt; <span class="string">`&#123;<span class="subst">$&#123;$<span class="number">1</span>&#125;</span><span class="subst">$&#123;match&#125;</span><span class="subst">$&#123;$<span class="number">2</span>&#125;</span>&#125;`</span>);</span><br><span class="line"><span class="comment">// "&#123;@@gridsum11&#125;-good-&#123;$$gridsum33&#125;""</span></span><br></pre></td></tr></table></figure></div><p>  函数的倒数第二个参数是匹配结果在文本中的位置。</p>  <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'@gridsum-good-$gridsum'</span>.replace(<span class="regexp">/([^-]+)gridsum/g</span>, (match, $<span class="number">1</span>, index) =&gt; <span class="string">`&#123;<span class="subst">$&#123;match&#125;</span>是位置是<span class="subst">$&#123;index&#125;</span>&#125;`</span>);</span><br><span class="line"><span class="comment">// "&#123;@gridsum是位置是0&#125;-good-&#123;$gridsum是位置是14&#125;"</span></span><br></pre></td></tr></table></figure></div><p>  函数的最后一个参数是被匹配的原字符串。</p><p>  <code>replace</code>的用途很广泛，它能很好的达到我们想要替换字符串的操作。几个栗子。</p><ul><li>转义HTML标签：<code>&#39;&lt;p&gt;hello regex&lt;/p&gt;&#39;.replace(/&lt;/g, &#39;&amp;lt;&#39;).replace(/&gt;/g, &#39;&amp;gt;&#39;);</code></li><li>将华氏温度转换为对等的摄氏温度: <code>&#39;70°F&#39;.replace(/(\d+)°F\b/g, (match, p1)=&gt; (p1-32)*5/9+&quot;°C&quot;);</code></li><li>获取指定标签内的值：<code>&#39;&lt;span&gt;hello&lt;/span&gt;&#39;.replace(/&lt;span[^&gt;]*&gt;(.*?)&lt;\/span&gt;/g, &#39;$1&#39;);</code></li><li>模拟实现<code>trim</code>方法：<code>str.replace(/^\s*(.*?)\s*$/g, &quot;$1&quot;);</code></li><li>单词大驼峰化：<code>str.replace(/(^|[-_\s])+(.)?/g, (match, p1,p2)=&gt;p2?p2.toUpperCase():&#39;&#39;)</code></li></ul><hr><p>  <code>search</code>: 找出首次匹配项的索引。它的功能较单一，性能也更好。它接受一个正则表达式作为唯一参数。与match一样，如果传入一个非正则表达式，它会调用<code>new RegExp()</code>将其转换成一个正则实例。</p><blockquote><p>语法: <code>str.search(regexp)</code></p></blockquote>  <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'gridsum-good-gridsum'</span>.search(<span class="regexp">/good/</span>);</span><br><span class="line"><span class="comment">// 8</span></span><br></pre></td></tr></table></figure></div><p>  因为只能返回首次匹配的位置，所以全局匹配对它无效。如果匹配失败，返回-1。</p><hr><p>  <code>split</code>: 它的作用是根据传入的分隔符切割源文本。它返回一个由被切割单元组成的数组。它接受两个参数。第一个参数可以是字符串或者正则表达式，它是分隔符；第二个参数可选，限制返回数组的最大长度。</p><blockquote><p>语法：<code>str.split([separator[, limit]])</code></p></blockquote>  <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'abc-def_mno+xyz'</span>.split(<span class="regexp">/[-_+]/g</span>);</span><br><span class="line"><span class="comment">// ["abc", "def", "mno", "xyz"]</span></span><br></pre></td></tr></table></figure></div><p>  因为split方法中的正则是用来匹配分隔符，所以全局匹配没有意义。</p><p>  <code>RegExp</code>相关：</p><hr><p>  <code>exec</code>:它的作用是根据参数返回匹配结果，与字符串方法match相似。</p><blockquote><p>语法：<code>regexObj.exec(str)</code></p></blockquote>  <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/xyz/.exec(<span class="string">'abc-xyz-abc'</span>);</span><br><span class="line"><span class="comment">// ["xyz", index: 4, input: "abc-xyz-abc", groups: undefined]</span></span><br></pre></td></tr></table></figure></div><p>  <code>exec</code>与<code>match</code>小小的区别在于参数为空的情况：<code>exec</code>直接返回<code>null</code>；<code>match</code>返回一个空字符串数组。</p><p>  更大的区别在于全局匹配的时候，<code>exec</code>由于每次都只能匹配一个结果出来，所以全局匹配每次成功后，都需要更新正则实例的<code>lastIndex</code>属性，用于记录上次匹配成功后的下标，当最终匹配结果为<code>null</code>的时候，<code>lastIndex</code>会重归于0，所以这个匹配过程是可以无限重复的。<code>lastIndex</code>属性是属于正则实例的。所以使用<code>exec</code>一般配合正则实例使用。</p><p>  如果直接使用字面量的正则搭配<code>exec</code>使用，就会一直在原地打转，因为每次都是一个新的正则实例，每次<code>lastIndex</code>都要从0开始。</p><p>  <code>exec</code>还有与<code>replace</code>搭配使用的方法，看下面这个栗子：</p>  <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/</span>;</span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"2017-06-12"</span>;</span><br><span class="line"><span class="keyword">var</span> result = string.replace(regex, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">RegExp</span>.$<span class="number">2</span> + <span class="string">"/"</span> + <span class="built_in">RegExp</span>.$<span class="number">3</span> + <span class="string">"/"</span> + <span class="built_in">RegExp</span>.$<span class="number">1</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><p>  注意：<code>RegExp</code>是会被新的正则表达覆盖的。</p><hr><p>  <code>test</code>:方法执行一个检索，用来查看正则表达式与指定的字符串是否匹配。返回 <code>true</code> 或 <code>false</code>。与字符串方法search相似。多用于表单验证中。</p><blockquote><p>语法：<code>regexObj.test(str)</code></p></blockquote><p>  test方法与search方法的区别主要体现在两点：</p><ul><li><p><code>search</code>方法返回的是索引，<code>test</code>方法只返回布尔值。</p></li><li><p>因为是正则实例方法，全局匹配时也会更新正则实例的<code>lastIndex</code>属性，所以也可以多次执行。</p></li></ul><hr><h4 id="boss：能看懂复杂的正则-amp-理解正则的运行模式"><a href="#boss：能看懂复杂的正则-amp-理解正则的运行模式" class="headerlink" title="boss：能看懂复杂的正则&amp;理解正则的运行模式"></a>boss：能看懂复杂的正则&amp;理解正则的运行模式</h4><p>  从武器库里认识了众多武器后，我们开始来挑战一些小boss。</p><ol><li><p>匹配身份证</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^(\d&#123;<span class="number">18</span>&#125;|\d&#123;<span class="number">17</span>&#125;[\dxX])$/.test(str)</span><br></pre></td></tr></table></figure></div><p>这个正则比较简单，首先想到身份证一定是18位的，但是最后一位可能是x或者X，其他的都是数字，那么正则只要写个分支出来就好了。</p></li><li><p>匹配16进制颜色值</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^#([0-9a-fA-F]&#123;6&#125;|[0-9a-fA-F]&#123;3&#125;)$/.test(str)</span><br></pre></td></tr></table></figure><p>首先16进制的颜色都是#号开头，后面是3位数或者是6位数的，并且每个数都只能是‘0-9’或者‘a-f’或者‘A-F’，所以我们就可以写出个分支出来了。</p></li><li><p>金钱字符串千位符分割</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'1234567'</span>.replace(<span class="regexp">/\B(?=(\d&#123;3&#125;)+(?!\d))/g</span>,<span class="string">','</span>);</span><br><span class="line"><span class="comment">// 1,234,567</span></span><br></pre></td></tr></table></figure></div><p>这个正则难点在于断言里套了一个断言，本来正则里的断言就不好理解，还是俄罗斯套娃版的断言，更加有难度。但是仔细把这个正则进行拆分，分步骤解读我们还是可以理解这个正则的。</p><p>首先我们先理解<code>\B</code>匹配出来的结果是<code>[&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;]</code>，这些玩意是1和2之间，2和3之间等等的位置，然后<code>(?=(\d{3})+(?!\d))</code>这个先行肯定断言语句能匹配出来一个跟在<code>\B</code>后面的位置，这个位置呢符合<code>\B(\d{3})+(?!\d))</code>这个规则，<code>\d{3}+(?!\d)</code>的意思呢是匹配某种长度至少为3的倍数的数字串，<code>(?!\d)</code>先行否定断言，就是说这个数字串后面的位置不能有数字啦。</p><p>分解以后我们就好理解该正则的含义了，比如，先找到1和2中间这个位置，这个位置后面跟着的数字串为’234567’，长度为6符合3的倍数，将该位置替换成’,’,接着检查2和3中间这个位置，这个位置后面的数字串为’34567’，长度为5，不符合3的倍数，跳过该位置，依次类推。所以这个正则正好符合金钱的计数法，从最右边开始算起，每隔3位数插入一个’,’。</p></li></ol><p>  当然处理金钱字符串肯定不止这一种方法，比如下面这个：<code>&#39;1234567&#39;.replace(/(?!^)(?=(\d{3})+$)/g,&#39;,&#39;)</code>，但是呢这种我觉得不好理解，当先行断言前面没有任何规则的时候，正则会对每一个位置发起匹配，每一个位置就是指<code>\B</code>与<code>\b</code>，我们看这个栗子：</p>   <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'1234'</span>.match(<span class="regexp">/(?=\d)/g</span>) <span class="comment">// ["", "", "", ""] 因为最后一个位置后没有数字了，所以不会被匹配出来</span></span><br></pre></td></tr></table></figure></div><p>   所以我们就可以理解这个正则了，我们可以把俩个括号所服务的位置其实是同一位置，这个位置后面不是开头，并且后面跟着长度为3的倍数的字符串，这个字符串结尾一定是结尾，<code>&#39;1234567&#39;.match(/(?!^)(?=(\d{3})+$)/g)</code>匹配出来的东西是<code>[&quot;&quot;,&quot;&quot;]</code>，说明有俩个位置符合这个规则，哪俩个呢？1后面的位置和4后面的位置，1后面位置跟着直到末尾的字符串是’234567’，长度为6，符合规则，4后面位置跟着直到末尾的字符串是’567’，长度为3，符合规则。</p><p>  所以解决同一个问题的时候，往往有多个版本的正则可以使用，并且对正则的理解可能也会有不同，所以具体使用哪种方法大家见仁见智了。</p><ol start="4"><li><p>密码长度6-12位，由数字、小写字符和大写字母组成，但必须至少包括2种字符</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^((?=.*[0-9])(?=.*[a-z])|(?=.*[0-9])(?=.*[A-Z])|(?=.*[a-z])(?=.*[A-Z]))[0-9A-Za-z]&#123;6,12&#125;$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log( reg.test(<span class="string">"abcdEF234"</span>) );</span><br></pre></td></tr></table></figure></div></li></ol><p>  这个正则完整的一看还挺长的，我们先分析需求，先看最简单的由数字、小写字符和大写字母组成,并且长度为6-12位，可以得出正则<code>[0-9A-Za-z]{6,12}</code>，至少包括2种字符，那么有3种组合：数字+小写字母，数字+大写字母，小写字母+大写字母，那么我们可以对开头这个位置处理，利用多个断言堆加一起，都是为前面的正则规则服务这个概念，我们可以写出3个分支<code>(?=.*[0-9])(?=.*[a-z])</code>,<code>(?=.*[0-9])(?=.*[A-Z])</code>,<code>(?=.*[a-z])(?=.*[A-Z])</code>。结合一下，就可以写出正则了。</p><ol start="5"><li><p>输入框校验，避免特殊符号输入，允许<code>-/${}</code>符号输入，其他符号输入及空格输入视为非法，并且开头不允许数字或者符号，最长为32个字符。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^(?!(\d|[\W]|_))[0-9a-zA-Z\-/$&#123;&#125;]&#123;1,32&#125;$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log( reg.test(<span class="string">"s-/$&#123;&#125;"</span>) );   <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log( reg.test(<span class="string">"-dsadsa"</span>) );   <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">"s32 13"</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">"s1234567s1234567s1234567s1234567y"</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></div><p>这是个与我们日常研发中比较相关的栗子，只允许<code>-/${}</code>符号输入，其他符号及空格输入视为非法，那么我们可以写出一个字符组<code>[0-9a-zA-Z\-/${}]</code>，开头不允许数字或者符号，我们知道<code>\w</code>相当于<code>[0-9a-z-A-Z_]</code>，但是里面有个<code>_</code>符号，所以要对它单独处理，所以配合先行否定断言可以写出正则<code>^(?!(\d|[\W]|_))</code>，最长为32个字符那么就是<code>{1,32}</code>，拼接一起后就可以得出正则了。</p><p>我们在尝试使用正则表达式去解决问题的时候，会无形中锻炼我们分析问题的能力与思维逻辑，正则与普通程序一样，也有流程的概念。比如上面的身份证匹配正则可视化流程图如下：</p><p><img src="https://static-beta-engage.gridsumdissector.com/fss/public/2EhbOAPp06X2G0ZeWOqAa9G7UAHqi0glccd1d267d1627c5e89bc9f6f1090cc64.jpg" alt></p><p>所以这里推荐几个的优秀的正则相关网站：</p><ul><li><a href="https://jex.im/regulex/#!flags=&amp;re=" target="_blank" rel="noopener">正则可视化流程图</a></li><li><a href="https://regex101.com/" target="_blank" rel="noopener">拆分解析正则，切换不同语言环境下正则</a></li><li><a href="https://tool.oschina.net/uploads/apidocs/jquery/regexp.html" target="_blank" rel="noopener">简单的正则表达式手册</a></li><li><a href="https://alf.nu/RegexGolf" target="_blank" rel="noopener">正则闯关</a></li></ul></li></ol><h5 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h5><p>   回溯这个概念呢，我们稍作了解(因为我懂的也不多- -)，正则在匹配的过程中，如果遇到了不正确的匹配，会回到上次匹配正确的步骤，重新开始发起匹配。看这个栗子</p>   <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'abbc'</span>.match(<span class="regexp">/ab&#123;1,3&#125;c/</span>)</span><br></pre></td></tr></table></figure></div><p>   <img src="https://static-beta-engage.gridsumdissector.com/fss/public/1oXdwEjXEpSX6PPzxE9EAPQy8ANTa0gn0e622faa95023c7a1892c5e43e6a1c04.png" alt></p><p>   一般发生回溯的地方有3个：贪婪量词，惰性量词，分支结构。</p><p>   上面这个栗子就是贪婪量词的栗子，那为啥惰性量词也会发生回溯呢？因为有时候为了整体的正则成功，非贪婪模式下也不得不多匹配点东西。</p>   <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'12345'</span>.match(<span class="regexp">/\d&#123;1,3&#125;?\d&#123;1,3&#125;/</span>)</span><br></pre></td></tr></table></figure></div><p>   <img src="https://static-beta-engage.gridsumdissector.com/fss/public/23mDEtryASz4KnEGgItCakVmGISaU0go06e5489e3294b5042adc8d98173fe215.png" alt></p><p>   分支结构发生的回溯情况，可能前面的子模式会形成了局部匹配，如果接下来表达式整体不匹配时，仍会继续尝试剩下的分支。这种尝试也可以看成一种回溯。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'candy'</span>.match(<span class="regexp">/^(?:can|candy)$/</span>)</span><br></pre></td></tr></table></figure></div><p>   <img src="https://static-beta-engage.gridsumdissector.com/fss/public/1xUJkAxjlZk1PHCmrrO4mo6lkxebx0gpcc037bc8e5d64eaedb2a446f16ef0977.png" alt></p><p>   正则如果存在过多的回溯就可能把cpu进程占满！之前网络安全实践分享中提到的 正则DOS攻击，就是黑客写的正则存在过多的正则回溯，把服务器的资源消耗过多，导致卡死，所以写出表达更正确的正则表达式是可以避免回溯的，比如<code>.*</code>这种写法就特别容易造成回溯，所以当你直到要匹配到哪个字符结束的时候，比如我知道要匹配到<code>}</code>结束，那你可以这么写<code>[^}]*</code>。</p><h5 id="NFA引擎和DFA引擎"><a href="#NFA引擎和DFA引擎" class="headerlink" title="NFA引擎和DFA引擎"></a>NFA引擎和DFA引擎</h5><p>  NFA与DFA是俩个合并的单词缩写，FA是有限自动机(Finite Automate)，我们可以有限自动机理解为一个机器人，在这个机器人眼里，所有的事物都是由有限节点组成的。机器人按照顺序读取有限节点，并表达成有限状态，最终机器人输出接受或者拒绝作为结束。</p><p>  DFA是确定性有限自动机的缩写，NFA是非确定有限自动机的缩写，具体啥区别我没去研究过，总的来说，DFA可以称为文本主导的正则引擎，NFA可以称为表达式主导的正则引擎。我们平时写的正则都是用正则去匹配文本，这就是NFA的思路。</p><p>  引擎的知识也是比较深层次的正则知识点了(我懂的也不是很多- -)，大家只需要知道大部分计算机语言的正则引擎是NFA的，JS环境下的正则引擎就是NFA的，意味着所有浏览器的正则引擎都是NFA。</p><p>  讲到这呢，我们对正则已经有了一个比较全面的了解，希望本次分享能对大家有所帮助。如果大家对这些知识点消化后，工作中灵活运用正则是没问题的。但是正则是门非常”古老”的概念，它源于数学，比任何计算机语言出现都要早，想要把正则世界这个游戏打通关，我们需要走的路还很长～</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;学一门前端工具，几年就过时了。学正则表达式，受用一辈子。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;正则表达式，英文简称:RegExp，全称:Regular Expression。关于正则表达式的由来和介绍就不多说了，大家只要记住正则是匹配模式，要么匹配字符，要么匹配位置。&lt;/p&gt;
&lt;p&gt;我们系统的学习知识和打游戏是一样的，初期只能挑战一些小喽啰，涨涨经验值，等级和装备齐全后就可以逐一去挑战boss们。所以我们先来看下正则世界里都有哪些小怪物。&lt;/p&gt;
&lt;p&gt;友情提示：学习正则表达式对新手来说并不是很友好，一些基础的知识需要通过死记硬背来学习，你得先记住它，才能灵活运用它。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>秀米集成到UEditor的配置过程</title>
    <link href="http://blog.zijunfe.cn/2019/10/22/xiumi/"/>
    <id>http://blog.zijunfe.cn/2019/10/22/xiumi/</id>
    <published>2019-10-22T01:57:39.000Z</published>
    <updated>2019-10-22T13:17:55.659Z</updated>
    
    <content type="html"><![CDATA[<h3 id="秀米集成到UEditor的配置过程"><a href="#秀米集成到UEditor的配置过程" class="headerlink" title="秀米集成到UEditor的配置过程"></a>秀米集成到UEditor的配置过程</h3><p>虽然秀米官方有提供文档说明如何将秀米插件集成至UEditor里(<a href="http://hgs.xiumi.us/uedit/" target="_blank" rel="noopener">秀米官方文档</a>)，但是该文档说明模糊不清，关键配置一句话带过，即使配置成功后还有坑留在里面。所以我重新整理了这个配置过程，回顾一下过程的同时也给以后需要用到的小伙伴提供便利。</p><a id="more"></a><h4 id="一、将秀米图标集成至工具栏，并且成功弹出秀米弹框"><a href="#一、将秀米图标集成至工具栏，并且成功弹出秀米弹框" class="headerlink" title="一、将秀米图标集成至工具栏，并且成功弹出秀米弹框"></a>一、将秀米图标集成至工具栏，并且成功弹出秀米弹框</h4><ol><li><p>首先我们需要一个秀米的html文件，这个html里主要就是弹框里的内容，里面有一个iframe指向秀米的网址。<br>取名xiumi-ue-dialog-v5.html,放入ueditor1_4_3_3文件夹(UE的资源文件夹)下或者ueditor1_4_3_3下的dialogs文件夹里，这个只是涉及到后面引入它的路径，不是很重要，我是放在ueditor1_4_3_3文件夹下的。</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ueditor1\_4\_3\_3/xiumi-ue-dialog-v5.html --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- saved from url=(0049)http://hgs.xiumi.us/uedit/xiumi-ue-dialog-v5.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>XIUMI connect<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  html, body &#123;</span></span><br><span class="line"><span class="undefined">    padding: 0;</span></span><br><span class="line"><span class="undefined">    margin: 0;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  #xiumi &#123;</span></span><br><span class="line"><span class="undefined">    position: absolute;</span></span><br><span class="line"><span class="undefined">    width: 100%;</span></span><br><span class="line"><span class="undefined">    height: 100%;</span></span><br><span class="line"><span class="undefined">    border: none;</span></span><br><span class="line"><span class="undefined">    box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">"xiumi"</span> <span class="attr">src</span>=<span class="string">"//xiumi.us/studio/v5#/paper"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./dialogs/internal.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> xiumi = <span class="built_in">document</span>.getElementById(<span class="string">'xiumi'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> xiumi_url = <span class="built_in">window</span>.location.protocol + <span class="string">"//xiumi.us"</span>;</span></span><br><span class="line"><span class="javascript">    xiumi.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        xiumi.contentWindow.postMessage(<span class="string">'ready'</span>, xiumi_url);</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.addEventListener(<span class="string">"mousewheel"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">        event.preventDefault();</span></span><br><span class="line"><span class="undefined">        event.stopPropagation();</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (event.origin == xiumi_url) &#123;</span></span><br><span class="line"><span class="javascript">            editor.execCommand(<span class="string">'insertHtml'</span>, event.data);</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 这个方法用于触发UE的图片转存接口</span></span></span><br><span class="line"><span class="javascript">            editor.fireEvent(<span class="string">'afterpaste'</span>);</span></span><br><span class="line"><span class="undefined">            dialog.close();</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;, <span class="literal">false</span>);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li><li><p>秀米的文档里使用的是UE.registerUI(‘dialog’，fn）的方式动态在UE里添加一个秀米按钮并且在按钮里添加弹出弹框事件，但是这么做可能会影响到系统其他使用UE里的地方同样出现秀米图标，无法按需加载。所以我将此改进成在UE的前端配置中的toolbars数组里添加一个”xiumi”字符串即可展示出秀米的方式。步骤如下：</p><ul><li><p>添加一个秀米的图标并添加样式。在ueditor1_4_3_3/themes/default/images文件夹里放入一个<a href="https://beta-engage.gridsumdissector.com/wechat/mfe-wechat/static/ueditor1\_4\_3\_3/themes/default/images/xiumi-connect-icon.png" target="_blank" rel="noopener">秀米图标</a>;</p></li><li><p>在ueditor1_4_3_3/themes/default/css/ueditor.css 添加俩句样式</p>  <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSS"><figure class="iseeu highlight /css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* xiumi-dialog */</span></span><br><span class="line"><span class="selector-class">.edui-default</span> <span class="selector-class">.edui-for-xiumi</span> <span class="selector-class">.edui-dialog-content</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">calc</span>(100vw - 60px) <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">90vh</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.edui-default</span> <span class="selector-class">.edui-for-xiumi</span> <span class="selector-class">.edui-icon</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"../images/xiumi-connect-icon.png"</span>) <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">background-size</span>: contain;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>在ueditor.all.js修改代码。在iframeUrlMap对象里添加键值对’xiumi’: ‘~/xiumi-ue-dialog-v5.html’，这个和刚刚那个html存放的地方有关。在btnCmds数组里添加一个’xiumi’字符串，在dialogBtns对象中的ok数组里添加’xiumi’字符串。</p></li><li><p>最后在UE的前端配置里toolbars数组里添加’xiumi’,即可成功展示出秀米图标与秀米的弹框。</p></li></ul></li></ol><p>效果如下</p><p>  <img src="/2019/10/22/xiumi/img1.jpg" alt></p><ol start="3"><li><p>在ueditor.config.js的xss过滤白名单whitList配置里，修改section参数。同时将设置是否抓取远程图片catchRemoteImageEnable设置为true。</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">section:[<span class="string">'class'</span>, <span class="string">'style'</span>],</span><br></pre></td></tr></table></figure></div></li><li><p>能成功弹出秀米的弹框，并且能将秀米里的模版成功勾选到本地的UE编辑器里，说明集成就成功了一半啦。</p></li></ol><h4 id="二、秀米域名的图片转存。"><a href="#二、秀米域名的图片转存。" class="headerlink" title="二、秀米域名的图片转存。"></a>二、秀米域名的图片转存。</h4><p>要完成秀米图片的转存，首先我们要先完成UE对复制过来的网络图片的转存，图片的转存分为img标签与背景图片的抓取与转存。</p><ol><li><p>设置抓取白名单catcherLocalDomain，在白名单里的地址，UE不会对其发起转存请求。可以使用两种方式设置：</p><ul><li>使用UE.utils.extend方法强制在UE实例化后设置  <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UE.utils.extend(editor.options, &#123;</span><br><span class="line">       catcherLocalDomain: [<span class="string">'127.0.0.1'</span>, <span class="string">'localhost'</span>, <span class="string">"static-alpha-engage.gridsumdissector.com"</span>, <span class="string">"static-beta-engage.gridsumdissector.com"</span>, <span class="string">"static-uat-engage.gridsumdissector.com"</span>, <span class="string">"static.engage-all.com"</span>],</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure></div></li></ul><ul><li>修改ueditor.all.js里的初始配置代码，在这个js文件大概第8100行的地方，有一个loadServerConfig的函数，可以直接在这里将catcherLocalDomain的初始值设置为我们想要过滤的白名单域名。</li></ul></li><li><p>修改抓取图片的后端请求地址。UE发起所有接口请求都依赖于一个名为serverUrl的前端配置，然后通过使用serverUrl这个唯一的请求地址，通过GET参数action指定不同请求类型，比如uploadimage(执行上传图片或截图的action名称), uploadvideo(执行上传视频的action名称), catchimage(执行抓取远程图片的action名称)等等，但是后端为了方便接口的管理，一般会将接口拆分出来，当然UE也支持自定义请求地址。UE推荐的方法如下：</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">UE.Editor.prototype._bkGetActionUrl = UE.Editor.prototype.getActionUrl;</span><br><span class="line">UE.Editor.prototype.getActionUrl = <span class="function"><span class="keyword">function</span>(<span class="params">action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (action == <span class="string">'uploadimage'</span> || action == <span class="string">'uploadscrawl'</span> || action == <span class="string">'uploadimage'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'http://a.b.com/upload.php'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (action == <span class="string">'uploadvideo'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'http://a.b.com/video.php'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._bkGetActionUrl.call(<span class="keyword">this</span>, action);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ol><p>原理就是使用一个名为_bkGetActionUrl的临时变量承载原来的getActionUrl方法，然后重写getActionUrl方法，判断action的类型，来返回不同的接口，同时也还可以执行原来的getActionUrl方法。<br>但是我在使用这种方法的时候，会偶尔碰到内存溢出，导致上传图片功能不可用的原因，可能是getActionUrl在其他地方也被重新赋值了，产生循环引用该函数的问题。所以我依旧在ueditor.all.js里修改了getActionUrl原始函数，大概在第8040行代码里，判断getActionUrl函数内部一个actionName的参数，来返回你想要的接口名。</p><ol start="3"><li><p>到这里差不多能够抓取到img标签的src并且可以将其替换了，但需要注意俩点地方：</p><ul><li><p>注意抓取后，后端返回的数据格式时候和UE里源码设置的一样，在ueditor.all.js找到UE.plugins[‘catchremoteimage’]这个函数，在其内部执行catchremoteimage的success回掉函数的地方注意获取源路径和新路径的数据路径的地方。</p></li><li><p>UE内部有一个判断是否跨域的方法，如果跨域会使用jsonp的方式请求接口，如果你是本地调试，并且后端已经对跨域crose处理，不需要使用jsonp的方式请求，你可以把它关了。同样在UE.plugins[‘catchremoteimage’]这个函数里，找到定义catchremoteimage函数的地方，将其内部ajax请求的option里，将dataType固定设置为空字符串即可。</p></li></ul></li><li><p>除了img标签的src替换，背景图片也是需要进行图片抓取和替换的。其实就是依葫芦画瓢，看明白了UE是如何对img标签进行src替换的，也就明白该如何对背景图片进行替换了。</p><ul><li><p>首先你需要在ueditor.all.js文件的domUtils参数里新添一个方法getElementsByTagNameStyle。通过元素的style来获取元素节点数组。</p>  <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 方法getElementsByTagNameStyle的封装</span></span><br><span class="line"><span class="comment">   * @method getElementsByTagNameStyle</span></span><br><span class="line"><span class="comment">   * @param &#123; e &#125; node 目标节点对象</span></span><br><span class="line"><span class="comment">   * @param &#123; t &#125; tagName 需要查找的节点的tagName， 多个tagName以空格分割</span></span><br><span class="line"><span class="comment">   * @param &#123; i &#125; style 节点对象的筛选条件</span></span><br><span class="line"><span class="comment">   * @return &#123; Array &#125; 符合条件的节点集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> getElementsByTagNameStyle: <span class="function"><span class="keyword">function</span> (<span class="params">e, t, i</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (i &amp;&amp; utils.isString(i)) &#123;</span><br><span class="line">         <span class="keyword">var</span> n = i;</span><br><span class="line">         i = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">             <span class="keyword">for</span> (<span class="keyword">var</span> t, i = n.split(<span class="string">","</span>), o = !<span class="number">0</span>, r = e.getAttribute(<span class="string">"style"</span>), a = <span class="number">0</span>; t = i[a++];) <span class="keyword">if</span> (!r || r.indexOf(t) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                 o = !<span class="number">1</span>;</span><br><span class="line">                 <span class="keyword">break</span></span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">return</span> o</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     t = utils.trim(t).replace(<span class="regexp">/[ ]&#123;2,&#125;/g</span>, <span class="string">" "</span>).split(<span class="string">" "</span>);</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">var</span> o, r = [], a = <span class="number">0</span>; o = t[a++];) <span class="keyword">for</span> (<span class="keyword">var</span> s, l = e.getElementsByTagName(o), d = <span class="number">0</span>; s = l[d++];) i &amp;&amp; !i(s) || r.push(s);</span><br><span class="line">     <span class="keyword">return</span> r</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure></div></li><li><p>在UE.plugins[‘catchremoteimage’]下的catchRemoteImage监听函数里添加代码。首先你得的到有背景图片的的元素节点数组。使用刚刚新添的方法</p>  <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">backgroundimagestags = domUtils.getElementsByTagNameStyle(me.document, <span class="string">"section div p"</span>, <span class="string">"background,url"</span>)<span class="comment">//抓取背景图片所在的标签</span></span><br></pre></td></tr></table></figure></div><p>  然后将该元素节点数组里的图片地址都抽取出来，放在一个存放图片地址的数组里</p>  <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> backgroundimages = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, backci; backci = backgroundimagestags[i++];) &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">var</span> bstyle = backci.style;</span><br><span class="line">    <span class="keyword">var</span> backgroundimgurltag = bstyle[<span class="string">'background-image'</span>] || bstyle[<span class="string">'background'</span>] || <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">if</span> (backgroundimgurltag != <span class="literal">null</span> &amp;&amp; backgroundimgurltag != <span class="string">""</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> backsrc = backgroundimgurltag.split(<span class="string">"("</span>)[<span class="number">1</span>].split(<span class="string">")"</span>)[<span class="number">0</span>].replace(<span class="regexp">/\"/g</span>, <span class="string">""</span>)</span><br><span class="line">                      || backgroundimgurltag.split(<span class="string">"("</span>)[<span class="number">1</span>].split(<span class="string">")"</span>)[<span class="number">0</span>].replace(<span class="regexp">/\"/g</span>, <span class="string">""</span>)</span><br><span class="line">                      || <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span> (backsrc != <span class="literal">null</span> &amp;&amp; backsrc != <span class="string">""</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="regexp">/^(https?|ftp):/i</span>.test(backsrc) &amp;&amp; !test(backsrc, catcherLocalDomain)) &#123;</span><br><span class="line">                backgroundimages.push(<span class="built_in">encodeURI</span>(backsrc));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>  最后依葫芦画瓢，对该图片地址数组循环，依次发起转存请求，并且将对应的节点内的背景图片url进行替换。</p>  <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(backgroundimages.length) &#123;</span><br><span class="line">          catchremoteimage(backgroundimages, &#123;</span><br><span class="line">              <span class="comment">//成功抓取</span></span><br><span class="line">              success: <span class="function"><span class="keyword">function</span> (<span class="params">r</span>) </span>&#123;</span><br><span class="line">                  <span class="keyword">try</span> &#123;</span><br><span class="line">                      <span class="keyword">var</span> info = r.state !== <span class="literal">undefined</span> ? r:<span class="built_in">eval</span>(<span class="string">"("</span> + r.responseText + <span class="string">")"</span>);</span><br><span class="line">                  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                      <span class="keyword">return</span>;</span><br><span class="line">                  &#125;</span><br><span class="line"></span><br><span class="line">                  <span class="comment">/* 获取源路径和新路径 */</span></span><br><span class="line">                  <span class="keyword">var</span> i, j, ci, cj, oldSrc, newSrc, styleText ,list = info.data.list;</span><br><span class="line"></span><br><span class="line">                  <span class="keyword">for</span> (i = <span class="number">0</span>; ci = backgroundimagestags[i++];) &#123;</span><br><span class="line">                      styleText = ci.getAttribute(<span class="string">"style"</span>);</span><br><span class="line">                      oldSrc = styleText;</span><br><span class="line">                      <span class="keyword">if</span> (oldSrc.indexOf(<span class="string">'url("'</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                          oldSrc = oldSrc.split(<span class="string">'url("'</span>)[<span class="number">1</span>].split(<span class="string">'")'</span>)[<span class="number">0</span>];</span><br><span class="line">                      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldSrc.indexOf(<span class="string">"url('"</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                          oldSrc = oldSrc.split(<span class="string">"url('"</span>)[<span class="number">1</span>].split(<span class="string">"')"</span>)[<span class="number">0</span>];</span><br><span class="line">                      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                          <span class="keyword">if</span> (!(oldSrc.indexOf(<span class="string">"url("</span>) &gt; <span class="number">0</span>)) <span class="keyword">continue</span>;</span><br><span class="line">                          oldSrc = oldSrc.split(<span class="string">"url("</span>)[<span class="number">1</span>].split(<span class="string">")"</span>)[<span class="number">0</span>];</span><br><span class="line">                      &#125;</span><br><span class="line">                      <span class="keyword">if</span> (oldSrc.indexOf(<span class="string">"?"</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                          oldSrc = oldSrc.split(<span class="string">"?"</span>)[<span class="number">0</span>];</span><br><span class="line">                      &#125;</span><br><span class="line">                      <span class="keyword">for</span> (j = <span class="number">0</span>; cj = list[j++];) &#123;</span><br><span class="line">                          <span class="keyword">if</span> (oldSrc == cj.source &amp;&amp; <span class="string">"SUCCESS"</span> == cj.state) &#123;</span><br><span class="line">                              newSrc = catcherUrlPrefix + cj.url, styleText = styleText.replace(oldSrc, newSrc), domUtils.setAttributes(ci, &#123; <span class="attr">style</span>: styleText &#125;), domUtils.setAttributes(ci, &#123; <span class="attr">is_updata</span>: <span class="string">"true"</span> &#125;);</span><br><span class="line">                              <span class="keyword">break</span></span><br><span class="line">                          &#125;</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">                  me.fireEvent(<span class="string">'catchremotesuccess'</span>)</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="comment">//回调失败，本次请求超时</span></span><br><span class="line">              error: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                  me.fireEvent(<span class="string">"catchremoteerror"</span>);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></div></li></ul></li></ol><ol start="5"><li><p>到这里，UE对普通的img标签及背景图片的抓取与转存已经成功了，如果想要对秀米过来的图片进行转存需要注意以下俩点：</p><ul><li><p>对某些秀米图片地址的后缀进行处理，去掉?号之后类似?x-oss-process=所有的部分。这个在catchremoteimage函数里对imgs进行一步map循环，将？后面的东西去掉即可，同时注意在图片地址数组循环的过程中oldSrc？后面的内容也要去掉，否则oldSrc == cj.source &amp;&amp; “SUCCESS” == cj.state这一步判断不会通过，就无法进行图片地址的替换了。</p></li><li><p>从秀米回到本地UE编辑器的时候不会触发图片转存请求，这也是秀米文档埋下的一个坑！解决这个问题，你需要在xiumi-ue-dialog-v5.html文件里，在<code>dialog.close();</code>代码前添加一句<code>editor.fireEvent(&#39;afterpaste&#39;);</code>来主动触发afterpaste这个监听函数。</p></li></ul></li></ol><p>大功告成<br>  <img src="/2019/10/22/xiumi/img2.jpg" alt><br>  <img src="/2019/10/22/xiumi/img3.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;秀米集成到UEditor的配置过程&quot;&gt;&lt;a href=&quot;#秀米集成到UEditor的配置过程&quot; class=&quot;headerlink&quot; title=&quot;秀米集成到UEditor的配置过程&quot;&gt;&lt;/a&gt;秀米集成到UEditor的配置过程&lt;/h3&gt;&lt;p&gt;虽然秀米官方有提供文档说明如何将秀米插件集成至UEditor里(&lt;a href=&quot;http://hgs.xiumi.us/uedit/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;秀米官方文档&lt;/a&gt;)，但是该文档说明模糊不清，关键配置一句话带过，即使配置成功后还有坑留在里面。所以我重新整理了这个配置过程，回顾一下过程的同时也给以后需要用到的小伙伴提供便利。&lt;/p&gt;
    
    </summary>
    
      <category term="博客" scheme="http://blog.zijunfe.cn/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
  </entry>
  
  <entry>
    <title>原型链的理解</title>
    <link href="http://blog.zijunfe.cn/2019/05/11/prototype/"/>
    <id>http://blog.zijunfe.cn/2019/05/11/prototype/</id>
    <published>2019-05-11T14:19:22.000Z</published>
    <updated>2019-05-13T05:34:57.853Z</updated>
    
    <content type="html"><![CDATA[<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[].__proto__ === <span class="built_in">Array</span>.prototype</span><br><span class="line"><span class="built_in">Array</span>.__proto__ === <span class="built_in">Function</span>.prototype</span><br><span class="line"><span class="built_in">Array</span>.prototype.__proto__ === <span class="built_in">Object</span>.prototype</span><br><span class="line"><span class="built_in">Function</span>.__proto__ === <span class="built_in">Function</span>.prototype <span class="comment">// Function.prototype 是个方法，是通过继承Object.prototype而产生的,</span></span><br><span class="line"><span class="built_in">Function</span>.__proto__.__proto__ === <span class="built_in">Object</span>.prototype <span class="comment">// Object.prototype 原型链顶端，是对象，但它不是通过Object函数创建的。是浏览器引擎按照ECMAScript规范创造的一个对象</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.__proto__ === <span class="literal">null</span></span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;highlight-wrap&quot;autocomplete=&quot;off&quot; autocorrect=&quot;off&quot; autocapitalize=&quot;off&quot; spellcheck=&quot;false&quot; contenteditable=&quot;true&quot;data-rel=&quot;JS&quot;&gt;
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.zijunfe.cn/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>vue如何与TypeScript搭配使用</title>
    <link href="http://blog.zijunfe.cn/2019/05/07/vue-ts/"/>
    <id>http://blog.zijunfe.cn/2019/05/07/vue-ts/</id>
    <published>2019-05-07T09:02:38.000Z</published>
    <updated>2019-05-11T09:20:59.254Z</updated>
    
    <content type="html"><![CDATA[<p>最近真的陷入了TypeScript无法自拔，我甚至有一种感觉ts可能会成为前端必须要掌握的一项技术(就像现在前端从业者必须得掌握三大框架之一一样)。</p><p>但现在使用vue+TypeScript来开发项目的其实还是比较少的，<code>Vue</code>的作者尤雨溪在知乎上回答过这么一个问题<a href="https://www.zhihu.com/question/310485097/answer/591869966" target="_blank" rel="noopener">TypeScript 不适合在 vue 业务开发中使用吗？</a>,根据他本人的回答，现在的vue2.x版本对TS的支持是远不如React和Angular的，所以在即将发布的vue3.0要加强这一块。</p><p>但是因为<code>vue-class-component</code>与<code>vue-property-decorator</code>(前者的升级版本，加入了Vue，Watch，Emit等功能)的存在，现在使用TS+vue来写项目也不是什么问题，虽然还有些稍许的bug，不过无伤大雅</p><p>在前面的博客里我介绍过如何<a href="/2019/04/24/vuex/">使用TypeScript如何搭建store文件夹</a>，所以这篇博文主要做一个用JS与TS编写vue文件的区别。(引入的是<code>vue-property-decorator</code>，全部介绍完基本上是不可能的，这里结束的是平时用的多的)</p><a id="more"></a><h4 id="data-computed-methods"><a href="#data-computed-methods" class="headerlink" title="#data,computed,methods"></a>#data,computed,methods</h4><p>JS写法<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name:<span class="string">'HelloWorld'</span>,</span><br><span class="line">    data()&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            bar:<span class="string">'hello'</span>,</span><br><span class="line">            foo:<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed:&#123;</span><br><span class="line">        comBar()&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.bar+<span class="string">'world'</span></span><br><span class="line">        &#125;</span><br><span class="line">        comFoo:&#123;</span><br><span class="line">            <span class="keyword">get</span>:function()&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.foo+<span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span>:function(newVal)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(newVal)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        handleFn()&#123;</span><br><span class="line">            <span class="comment">// ...do something</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><p>TS写法<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="TS"><figure class="iseeu highlight /ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component,Vue&#125; <span class="keyword">from</span> <span class="string">'vue-property-decorator'</span>;</span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">    name:<span class="string">'HelloWorld'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> HelloWorld <span class="keyword">extends</span> Vue &#123;</span><br><span class="line">    bar:<span class="built_in">string</span> = <span class="string">'hello'</span>;</span><br><span class="line">    foo:<span class="built_in">number</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">get</span> comBar():<span class="built_in">string</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.bar + <span class="string">'world'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> comBar(val:<span class="built_in">string</span>)&#123;</span><br><span class="line">        <span class="comment">// 注意，这里不能标返回值类型，就算写void也不行</span></span><br><span class="line">        <span class="built_in">console</span>.log(val)</span><br><span class="line">    &#125;</span><br><span class="line">    handleFn():voids&#123;</span><br><span class="line">        <span class="comment">//...do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><blockquote><p><code>@Component({options})</code> 中接受的options就是传统的配置，<code>mixin</code>,自定义指令,子组件的注册都要在这里声明</p></blockquote><h4 id="watch"><a href="#watch" class="headerlink" title="#watch"></a>#watch</h4><p>JS写法<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    watch:&#123;</span><br><span class="line">        <span class="string">'foo'</span>:&#123;</span><br><span class="line">            handler:<span class="function"><span class="keyword">function</span>(<span class="params">newVal,oldVal</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(newVal,oldVal)</span><br><span class="line">            &#125;,</span><br><span class="line">            deep:<span class="literal">true</span>, <span class="comment">// 开启深度监听</span></span><br><span class="line">            immediate:<span class="literal">true</span> <span class="comment">// 该回调(handler函数)将会在侦听开始之后被立即调用</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><p>TS写法<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="TS"><figure class="iseeu highlight /ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Vue,Watch,Component&#125; <span class="keyword">from</span> <span class="string">'vue-property-decorator'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> HelloWorld <span class="keyword">extends</span> Vue &#123;</span><br><span class="line">    <span class="meta">@Watch</span>(<span class="string">'foo'</span>,&#123;deep:<span class="literal">true</span>,immediate:<span class="literal">true</span>&#125;)</span><br><span class="line">    onWatchFoo(newVal:<span class="built_in">string</span>,oldVal:<span class="built_in">string</span>)&#123;</span><br><span class="line">        <span class="comment">// 监听的方法名是可以自定义的</span></span><br><span class="line">        <span class="comment">// do something...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><h4 id="props-directives"><a href="#props-directives" class="headerlink" title="#props #directives"></a>#props #directives</h4><p>JS写法<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name:<span class="string">'childComponent'</span>,</span><br><span class="line">    props:&#123;</span><br><span class="line">        bar:<span class="built_in">Boolean</span>,</span><br><span class="line">        foo:&#123;</span><br><span class="line">            type:<span class="built_in">String</span>,</span><br><span class="line">            defalut:<span class="string">'abc'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        obj:&#123;</span><br><span class="line">            type:<span class="built_in">Object</span>,</span><br><span class="line">            <span class="keyword">default</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    a:<span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            required:<span class="literal">true</span> <span class="comment">// 定义该prop是否是必填项</span></span><br><span class="line">            validator:<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">                <span class="comment">// 自定义验证函数 return出来一个boolean值</span></span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">Object</span>.keys(values).includes(<span class="string">'a'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    directives:&#123;</span><br><span class="line">        focus:&#123;</span><br><span class="line">            inserted:<span class="function"><span class="keyword">function</span>(<span class="params">el,binding,vnode,oldVnode</span>)</span>&#123;</span><br><span class="line">                <span class="comment">// el:指令所绑定的元素，可以用来直接操作DOM</span></span><br><span class="line">                el.focus();</span><br><span class="line">                <span class="comment">// binding:一个对象，包括以下属性</span></span><br><span class="line">                <span class="comment">// name: 指令名--focus</span></span><br><span class="line">                <span class="comment">// value： 指令的绑定值，例如v-my-directives="1+1"中，value的值为2</span></span><br><span class="line">                <span class="comment">// oldValue：指令绑定的前一个值。仅在update和componentUpdated钩子中可用。无论值是否改变都可用</span></span><br><span class="line">                <span class="comment">// expression：字符串形式的指令表达式。例如v-my-directives="1+1"中，表达式为‘1+1’</span></span><br><span class="line">                <span class="comment">// arg：传给指令的参数，例如 v-my-directives:foo='...'中,参数为‘foo’</span></span><br><span class="line">                <span class="comment">// modifiers：一个包含修饰符的对象。例如：v-my-directives.stop.prevent中，修饰符对象为&#123;stop:true,prevent:true&#125;</span></span><br><span class="line">                <span class="keyword">let</span> &#123;name,value,oldValue,expression,arg,modifiers&#125; = binding;</span><br><span class="line">                <span class="comment">// vnode: Vue 编译生成的虚拟节点</span></span><br><span class="line">                <span class="comment">// oldVnode：上一个虚拟节点，仅在update和componentUpdated钩子中使用</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><p>TS写法<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="TS"><figure class="iseeu highlight /ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Vue,Component,Prop&#125; <span class="keyword">from</span> <span class="string">'vue-property-decorator'</span>;</span><br><span class="line"><span class="comment">// 第一种你可以在在@Component里</span></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">    props:&#123;</span><br><span class="line">        bar:&#123;</span><br><span class="line">            <span class="keyword">type</span>:<span class="built_in">Boolean</span>,</span><br><span class="line">            <span class="keyword">default</span>:<span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    directives:&#123;</span><br><span class="line">        focus:&#123;</span><br><span class="line">            inserted:<span class="function"><span class="keyword">function</span>(<span class="params">el,binding,vnode,oldvnode</span>)</span>&#123;</span><br><span class="line">                el.focus()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 第二种使用@Prop的方式</span></span><br><span class="line"><span class="keyword">interface</span> ObjProp &#123;</span><br><span class="line">    a:<span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Component</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> HelloWorld <span class="keyword">extends</span> Vue &#123;</span><br><span class="line">    <span class="meta">@Prop</span>(&#123;<span class="keyword">default</span>:<span class="literal">false</span>&#125;)</span><br><span class="line">    bar!:<span class="built_in">boolean</span> <span class="comment">//!: 表示强制解析，告诉ts我这里一定有值 如果没有写！，虽然不会报错但是代码会有红线提示</span></span><br><span class="line">    <span class="meta">@Prop</span>(</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">default</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;msg:<span class="string">'haha3'</span>&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      required:<span class="literal">true</span>,</span><br><span class="line">      validator:<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.keys(value).includes(<span class="string">'a'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">    obj!:ObjProp</span><br><span class="line">    <span class="comment">// 好像直接写一个&#123;&#125;作为默认值也没问题</span></span><br><span class="line">    obj!:&#123;</span><br><span class="line">        a:<span class="built_in">number</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><h3 id="Model"><a href="#Model" class="headerlink" title="@Model"></a>@Model</h3><blockquote><p>前提条件，在父组件中，对子组件使用了<code>v-mode=&quot;checked&quot;</code></p></blockquote><p>父组件<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">checkbox</span> <span class="attr">v-mode</span>=<span class="string">"checked"</span> &gt;</span><span class="tag">&lt;/<span class="name">checkbox</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><p>子组件<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">:checked</span>=<span class="string">"checked"</span> @<span class="attr">change</span>=<span class="string">"change"</span>/&gt;</span></span><br></pre></td></tr></table></figure></div></p><p>JS写法<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子组件中</span></span><br><span class="line"><span class="keyword">export</span> defalut &#123;</span><br><span class="line">    <span class="comment">// model 参数为2.2.0新增，允许一个自定义组件在使用v-model时定制prop和event</span></span><br><span class="line">    model:&#123;</span><br><span class="line">        prop:<span class="string">"checked"</span>,</span><br><span class="line">        event:<span class="string">"change"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    props:&#123;</span><br><span class="line">        checked:<span class="built_in">Boolean</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        change:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.$emit(<span class="string">'change'</span>,e.target.checked)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><p>TS写法<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="TS"><figure class="iseeu highlight /ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Vue,Component,Model,Emit&#125; <span class="keyword">from</span> <span class="string">"vue-property-decorator"</span>;</span><br><span class="line"><span class="meta">@Component</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> HelloWorld <span class="keyword">extends</span> Vue &#123;</span><br><span class="line">    <span class="meta">@Model</span>(<span class="string">'checked'</span>,&#123;<span class="keyword">type</span>:<span class="built_in">Boolean</span>&#125;)</span><br><span class="line">    checked!:<span class="built_in">boolean</span>,</span><br><span class="line">    <span class="meta">@Emit</span>(<span class="string">'change'</span>)</span><br><span class="line">    change(e:MouseEvent)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><h3 id="Emit"><a href="#Emit" class="headerlink" title="@Emit"></a>@Emit</h3><p>父组件<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">add-component</span> @<span class="attr">on-add</span>=<span class="string">"addFunction"</span>&gt;</span><span class="tag">&lt;/<span class="name">add-component</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><p>有一个可以做加减法的子组件,如下<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"onSub"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">tepe</span>=<span class="string">"test"</span> <span class="attr">v-model</span>=<span class="string">"count"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"onAdd"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><p>JS写法</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            count:<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    name:<span class="string">'addcomponent'</span>,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        onSub()&#123;</span><br><span class="line">            <span class="keyword">this</span>.$emit(<span class="string">'on-sub'</span>,<span class="keyword">this</span>.count)</span><br><span class="line">        &#125;,</span><br><span class="line">        onAdd()&#123;</span><br><span class="line">            <span class="keyword">this</span>.$emit(<span class="string">'on-add'</span>,<span class="keyword">this</span>.count)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>TS写法<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="TS"><figure class="iseeu highlight /ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Vue,Component,Emit&#125; <span class="keyword">from</span> <span class="string">'vue-property-decorator'</span>;</span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">    name:<span class="string">'addcomponent'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> AddComponent <span class="keyword">extends</span> Vue &#123;</span><br><span class="line">    count:numer = <span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Emit</span>() <span class="comment">// 如果父组件传过来的方法是 on-add 那么，@Emit里可以省略方法名</span></span><br><span class="line">    onAdd()&#123;</span><br><span class="line">        <span class="keyword">this</span>.count += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.count <span class="comment">// 通过return的方式，在父组件的方法中才能在event中拿到值</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Emit</span>(<span class="string">'otherFnName'</span>)</span><br><span class="line">    onSub()&#123;</span><br><span class="line">        <span class="keyword">this</span>.count -=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.count</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><h3 id="Provide-Inject"><a href="#Provide-Inject" class="headerlink" title="@Provide @Inject"></a>@Provide @Inject</h3><p>通常<code>provide</code>与<code>inject</code>是配合使用的，一般使用在插件与组件库中，在父组件中通过<code>provide</code>提供一些数据，他的所有子组件，都能都通过<code>inject</code>注入到自己的组件中，并且通过<code>this</code>来调用。</p><blockquote><p><code>provide：Object | () =&gt; Object</code><br><code>inject：Array&lt;string&gt; | { [key: string]: string | Symbol | Object }</code></p></blockquote><p>JS用法<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name:<span class="string">"father-component"</span>,</span><br><span class="line">    provide:&#123;</span><br><span class="line">        bar:<span class="number">1</span>,</span><br><span class="line">        foo:<span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="comment">// 任意子组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    inject:[<span class="string">'bar'</span>,<span class="string">'foo'</span>]</span><br><span class="line">    <span class="comment">// 如果需要定义默认值</span></span><br><span class="line">    inject:&#123;</span><br><span class="line">        bar:&#123;</span><br><span class="line">            <span class="keyword">default</span>:<span class="string">'heihei'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        foo1:&#123;</span><br><span class="line">            form:<span class="string">'foo'</span>, <span class="comment">// 声明从不同名字的属性注入</span></span><br><span class="line">            defalut:<span class="string">'haha'</span> <span class="comment">// 非原始属性，已工厂方法返回 ()=&gt;[1,2,3]</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><p>TS用法<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="TS"><figure class="iseeu highlight /ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="keyword">import</span> &#123;Vue,Component,Provide&#125; <span class="keyword">from</span> <span class="string">'vue-property-decorator'</span>;</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> Father <span class="keyword">extends</span> Vue &#123;</span><br><span class="line">    <span class="meta">@Provide</span>()</span><br><span class="line">    foo = <span class="string">"hello vue"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="keyword">import</span> &#123;Vue,Component,Inject&#125; <span class="keyword">from</span> <span class="string">'vue-property-decorator'</span>;</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> Child <span class="keyword">extends</span> Vue &#123;</span><br><span class="line">    <span class="meta">@Inject</span>()</span><br><span class="line">    foo !:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><p>综上所写，使用TS与使用JS编写vue文件的区别就全部罗列完了</p><p>但应该还有很多遗漏的点，如果你有什么补充，欢迎在留言区评论。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近真的陷入了TypeScript无法自拔，我甚至有一种感觉ts可能会成为前端必须要掌握的一项技术(就像现在前端从业者必须得掌握三大框架之一一样)。&lt;/p&gt;
&lt;p&gt;但现在使用vue+TypeScript来开发项目的其实还是比较少的，&lt;code&gt;Vue&lt;/code&gt;的作者尤雨溪在知乎上回答过这么一个问题&lt;a href=&quot;https://www.zhihu.com/question/310485097/answer/591869966&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;TypeScript 不适合在 vue 业务开发中使用吗？&lt;/a&gt;,根据他本人的回答，现在的vue2.x版本对TS的支持是远不如React和Angular的，所以在即将发布的vue3.0要加强这一块。&lt;/p&gt;
&lt;p&gt;但是因为&lt;code&gt;vue-class-component&lt;/code&gt;与&lt;code&gt;vue-property-decorator&lt;/code&gt;(前者的升级版本，加入了Vue，Watch，Emit等功能)的存在，现在使用TS+vue来写项目也不是什么问题，虽然还有些稍许的bug，不过无伤大雅&lt;/p&gt;
&lt;p&gt;在前面的博客里我介绍过如何&lt;a href=&quot;/2019/04/24/vuex/&quot;&gt;使用TypeScript如何搭建store文件夹&lt;/a&gt;，所以这篇博文主要做一个用JS与TS编写vue文件的区别。(引入的是&lt;code&gt;vue-property-decorator&lt;/code&gt;，全部介绍完基本上是不可能的，这里结束的是平时用的多的)&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://blog.zijunfe.cn/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>记第一次去深大</title>
    <link href="http://blog.zijunfe.cn/2019/05/05/diary1/"/>
    <id>http://blog.zijunfe.cn/2019/05/05/diary1/</id>
    <published>2019-05-05T07:54:30.000Z</published>
    <updated>2019-05-05T09:37:34.066Z</updated>
    
    <content type="html"><![CDATA[<p>期待很久的五一假期<br>已经过完了╥﹏╥…<br>不出意外的,大部分时间还是宅在家里玩游戏<br>为什么不想出门呢？<br><strong>第一:</strong> 比较反感去人多的地方<br><strong>第二:</strong> 这种天气宅着真的很舒服，如何形容呢，窗外下着忽大忽小的雨，家里蓝胖子又在沙发上打盹，温度适合穿着单薄的羽织，无论是窝在被子里，还是在游戏世界里激情厮杀都很舒服，玩累了就抱着蓝胖子一顿狂撸，不得不说惬意十分了。<br><a id="more"></a></p><div style="width:300px;margin:0 auto;"><img src="/2019/05/05/diary1/cat.png" alt="猫猫"></div><br><p style="text-align:center;font-size:10px;color:#666">总是在睡觉的蓝胖子</p><br>然鹅…<br>总是在家里宅着，身上会长蘑菇吧<br><br>于是，选了个不下雨的下午，起身去了深圳大学。离家里不远，2站地铁就到了，步行10分钟，就能到深大的北门。<br><br>也许第一次来，也许不是深大的学生，我踏进大门后居然有点点紧张(我也不知道我紧张个锤子)<br><br>因为深大就在深南大道的路边，不同于马路上呼啸而过的汽车，深大就显得很安静，让人一下就放松下来，假期的校园没有什么人，但有不少带小孩过来散步的家庭。<br><br>沿着大路往下走，左拐进入了一个田径场，去观众席上坐着，看着田径场上跑步的陌生人，我陷入了自己大学生活的回忆中，记忆中我离开大学的最后一件事也是像这样，坐在观众席上，看着跑步的陌生人发呆。何曾几时，我也是校园里无忧无虑的一名学子。真怀念那段时光讷…<br><div style="width:600px;margin:0 auto;"><img src="/2019/05/05/diary1/playground.png" alt="操场"></div><br><p style="text-align:center;font-size:10px;color:#666">深大北门的田径场</p><br><br>离开了田径场，随便挑选一条路，继续往下走，深大的绿化做的真的不错，有路的地方旁边一定有树。<br><div style="width:400px;margin:0 auto;"><img src="/2019/05/05/diary1/img1.png" alt="小路"></div><br><p style="text-align:center;font-size:10px;color:#666">不知名的小路1</p><br><br>在这里上学一定很辛福吧，每条路都很适合闲暇时光的闲逛。(当年咋就不加点油，考个深大呢！)<br><div style="width:400px;margin:0 auto;"><img src="/2019/05/05/diary1/img2.png" alt="小路"></div><br><p style="text-align:center;font-size:10px;color:#666">不知名的小路2</p><br><br>然后，在乱走一通后，路过了深大的宿舍楼，在宿舍楼下发现了一只花不溜秋的小猫，和他的小食堂。小猫当时似乎在草丛里上厕所…真的非常不好意思偷拍了你…<br><div style="width:400px;margin:0 auto;"><br><img src="/2019/05/05/diary1/img3.png" alt="小猫"><br><img src="/2019/05/05/diary1/img4.png" alt="小猫"><br></div><br><p style="text-align:center;font-size:10px;color:#666">小花猫和他的食堂</p><br><br>继续往下走还看到了一只非常漂亮的小白猫，忘记拍照了，真可惜。相比外面的小野猫，深大的猫咪似乎都不怎么怕人，猫咪们能在深大生活也是一件幸运的事吧，毕竟照顾他们的都是一群心善的年轻人。<br><br>漫无目的的继续走，好像来到了深大的图书馆，从外面看建筑比较老式的了，没有进去看，偶尔有学生进出，果然每个学校都有学霸即使在假期还继续在图书馆里奋斗。汉京集团的大楼就矗立在不远处，那几个 “I love SZ”大字，从这个角度看好像显的更加年轻呢。<br><div style="width:600px;margin:0 auto;"><img src="/2019/05/05/diary1/img5.png" alt="图书馆"></div><br><p style="text-align:center;font-size:10px;color:#666">图书馆</p><br><br>离开了图书馆后，步行来到了一个人工湖的旁边，这里男女成双出现的概率大了许多，不得不说，每个学校的人工湖都是小情侣们的约会圣地，风景漂亮，散步在湖边的小路上说说笑笑，都是爱情的样子。比较惊讶的是，这里有很多黑天鹅。上回见到黑天鹅还是几年前去厦大的时候，难道黑天鹅和名校是标配吗？<br><div style="width:600px;margin:0 auto;"><img src="/2019/05/05/diary1/img6.png" alt="人工湖"></div><br><p style="text-align:center;font-size:10px;color:#666">深大的湖</p><br><div style="width:600px;margin:0 auto;"><img src="/2019/05/05/diary1/img7.png" alt="黑天鹅"></div><br><p style="text-align:center;font-size:10px;color:#666">黑天鹅</p><br><br>在人工湖旁的凉亭坐了一会，心里想着这个季节是大学毕业生们拍摄毕业照，喝毕业酒的时候吧。真好呢。<br><br>深大真的很美，也很安静。适合散步放松心情。<br><br>然后天差不多要黑了，起身拍了拍屁股上的灰，就寻路回家了。<br><br>——————<em>我是分割线</em>——————<br><br>怀念过往像香烟一样，会让人沉迷。<br><br>所以，不要在过往中无法自拔，也不要割断自己的过往。将美好的过往像美酒一样密封，常年埋藏在地下。或在夜深的时候，或在孤身一人的时候，或在疲惫于生活的时候，将美酒拿出，取其一瓢，慢慢品尝。<br><br>所以，偶尔怀念过往，让自己的灵魂暂时脱离这个车水马龙的世界，回到那段最珍贵的时光，回到那些最难忘的人们的身旁，一起嬉笑，一起挥霍时光。<br><br><div style="text-align:center;font-weight:bold;font-size:24px;">如果有时光机，你最想回到哪段时光呢？</div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;期待很久的五一假期&lt;br&gt;已经过完了╥﹏╥…&lt;br&gt;不出意外的,大部分时间还是宅在家里玩游戏&lt;br&gt;为什么不想出门呢？&lt;br&gt;&lt;strong&gt;第一:&lt;/strong&gt; 比较反感去人多的地方&lt;br&gt;&lt;strong&gt;第二:&lt;/strong&gt; 这种天气宅着真的很舒服，如何形容呢，窗外下着忽大忽小的雨，家里蓝胖子又在沙发上打盹，温度适合穿着单薄的羽织，无论是窝在被子里，还是在游戏世界里激情厮杀都很舒服，玩累了就抱着蓝胖子一顿狂撸，不得不说惬意十分了。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://blog.zijunfe.cn/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>看懂vue源码-理解数据双向绑定的实现</title>
    <link href="http://blog.zijunfe.cn/2019/04/29/vue-databind/"/>
    <id>http://blog.zijunfe.cn/2019/04/29/vue-databind/</id>
    <published>2019-04-29T08:31:47.000Z</published>
    <updated>2019-04-30T08:09:32.933Z</updated>
    
    <content type="html"><![CDATA[<p>如果你是一名前端从业者，并且在简历上写了会使用vue框架，那么在拿着这份简历去面试的时候，面试官有很大的概率会问你vue的数据双向绑定是如何实现的。<br>打开goole，输入vue双向绑定，有非常多优秀的博主已经对vue数据双向绑定作了一个全方位的刨析，阅读之后，你会大概了解，双向绑定涉及到javascript的核心api是<code>Object.defineProperty</code>,通过<code>set</code>与<code>get</code>这俩个存取描述符来监听数据的实时改变，并且在对模版作出相应改变。<br>那么为了更加了解vue是如何实现数据双向绑定的，我花了一下午的时间阅读vue的源码，并将我的对vue实现数据双向绑定的方式理解记录了下来。<br><a id="more"></a></p><h4 id="打开vue源码目录"><a href="#打开vue源码目录" class="headerlink" title="打开vue源码目录"></a>打开vue源码目录</h4><p><img src="/2019/04/29/vue-databind/vue1.jpg" alt="vue源码目录"><br>这几个文件夹都是分别负责什么的，我们暂且不管(<del>其实是我不知道</del>),我们找到入口文件<code>src/core/index.js</code>。<br>看到一大推第一次见并且不熟的代码，谁都会感动头疼。所以我看源码的基本方针是</p><blockquote><ul><li>不清楚应用方法的具体实现，先靠他的命名猜一下(所以英文好很关键，哭)。</li><li>如果有一大堆<code>if..else-if..else</code>,先找到按正常流程走的代码,其他分支先放一放…</li><li>不用钻牛角尖，看的懂的代码就好好理解，看不懂的了解个大概足已！看源码的目的是更好的理解框架的实现原理，并不是要把整个框架吃透(<del>关键也吃不透啊，vue源代码那么多，咱也不是啥大神，难道看不懂去问尤雨溪吗，咱也不敢问讷</del>)</li></ul></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/index.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'./instance/index'</span> <span class="comment">//从Vue这个关键词来看，这个应该是vue的核型方法</span></span><br><span class="line"><span class="keyword">import</span> &#123; initGlobalAPI &#125; <span class="keyword">from</span> <span class="string">'./global-api/index'</span> <span class="comment">// 初始化全局API？</span></span><br><span class="line"><span class="keyword">import</span> &#123; isServerRendering &#125; <span class="keyword">from</span> <span class="string">'core/util/env'</span> <span class="comment">// 判断是不是ssr？</span></span><br><span class="line"><span class="keyword">import</span> &#123; FunctionalRenderContext &#125; <span class="keyword">from</span> <span class="string">'core/vdom/create-functional-component'</span></span><br><span class="line"><span class="comment">// 调用方法咯，初始化全局变量</span></span><br><span class="line">initGlobalAPI(Vue)</span><br><span class="line"><span class="comment">// 给vue原型添加$isServer属性 --当前 Vue 实例是否运行于服务器。</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(Vue.prototype, <span class="string">'$isServer'</span>, &#123;</span><br><span class="line">  <span class="keyword">get</span>: isServerRendering</span><br><span class="line">&#125;)</span><br><span class="line">// 给vue原型添加$ssrContext 不认识这玩意</span><br><span class="line">Object.defineProperty(Vue.prototype, '$ssrContext', &#123;</span><br><span class="line">  <span class="keyword">get</span> () &#123;</span><br><span class="line">    <span class="comment">/* istanbul ignore next */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.$vnode &amp;&amp; <span class="keyword">this</span>.$vnode.ssrContext</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不认识</span></span><br><span class="line"><span class="comment">// expose FunctionalRenderContext for ssr runtime helper installation</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(Vue, <span class="string">'FunctionalRenderContext'</span>, &#123;</span><br><span class="line">  value: FunctionalRenderContext</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Vue.version = <span class="string">'__VERSION__'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Vue</span><br></pre></td></tr></table></figure></div><p>我就是以上面这种方式来一点点看源码的。根据上面得到的提示，我们应该去看看<code>./instance/index</code>里写了啥。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/instance/index</span></span><br><span class="line"><span class="keyword">import</span> &#123; initMixin &#125; <span class="keyword">from</span> <span class="string">'./init'</span></span><br><span class="line">...</span><br><span class="line">initMixin(Vue)</span><br><span class="line">...</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Vue</span><br></pre></td></tr></table></figure></div></p><p>其他初始化函数我们先不看，从<code>initMixin</code>这个名字和第一个引入的骄傲位置来说，他应该和我们要找的<code>data</code>属性有一腿。所以我们打开<code>./init</code>看一下。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/instance/init</span></span><br><span class="line"><span class="keyword">import</span> &#123; initState &#125; <span class="keyword">from</span> <span class="string">'./state'</span></span><br><span class="line">...</span><br><span class="line">initState(vm)</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div></p><p>从命名上来讲，<code>state</code>应该是与<code>data</code>联系更多的，也许是因为在react里，初始化数据就叫作<code>state</code>吧，所以我们打开<code>./state</code>找到<code>initState</code>方法<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/instance/state</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initState</span> (<span class="params">vm: Component</span>) </span>&#123;</span><br><span class="line">  vm._watchers = [] <span class="comment">// 看起来像清空一个观察者队列</span></span><br><span class="line">  <span class="keyword">const</span> opts = vm.$options</span><br><span class="line">  <span class="keyword">if</span> (opts.props) initProps(vm, opts.props) <span class="comment">// 初始化props参数</span></span><br><span class="line">  <span class="keyword">if</span> (opts.methods) initMethods(vm, opts.methods) <span class="comment">// 初始化methods参数</span></span><br><span class="line">  <span class="keyword">if</span> (opts.data) &#123;</span><br><span class="line">    initData(vm) <span class="comment">// 如果有data参数，初始化data参数</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    observe(vm._data = &#123;&#125;, <span class="literal">true</span> <span class="comment">/* asRootData */</span>) <span class="comment">// 如果没有，触发observe方法(这个方法很关键！)，给一个&#123;&#125;作为默认值并且作为rootdata</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (opts.computed) initComputed(vm, opts.computed) <span class="comment">// 初始化computed参数</span></span><br><span class="line">  <span class="keyword">if</span> (opts.watch &amp;&amp; opts.watch !== nativeWatch) &#123;</span><br><span class="line">      <span class="comment">// watch存在并且 这个watch不是Firefox(火狐浏览器)在Object.prototype上有一个“监视”功能,初始化</span></span><br><span class="line">    initWatch(vm, opts.watch)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><p>从上面的代码中，我们看到很多脸熟的代码了，并且终于找到我们想找的<code>data</code>属性，顺水推舟继续往下走吧，找到<code>initData</code>的方法定义。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initData</span> (<span class="params">vm: Component</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> data = vm.$options.data</span><br><span class="line">  data = vm._data = <span class="keyword">typeof</span> data === <span class="string">'function'</span></span><br><span class="line">    ? getData(data, vm)</span><br><span class="line">    : data || &#123;&#125;</span><br><span class="line">    <span class="comment">// 判断data是不是个函数，如果时执行getData（往一个targetStack push进去？）</span></span><br><span class="line">  <span class="keyword">if</span> (!isPlainObject(data)) &#123;</span><br><span class="line">    <span class="comment">// isPlainObject判断data是不是个对象</span></span><br><span class="line">    data = &#123;&#125;</span><br><span class="line">    process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; warn(</span><br><span class="line">      <span class="string">'data functions should return an object:\n'</span> +</span><br><span class="line">      <span class="string">'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function'</span>,</span><br><span class="line">      vm</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// proxy data on instance</span></span><br><span class="line">  <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(data)</span><br><span class="line">  <span class="keyword">const</span> props = vm.$options.props</span><br><span class="line">  <span class="keyword">const</span> methods = vm.$options.methods</span><br><span class="line">  <span class="keyword">let</span> i = keys.length</span><br><span class="line">  <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">    <span class="comment">// 判断data里定义的key是否与methods和props的冲突</span></span><br><span class="line">    <span class="keyword">const</span> key = keys[i]</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (methods &amp;&amp; hasOwn(methods, key)) &#123;</span><br><span class="line">        warn(</span><br><span class="line">          <span class="string">`Method "<span class="subst">$&#123;key&#125;</span>" has already been defined as a data property.`</span>,</span><br><span class="line">          vm</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (props &amp;&amp; hasOwn(props, key)) &#123;</span><br><span class="line">      process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; warn(</span><br><span class="line">        <span class="string">`The data property "<span class="subst">$&#123;key&#125;</span>" is already declared as a prop. `</span> +</span><br><span class="line">        <span class="string">`Use prop default value instead.`</span>,</span><br><span class="line">        vm</span><br><span class="line">      )</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!isReserved(key)) &#123;</span><br><span class="line">      proxy(vm, <span class="string">`_data`</span>, key)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// observe data</span></span><br><span class="line">  observe(data, <span class="literal">true</span> <span class="comment">/* asRootData */</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><p>到这里，我们已经很接近实现数据双向绑定的函数了，那就<code>observe</code>，接下来去<code>../observer/index</code>里看看，<code>observe</code>函数到底写了些什么东西。<br>在<code>export function observe()</code>的函数里，return出来的是一个名为<code>Observer</code>的类<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/observer/index.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">  value: any;</span><br><span class="line">  dep: Dep;</span><br><span class="line">  vmCount: number; <span class="comment">// number of vms that have this object as root $data</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span> (value: any) &#123;</span><br><span class="line">    <span class="keyword">this</span>.value = value</span><br><span class="line">    <span class="keyword">this</span>.dep = <span class="keyword">new</span> Dep()</span><br><span class="line">    <span class="keyword">this</span>.vmCount = <span class="number">0</span></span><br><span class="line">    def(value, <span class="string">'__ob__'</span>, <span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(value)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (hasProto) &#123;</span><br><span class="line">        protoAugment(value, arrayMethods)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        copyAugment(value, arrayMethods, arrayKeys)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.observeArray(value)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.walk(value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Walk through all properties and convert them into</span></span><br><span class="line"><span class="comment">   * getter/setters. This method should only be called when</span></span><br><span class="line"><span class="comment">   * value type is Object.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  walk (obj: <span class="built_in">Object</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(obj)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class="line">      defineReactive(obj, keys[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Observe a list of Array items.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  observeArray (items: <span class="built_in">Array</span>&lt;any&gt;) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = items.length; i &lt; l; i++) &#123;</span><br><span class="line">      observe(items[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><p>当我们调用<code>new Oberver(value)</code>的时候，会执行<code>this.walk(value)</code>这个方法，看方法里的作用应该是，遍历<code>value</code>,执行<code>defineReactive</code>方法，而在<code>defineReactive</code>方法里主要就是通过<code>Object.defineProperty</code>方法来定义响应式数据。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/observer/index.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params"> obj: Object,</span></span></span><br><span class="line"><span class="function"><span class="params"> key: string,</span></span></span><br><span class="line"><span class="function"><span class="params"> val: any,</span></span></span><br><span class="line"><span class="function"><span class="params"> customSetter?: ?Function,</span></span></span><br><span class="line"><span class="function"><span class="params"> shallow?: boolean</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> dep = <span class="keyword">new</span> Dep()</span><br><span class="line">  ...</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">      ...</span><br><span class="line">      <span class="keyword">get</span>: function reactiveGetter () &#123;</span><br><span class="line">        ...</span><br><span class="line">        dep.depend()</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="keyword">set</span>: function reactiveSetter (newVal) &#123;</span><br><span class="line">        ...</span><br><span class="line">        dep.notify()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><p>省略了部分代码后，我们注意到在<code>get</code>和<code>set</code>里分别执行了<code>dep.depend()</code>和<code>dep.notify()</code>,而<code>Dep</code>就是我们常说的订阅发布管理中心，这时候我们来看一张，vue实现数据双向绑定的示例图。<br><img src="/2019/04/29/vue-databind/vue2.png" alt="数据双向绑定的示例图"><br>大概解释一下上图，上图实现的设计模式为 订阅-发布 模式。可以从俩个入口分别说起</p><blockquote><p><strong>1.</strong>从<code>init Data</code>说起，比如我们在vue实例中定义了初始化的<code>data</code>属性，接着会触发<code>new Observer()</code>,<code>data</code>里所有的数据都会通过上面介绍的那样，通过<code>defineReactive</code>这个方法为每一个属性挂载<code>Object.defineProperty</code>(也可以说在<code>get</code>里为每一个属性都添加了一个订阅，在<code>set</code>里做一个通知订阅者的操作),如果触发了<code>setter</code>，也就是在业务代码里改变了<code>data</code>里的值，会通知<code>Watcher</code>，<code>Wathcer</code>更新指令系统对应绑定的<code>data</code>值<br><strong>2.</strong>从编译侧说起，Dom 上通过指令或者双大括号绑定的数据，经过编译以后，会为数据进行添加观察者<code>Watcher</code>，当实例化<code>Watcher</code>的时候 会触发属性的<code>getter</code>方法，此时会调用<code>dep.depend()</code>，并且会将<code>Watcher</code>的依赖收集起来。</p></blockquote><p>那么我们可以看一下<code>dep.depend()</code>和<code>dep.depend()</code><br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/observer/dep.js</span></span><br><span class="line">  depend () &#123;</span><br><span class="line">    <span class="keyword">if</span> (Dep.target) &#123;</span><br><span class="line">      Dep.target.addDep(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  notify () &#123;</span><br><span class="line">    <span class="comment">// stabilize the subscriber list first</span></span><br><span class="line">    <span class="keyword">const</span> subs = <span class="keyword">this</span>.subs.slice()</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; !config.async) &#123;</span><br><span class="line">      <span class="comment">// subs aren't sorted in scheduler if not running async</span></span><br><span class="line">      <span class="comment">// we need to sort them now to make sure they fire in correct</span></span><br><span class="line">      <span class="comment">// order</span></span><br><span class="line">      subs.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.id - b.id)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = subs.length; i &lt; l; i++) &#123;</span><br><span class="line">      subs[i].update()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div></p><p>首先我们得先知道注入到<code>Dep</code>里的一般都是<code>Watcher</code>类，像<code>Dep.target.addDep(this)</code>和<code>subs[i].update()</code>这俩个方法是可以在定义<code>Watcher</code>的文件下找到的。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/observer/watcher.js</span></span><br><span class="line">  addDep (dep: Dep) &#123;</span><br><span class="line">    <span class="keyword">const</span> id = dep.id</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.newDepIds.has(id)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.newDepIds.add(id)</span><br><span class="line">      <span class="keyword">this</span>.newDeps.push(dep)</span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.depIds.has(id)) &#123;</span><br><span class="line">        dep.addSub(<span class="keyword">this</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">  update () &#123;</span><br><span class="line">    <span class="comment">/* istanbul ignore else */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.lazy) &#123;</span><br><span class="line">      <span class="keyword">this</span>.dirty = <span class="literal">true</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.sync) &#123;</span><br><span class="line">      <span class="keyword">this</span>.run()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      queueWatcher(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div></p><p>一系列操作的主要作用就是让<code>Dep</code>与<code>Wathcer</code>建立双向的联系。</p><p><del>代码真是太多了，解释不完，感觉要烂尾了</del></p><p>最后vue有一个很关键的指令解析系统，在<code>src/compiler/directives</code>文件中可以找到<code>v-bind</code>,<code>v-on</code>,<code>v-model</code>相应的源码。能力有限，看不下去了。越挖越深。</p><p><del>说的我自己都乱了</del></p><p>言简意赅的总结一下，<code>Observer</code>就是对<code>data</code>里到所有值进行一个数据劫持，强行给每个数据注入<code>set</code>(能监听到数据改变，没有<code>return</code>)与<code>get</code>(该数据具体呈现出来的值，能<code>return</code>出数据)方法，<code>Observer</code>操作完以后，<code>data</code>可以理解成房子资源。然后<code>Dep</code>是个订阅器（订阅管理中心，可以理解成房地产中介），<code>Watcher</code>是订阅者(有钱买房的人)，<code>Watcher</code>把需求和联系方式通过<code>dep.depend()</code>告诉中介<code>dep</code>，<code>dep</code>中介找到了合适的房子通过<code>dep.notify()</code>打电话通知我们忽悠买房。那<code>Wathcer</code>没有钱之前就是被绑定在dom上的一些数据，通过了<code>v-model</code>,<code>v-test</code>,双大括号等途径赚到了钱（也就是vue的compile编译系统），升级成了一个<code>Wathcer</code>，赚钱和买房总是无穷无尽的，dom发生了更新（比如input事件），赚到钱了就去问中介<code>dep</code>有没有房，同时如果房源发生了变化（data发生了更新），中介<code>dep</code>会通知<code>Wathcer</code>买房不?</p><div style="text-align:center;font-weigth:bold;font-size:20px;">最后祝大家早日能买到房。</div><br><div style="width:200px;margin:0 auto;"><img src="/2019/04/29/vue-databind/vue3.jpg" alt="自闭"></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果你是一名前端从业者，并且在简历上写了会使用vue框架，那么在拿着这份简历去面试的时候，面试官有很大的概率会问你vue的数据双向绑定是如何实现的。&lt;br&gt;打开goole，输入vue双向绑定，有非常多优秀的博主已经对vue数据双向绑定作了一个全方位的刨析，阅读之后，你会大概了解，双向绑定涉及到javascript的核心api是&lt;code&gt;Object.defineProperty&lt;/code&gt;,通过&lt;code&gt;set&lt;/code&gt;与&lt;code&gt;get&lt;/code&gt;这俩个存取描述符来监听数据的实时改变，并且在对模版作出相应改变。&lt;br&gt;那么为了更加了解vue是如何实现数据双向绑定的，我花了一下午的时间阅读vue的源码，并将我的对vue实现数据双向绑定的方式理解记录了下来。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://blog.zijunfe.cn/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>加深了解vuex及使用typescript如何搭建store文件夹</title>
    <link href="http://blog.zijunfe.cn/2019/04/24/vuex/"/>
    <id>http://blog.zijunfe.cn/2019/04/24/vuex/</id>
    <published>2019-04-24T06:49:41.000Z</published>
    <updated>2019-04-29T06:00:53.085Z</updated>
    
    <content type="html"><![CDATA[<p>自从使用vue作为项目开发框架后，vue的全家桶每天都会与我见面，其中vuex更是常客。对于专门作为vue的状态管理模式，我认为这应该是每一位前端从业者都必须深入掌握的一项技能，可是在这段时间的面试中，我问了一些vuex相关的知识，却很少有人回答全面，即使他们的简历上写了3-4年的从业经验。比如以下这些vuex最基础的问题。<br><a id="more"></a></p><ul><li><p>如何调用store.js里的<code>Mutation</code>与<code>Actions</code>里定义的方法？</p><blockquote><p>大部分人回答的都是以通过<code>this.$store.commit</code>或者<code>this.$store.dispatch</code>这种通过调用vue实例中的<code>$store</code>的方式，而且只知道这一种调用方法。其实还有两种方式:1.通过<code>import store from &#39;store.js&#39;</code>的方式引入文件，通过<code>store.commit</code>和<code>store.dispatch</code>的方式调用。2.使用<code>mapActions</code>,<code>mapMutation</code>等辅助函数将组件的methods映射为store对应的方法名。</p></blockquote></li><li><p>使用过vuex的<code>module</code>概念吗？在<code>.vue</code>文件中如何使用<code>module</code>里的<code>Mutation</code>与<code>Actions</code>里定义的方法？</p><blockquote><p>这个基本上就全军覆没了，仅知道vuex有这么一个概念，但项目中没有用过，所以对于模块化的store不了解。<br>对于vuex的<code>module</code>概念，其实真的不难，个人觉得，即使项目中没有用过，但vuex作为我们日常开发中的老朋友，认真了解一下他5个孩子<code>State,Getter,Mutation,Action,Module</code>，从时间成本上来说，也许一个晚上就可以搞定，即使现在项目中使用不到，那未来的项目再碰到至少不会措手不及吧。</p></blockquote></li></ul><p>从以上俩个基础问题可以看出，很多前端对vuex的学习并不深入，觉得能在项目中使用就可以了，毕竟代码不是浮现在页面上的东西，只要功能能正确实现，很少有人对你的代码会有兴趣。这怎么说呢，多少是有点道理的，但是对知识的追求不该止步于实现功能这一步，既然尤雨溪开源了vue这么好的前端框架，如果我们不更加深入了解vuex，是不是对别人的知识成果不尊重呢？</p><h4 id="Vuex到底是什么东西？"><a href="#Vuex到底是什么东西？" class="headerlink" title="Vuex到底是什么东西？"></a>Vuex到底是什么东西？</h4><p>在说vuex之前，可以先了解一下Flux与Redux。每一位前端对<a href>MVC框架</a>与<a href>MVVM框架</a>都不陌生，如果略显遗忘，可以参考阮一峰老师的对这几个框架的<a href="http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html" target="_blank" rel="noopener">解释</a>,简单来说Flux是一种架构思想，专门解决软件的结构问题，而Redux则是将Flux与函数式编程结合在一起,使收Flux启发的简介版Flux。<del>其实这些概念都不重要，随便百度一下就好啦︿(￣︶￣)︿</del><br>按照官方的说法Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。<br>按照惯例放一张官方的图<br><img src="/2019/04/24/vuex/vuex1.jpg" alt="vuex结构图"><br>vuex的五个核心概念<code>State,Getter,Mutation,Action,Module</code>,基本用法我就不再一一列举了，参考<a href="https://vuex.vuejs.org/zh/guide/state.html" target="_blank" rel="noopener">vue官网</a>一定比我介绍的详细。</p><hr><p>以下只介绍一些我个人对这几个概念中比较少用的知识点的罗列。</p><h5 id="State"><a href="#State" class="headerlink" title="State"></a>State</h5><ul><li>如何获取模块内的state<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapState&#125; <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    computed:&#123;</span><br><span class="line">        ...mapState([&#123;</span><br><span class="line">            count:<span class="function"><span class="params">state</span>=&gt;</span>state.moduleName.count</span><br><span class="line">        &#125;])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">or</span><br><span class="line"><span class="keyword">this</span>.$store.state.moduleName.count</span><br></pre></td></tr></table></figure></div></li></ul><h5 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h5><ul><li>如何使用mapState, mapGetters, mapActions 和 mapMutations 这些函数来绑定带命名空间的模块。</li></ul><blockquote><p>在辅助函数第一个参数可以填模块名</p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">...mapGetters(<span class="string">'moduleName'</span>,[<span class="string">'foo'</span>,<span class="string">'bar'</span>])</span><br><span class="line">...mapActions(<span class="string">'moduleName'</span>,[<span class="string">'fn1'</span>,<span class="string">'fn2'</span>])</span><br></pre></td></tr></table></figure></div><blockquote><p>使用 createNamespacedHelpers 创建基于某个命名空间辅助函数</p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; mapState, mapActions &#125; = createNamespacedHelpers(<span class="string">'moduleName'</span>)</span><br><span class="line">...mapGetters(<span class="string">'moduleName'</span>,[<span class="string">'foo'</span>,<span class="string">'bar'</span>])</span><br><span class="line">...mapActions(<span class="string">'moduleName'</span>,[<span class="string">'fn1'</span>,<span class="string">'fn2'</span>])</span><br></pre></td></tr></table></figure></div><blockquote><p>通过<code>this.$store</code>调用,比如现在模块名叫child</p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$store.getters[<span class="string">'child/foo'</span>]</span><br><span class="line"><span class="keyword">this</span>.$store.commit(<span class="string">'child/addCount'</span>,<span class="number">1</span>)</span><br><span class="line"><span class="keyword">this</span>.$store.dispatch(<span class="string">'child/fn'</span>,data)</span><br></pre></td></tr></table></figure></div><ul><li><p>在带命名空间的模块内访问全局内容</p><p>getters有四个参数<code>state,getters,rootState,rootGetters</code>,后面两个是全局内容。<br>actions第一个参数是个object，他里面包含<code>{ dispatch, commit, getters, rootGetters }</code>，最后一个是全局内容。<br>在actions里如果要分发 action 或提交 mutation，将 <code>{ root: true }</code> 作为第三参数传给 dispatch 或 commit 即可。</p></li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dispatch(<span class="string">'someOtherAction'</span>, <span class="literal">null</span>, &#123; <span class="attr">root</span>: <span class="literal">true</span> &#125;) <span class="comment">// -&gt; 'someOtherAction'</span></span><br><span class="line">commit(<span class="string">'someMutation'</span>, <span class="literal">null</span>, &#123; <span class="attr">root</span>: <span class="literal">true</span> &#125;) <span class="comment">// -&gt; 'someMutation'</span></span><br></pre></td></tr></table></figure></div><ul><li>在带命名空间的模块注册全局 action<br>若需要在带命名空间的模块注册全局 action，你可添加 root: true，并将这个 action 的定义放在函数 handler 中。</li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// module/child.js</span></span><br><span class="line">    actions: &#123;</span><br><span class="line">        someAction: &#123;</span><br><span class="line">          root: <span class="literal">true</span>,</span><br><span class="line">          handler (&#123; dispatch, commit, getters, rootGetters &#125;, payload) &#123; ... &#125; <span class="comment">// -&gt; 'someAction'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></div><hr><h4 id="使用Typescript开发的项目如何写vuex的store文件夹"><a href="#使用Typescript开发的项目如何写vuex的store文件夹" class="headerlink" title="使用Typescript开发的项目如何写vuex的store文件夹"></a>使用Typescript开发的项目如何写vuex的store文件夹</h4><p>这个就有意思啦，既然选择了ts代替了js，那么ts的一些特性就要使用起来，于是我写了一个demo。<br>下图是我demo的文件结构，有木有觉得分的很清晰，很详细，哈哈。其中list是一个模块。<br><img src="/2019/04/24/vuex/ts1.jpg" alt="文件目录"><br>接下来就一个一个文件看过去吧。</p><ul><li><code>index.ts</code> store的对外暴露文件<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="TS"><figure class="iseeu highlight /ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line">    <span class="keyword">import</span> Vuex ,&#123;StoreOptions&#125;<span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">    <span class="keyword">import</span> &#123;RootState&#125; <span class="keyword">from</span> <span class="string">'./type'</span>;</span><br><span class="line">    <span class="keyword">import</span> &#123;todolist&#125; <span class="keyword">from</span> <span class="string">'./module/list/index'</span>;</span><br><span class="line">    Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> store: StoreOptions&lt;RootState&gt; = &#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        version:<span class="string">'1.0.0'</span></span><br><span class="line">    &#125;, <span class="comment">//注册全局state</span></span><br><span class="line">    getters:&#123;&#125;, <span class="comment">//注册全局getters</span></span><br><span class="line">    mutations: &#123;&#125;, <span class="comment">//注册全局mutations</span></span><br><span class="line">    actions: &#123;&#125;, <span class="comment">//注册全局actions</span></span><br><span class="line">    modules:&#123;</span><br><span class="line">        todolist</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store&lt;RootState&gt;(store);</span><br></pre></td></tr></table></figure></div></li></ul><blockquote><p>如果你对<code>StoreOptions&lt;RootState&gt;</code>这种写法有疑问，你可以参考vuex的源代码，在<code>vuex/types/index.d.ts</code>文件中有相关介绍。并且你需要了解ts的泛型与类型变量。</p></blockquote><ul><li><p><code>type.ts</code> 暴露全局state的接口，如果要新添state，要提前在这里定义类型，因为类型检查器会检查接口里的属性</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="TS"><figure class="iseeu highlight /ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> RootState &#123;</span><br><span class="line">    version: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p><code>module/list/index.ts</code> store模块list的对外暴露文件</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="TS"><figure class="iseeu highlight /ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Module&#125; <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;ListState&#125; <span class="keyword">from</span> <span class="string">'./type'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;getters&#125; <span class="keyword">from</span> <span class="string">'./getters'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;mutations&#125; <span class="keyword">from</span> <span class="string">'./mutations'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;actions&#125; <span class="keyword">from</span> <span class="string">'./actions'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;RootState&#125; <span class="keyword">from</span> <span class="string">'../../type'</span></span><br><span class="line"><span class="keyword">const</span> namespaced:<span class="built_in">boolean</span> = <span class="literal">true</span>; <span class="comment">//开启命名空间</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> state:ListState = &#123;</span><br><span class="line">    listArr:[],</span><br><span class="line">    foo:<span class="string">'hello'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> todolist:Module&lt;ListState,RootState&gt; = &#123;</span><br><span class="line">    namespaced,</span><br><span class="line">    state,</span><br><span class="line">    getters,</span><br><span class="line">    mutations,</span><br><span class="line">    actions</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ul><blockquote><p>如果你对<code>namespaced</code>有疑问，可以参看vue的官网对命名空间的解释，<a href="https://vuex.vuejs.org/zh/guide/modules.html" target="_blank" rel="noopener">点我</a></p></blockquote><ul><li><p><code>module/list/type.ts</code> 暴露模块list的state的接口。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="TS"><figure class="iseeu highlight /ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> ListState &#123;</span><br><span class="line">    listArr ?: <span class="built_in">any</span>[],</span><br><span class="line">    foo ?: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p><code>module/list/getters.ts</code> 暴露模块list的getters参数。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="TS"><figure class="iseeu highlight /ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;GetterTree&#125; <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;ListState&#125; <span class="keyword">from</span> <span class="string">'./type'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;RootState&#125; <span class="keyword">from</span> <span class="string">'../../type'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getters:GetterTree&lt;ListState,RootState&gt; = &#123;</span><br><span class="line">    bar(state,getters,rootState,rootGetters): <span class="built_in">string</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> state.foo+<span class="string">' world'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p><code>module/list/mutations.ts</code> 暴露模块list的mutation参数。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="TS"><figure class="iseeu highlight /ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;MutationTree&#125; <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;ListState&#125; <span class="keyword">from</span> <span class="string">'./type'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mutations:MutationTree&lt;ListState&gt;=&#123;</span><br><span class="line">    addFuHao(state,payload:<span class="built_in">string</span>)&#123;</span><br><span class="line">        state.foo += payload</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p><code>module/list/actions.ts</code> 暴露模块list的actions参数。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="TS"><figure class="iseeu highlight /ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;ActionTree&#125; <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;ListState&#125; <span class="keyword">from</span> <span class="string">'./type'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;RootState&#125; <span class="keyword">from</span> <span class="string">'../../type'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> actions:ActionTree&lt;ListState,RootState&gt;=&#123;</span><br><span class="line">    fetchData(&#123;commit,dispatch,getters,rootGetters&#125;,payload):<span class="built_in">any</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            commit(<span class="string">'addFuHao'</span>,<span class="string">'!!!!'</span>)</span><br><span class="line">        &#125;,<span class="number">3000</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    rootActionTestFn:&#123; <span class="comment">//注册全局action</span></span><br><span class="line">        root:<span class="literal">true</span>,</span><br><span class="line">        handler(...a):<span class="built_in">any</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'触发了rootActionTestFn'</span>)</span><br><span class="line">            <span class="built_in">console</span>.log(a)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ul><blockquote><p>一般来说模块内是很少嵌套子模块的，除非项目特别要求。如果需要，照葫芦画瓢就好啦。</p></blockquote><ul><li>那么定义好了store,如何使用呢？主要使用的是<code>vuex-class</code>。参考以下代码<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="TS"><figure class="iseeu highlight /ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, Vue &#125; <span class="keyword">from</span> <span class="string">'vue-property-decorator'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;State, Getter ,Mutation,Action&#125; <span class="keyword">from</span> <span class="string">'vuex-class'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;ListState&#125; <span class="keyword">from</span> <span class="string">'../store/module/list/type'</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">namespace</span>:<span class="built_in">string</span> = <span class="string">'todolist'</span>; <span class="comment">//这里要注意，名称需要和模块暴露出来的参数名保持一致</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">    name:<span class="string">'todolist'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> ToDoList <span class="keyword">extends</span> Vue&#123;</span><br><span class="line">    <span class="meta">@State</span>(<span class="string">'list'</span>) list:<span class="built_in">any</span>;</span><br><span class="line">    <span class="meta">@Getter</span>(<span class="string">'bar'</span>,&#123;<span class="keyword">namespace</span>&#125;) bar:<span class="built_in">any</span>;</span><br><span class="line">    <span class="meta">@Mutation</span>(<span class="string">'addFuHao'</span>,&#123;<span class="keyword">namespace</span>&#125;) addFuHao:<span class="built_in">any</span>;</span><br><span class="line">    <span class="meta">@Action</span>(<span class="string">'fetchData'</span>,&#123;<span class="keyword">namespace</span>&#125;) fetchData:<span class="built_in">any</span>; <span class="comment">//引入模块list的action</span></span><br><span class="line">    <span class="meta">@Action</span>(<span class="string">'rootActionTestFn'</span>) rootActionTestFn:<span class="built_in">any</span>; <span class="comment">//引入全局action</span></span><br><span class="line"></span><br><span class="line">    mounted() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.bar)</span><br><span class="line">        <span class="keyword">this</span>.fetchData();</span><br><span class="line">        <span class="keyword">this</span>.addFuHao();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自从使用vue作为项目开发框架后，vue的全家桶每天都会与我见面，其中vuex更是常客。对于专门作为vue的状态管理模式，我认为这应该是每一位前端从业者都必须深入掌握的一项技能，可是在这段时间的面试中，我问了一些vuex相关的知识，却很少有人回答全面，即使他们的简历上写了3-4年的从业经验。比如以下这些vuex最基础的问题。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://blog.zijunfe.cn/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>Nginx初体验</title>
    <link href="http://blog.zijunfe.cn/2019/04/20/nginx/"/>
    <id>http://blog.zijunfe.cn/2019/04/20/nginx/</id>
    <published>2019-04-20T09:48:24.000Z</published>
    <updated>2019-04-29T06:00:53.085Z</updated>
    
    <content type="html"><![CDATA[<p>  在有了自己的服务器后，不好好玩玩Nginx怎么行呢！<del>毕竟花了钱的</del><br>正好之前在学习<code>TypeScript</code>的时候，自己在github上有一个项目，所以想把这个项目丢到线上去玩玩～<br>目标: 将github上的项目丢进服务器，并且能够正确访问 <a href="http://www.zijunfe.cn" target="_blank" rel="noopener">www.zijunfe.cn</a>;<br>前端要学习的东西真的很多，不过我们的征途是星辰大海！<br><del>学习使我秃头</del></p><a id="more"></a><h4 id="如何在CentOS服务器里下载Nginx"><a href="#如何在CentOS服务器里下载Nginx" class="headerlink" title="如何在CentOS服务器里下载Nginx"></a>如何在CentOS服务器里下载Nginx</h4><ol><li><p>下载<code>epel-release</code></p><blockquote><p>EPEL (Extra Packages for Enterprise Linux)是基于Fedora的一个项目，为“红帽系”的操作系统提供额外的软件包，适用于RHEL、CentOS和Scientific Linux.</p></blockquote> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install epel-release</span><br></pre></td></tr></table></figure></div></li><li><p>下载nginx</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install nginx</span><br></pre></td></tr></table></figure></div></li><li><p>Nginx 开机启动</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable nginx</span><br></pre></td></tr></table></figure></div><blockquote><p>Systemctl是一个systemd工具，主要负责控制systemd系统和服务管理器。<br>Nginx 关闭开机启动</p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">关闭开机启动 Nginx</span><br></pre></td></tr></table></figure></div></li><li><p>启动 Nginx</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start nginx</span><br></pre></td></tr></table></figure></div></li></ol><ol start="5"><li><p>检查 Nginx 的运行状态</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status nginx</span><br></pre></td></tr></table></figure></div></li><li><p>如果你的服务器开启了防火墙，则需要同时打开 80（HTTP）和 443（HTTPS）端口,通过下面的命令来打开这两个端口：</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --permanent --zone=public --add-service=http</span><br><span class="line">sudo firewall-cmd --permanent --zone=public --add-service=https</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure></div></li><li><p>验证 Nginx 是否成功启动，可以在浏览器中打开 <a href="http://YOUR_IP，您将看到默认的" target="_blank" rel="noopener">http://YOUR_IP，您将看到默认的</a> Nginx 欢迎页面</p></li><li><p>停止Nginx</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop nginx</span><br></pre></td></tr></table></figure></div></li></ol><ol start="9"><li><p>重启Nginx</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart nginx</span><br></pre></td></tr></table></figure></div></li><li><p>修改 Nginx 配置后，重新加载</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl reload nginx</span><br></pre></td></tr></table></figure></div></li></ol><h5 id="如何免密登陆服务器"><a href="#如何免密登陆服务器" class="headerlink" title="如何免密登陆服务器"></a>如何免密登陆服务器</h5><ol><li>把自己电脑的私钥复制出来，例如在mac里私钥在<code>～/.ssh/*.pub</code>文件里，如果没有私钥和公钥，可以先生成，如何生成，执行<code>ssh-keygen</code>,一路回车。</li><li>登陆服务器，把刚刚复制的私钥放入 服务器<code>~/.ssh/authorized_keys</code>文件中</li><li>执行命令<code>ssh-add k id_rsa</code>,<code>id_rsa</code>就是那个以<code>.pub</code>结尾的文件名，如果执行报错，则先执行命令<code>ssh-agent bashen</code>,再执行添加命令</li><li>进入服务器只需要执行<code>ssh root@ip地址</code>就能免密登陆啦！</li></ol><h5 id="如何添加nginx代理文件"><a href="#如何添加nginx代理文件" class="headerlink" title="如何添加nginx代理文件"></a>如何添加nginx代理文件</h5><ol><li>在<code>etc/nginx/conf.d</code>中新增以<code>.conf</code>结尾的配置文件，比如你的域名叫做<code>zijunfe.cn</code>，那最好新增的文件名就叫<code>zijunfe-cn.conf</code>作为文件名。</li><li><p><code>vim *.conf</code>进入文件，添加配置，如下：</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line"> listen 80;</span><br><span class="line"> server_name www.zijunfe.cn;</span><br><span class="line"> root /www/typescript-project/dist;</span><br><span class="line"> index index.html;</span><br><span class="line"> location ~* ^.+\.(jpg|jpeg|gif|png|ico|css|js|pdf|txt)&#123;</span><br><span class="line">  root /www/typescript-project/dist;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p> 保存退出。</p></li><li>执行命令<code>nginx -t</code>看看配置有没有报错，执行<code>nginx -s reload</code>重启nginx服务。</li><li>如果执行完以上操作后发现访问网址没有变化，可以在访问<code>etc/nginx/nginx.conf</code>文件，找到<code>include /usr/share/nginx/modules/*.conf;</code>,将它放到文件最后，然后重新启动nginx服务。</li></ol><h5 id="如何在服务器上下载nodejs"><a href="#如何在服务器上下载nodejs" class="headerlink" title="如何在服务器上下载nodejs"></a>如何在服务器上下载nodejs</h5><ol><li><p>在服务器上找一个文件夹，比如在<code>/</code>新建<code>app</code>文件夹</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir app &amp;&amp; cd app</span><br></pre></td></tr></table></figure></div></li><li><p>下载对应版本的nodejs版本，我的服务器系统centos，也就是Linux 64位的，nodejs建议下载稳定版本，在<code>app</code>文件夹里执行命令。</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -c https://nodejs.org/dist/v10.14.2/node-v10.14.2-linux-x64.tar.xz</span><br></pre></td></tr></table></figure></div></li><li><p>解压文件夹</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf node-v10.14.2-linux-x64.tar.xz</span><br></pre></td></tr></table></figure></div></li><li><p>为了美观，对解压后的文件夹进行改名</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv node-v10.14.2-linux-x64 nodejs</span><br></pre></td></tr></table></figure></div></li><li><p>建立node,npm软连接</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /app/nodejs/bin/node /usr/local/bin/node</span><br><span class="line">sudo ln -s /app/nodejs/bin/npm /usr/local/bin/npm</span><br></pre></td></tr></table></figure></div></li><li><p>检查是否安装成功，执行<code>node -v</code>，如果有版本号，则安装成功，如果报错，看一下是不是建立软连接的时候，对应的路径有没有写正确。</p></li></ol><p>未完待续</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  在有了自己的服务器后，不好好玩玩Nginx怎么行呢！&lt;del&gt;毕竟花了钱的&lt;/del&gt;&lt;br&gt;正好之前在学习&lt;code&gt;TypeScript&lt;/code&gt;的时候，自己在github上有一个项目，所以想把这个项目丢到线上去玩玩～&lt;br&gt;目标: 将github上的项目丢进服务器，并且能够正确访问 &lt;a href=&quot;http://www.zijunfe.cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;www.zijunfe.cn&lt;/a&gt;;&lt;br&gt;前端要学习的东西真的很多，不过我们的征途是星辰大海！&lt;br&gt;&lt;del&gt;学习使我秃头&lt;/del&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://blog.zijunfe.cn/categories/Nginx/"/>
    
    
  </entry>
  
  <entry>
    <title>面试</title>
    <link href="http://blog.zijunfe.cn/2019/04/12/interview/"/>
    <id>http://blog.zijunfe.cn/2019/04/12/interview/</id>
    <published>2019-04-12T01:57:39.000Z</published>
    <updated>2019-05-12T14:06:42.915Z</updated>
    
    <content type="html"><![CDATA[<p> 这两天面试了一些前端同行，面试别人同样是宝贵的经验，因为在问别人的同时，自己也会思考，这题的答案是什么，除了这种解法还有没有其他解法呢？所以这篇博文，我把自己问的问题作一个归纳与总结，并分为三个层次，<strong>基础</strong>，<strong>提升</strong>，<strong>高级</strong>，并且写一些比较冷门的前端知识。</p><a id="more"></a><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><h4 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h4><h5 id="vue-rouer有几种模式，区别是什么？"><a href="#vue-rouer有几种模式，区别是什么？" class="headerlink" title="vue-rouer有几种模式，区别是什么？"></a><code>vue-rouer</code>有几种模式，区别是什么？</h5><blockquote><p>两种模式，hash模式与history模式 ，<code>vue-router</code>默认使用hash模式，hash模式的url格式一般为<code>http://.../#/...</code>,history模式则没有<code>/#/</code>，并且history模式需要后端配合，因为vue一般写的是单页面应用，如果后端没有正确的配置，用户直接访问<code>http://oursite.com/user/id</code>则回提示404错误。</p></blockquote><h5 id="vue-router路由传参有几种方法？"><a href="#vue-router路由传参有几种方法？" class="headerlink" title="vue-router路由传参有几种方法？"></a><code>vue-router</code>路由传参有几种方法？</h5><blockquote><p>通过<code>params</code>或<code>query</code>传参，前者参数不在url上显示，刷新页面会丢失参数，后者会在url上显示，刷新页面不会丢失参数。<br>路由的动态传参，这种方式首先要在<code>router.js</code>中配置路由对应的path为<code>{ path: &#39;/user/:id&#39;, component: User }</code>这种格式，在对应得页面可以通过<code>this.$route.params</code>来获取对应的参数。</p></blockquote><h5 id="vue-router的导航守卫有哪些？"><a href="#vue-router的导航守卫有哪些？" class="headerlink" title="vue-router的导航守卫有哪些？"></a><code>vue-router</code>的导航守卫有哪些？</h5><blockquote><p>前置守卫:<code>router.beforeEach</code>(常用)当一个导航触发时，全局前置守卫按照创建顺序调用<br>解析守卫:<code>router.beforeResolve</code>(不常用)与前置守卫相识，区别在于导航被确认之前，同时在所有组件内守卫和异步路由组件被解析之后，解析守卫就被调用。<br>后置守卫:<code>router.afterEach</code>(不常用)不会接受 next 函数也不会改变导航本身：<br>独享守卫:<code>beforeEnter</code>(不常用)在路由配置里定义，用来对单独的路由作处理<br>守卫一般有三个参数</p><ol><li><code>to:Route</code>:即将要进入的目标 路由对象</li><li><code>from: Route</code>:当前导航正要离开的路由</li><li><code>next: Function</code>:必须调用的跳转方法，否则不会进行路由跳转</li></ol></blockquote><h5 id="简单介绍一下vue-的生命周期函数？"><a href="#简单介绍一下vue-的生命周期函数？" class="headerlink" title="简单介绍一下vue 的生命周期函数？"></a>简单介绍一下vue 的生命周期函数？</h5><blockquote><p><strong>beforeCreate</strong>: 初始化之前的函数，vue实例不可访问，data未定义，一个基本不怎么用的函数<br><strong>created</strong>: 初始化函数，data已被定义，可以访问data里的数据，可以进行绑定，判断是否有<code>el</code>选项，有则继续进行，没有则停止编译(生命周期停止)，直到在该vue实例上调用vm.$mount(el)。接着判断是否有<code>template</code>选项，如果有，则会将<code>template</code>作为模板编译成render函数，如果没有，则将外部HTML作为模板编译。如果同时存在，<code>template</code>模版优先级是高于外部HTML的。同时vue对象中还有一个<code>render</code>函数，以createElement作为参数，然后做渲染操作，而且我们可以直接嵌入JSX，这个优先级是最高的。综上所述，模版优先级：<code>render</code>函数&gt;<code>template</code>模版&gt;外部HTML。<br><strong>beforeMount</strong>: 给vue添加$el成员，并且替换挂载的DOM元素。建立虚拟dom，data还是以参数名的方式挂载在节点中，没有注入数据。<br><strong>mounted</strong>: 第一次对组件进行渲染，将data里的数据注入节点中,这时已经形成了真实dom。这个函数vue的整个生命周期中只会执行一次，如果还有数据的变化，只会触发updated相关函数。<br><strong>beforeUpdate</strong>: 检测到data发生变化，准备对相应的组件再次渲染。首先重新渲染虚拟dom，再对真实的dom打补丁。<br><strong>updated</strong>: 完成对data发生变化的对应组件渲染<br><strong>beforeDestory</strong>: 实例销毁之前调用。在这一步，实例仍然完全可用。<br><strong>destoryed</strong>: 在Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。<br><strong>帖一张官方的生命周期图</strong><br><img src="/2019/04/12/interview/vue.png" alt="生命周期"></p></blockquote><h5 id="vuex的核心概念包括哪些内容。内容比较多，详情看vuex官网"><a href="#vuex的核心概念包括哪些内容。内容比较多，详情看vuex官网" class="headerlink" title="vuex的核心概念包括哪些内容。内容比较多，详情看vuex官网"></a><code>vuex</code>的核心概念包括哪些内容。内容比较多，详情看<a href="https://vuex.vuejs.org/zh/guide/modules.html" target="_blank" rel="noopener">vuex官网</a></h5><blockquote><p><code>state</code>:存放状态数据的字段，辅助函数<code>mapState</code><br><code>getter</code>:可以认为是 store 的计算属性,辅助函数<code>mapGetter</code><br><code>mutation</code>:更改store状态的唯一方法，必须是同步操作，辅助函数<code>mapMutation</code><br><code>action</code>:action类似于mutation,不过无法直接变更状态，需要通过提交mutation来更改，可以包含任意的异步操作，辅助函数<code>mapAction</code><br><code>module</code>:store的模块，每个模块拥有自己的state、mutation、action、getter、甚至是嵌套子模块。通过设置<code>namespaced: true</code>的方式使其成为带命名空间的模块，如果需要在带命名空间的模块访问全局内容，<code>rootState</code> 和 <code>rootGetter</code> 会作为第三和第四参数传入 getter，若需要在全局命名空间内分发 <code>action</code> 或提交 <code>mutation</code>，将 <code>{ root: true }</code> 作为第三参数传给 <code>dispatch</code> 或 <code>commit</code> 即可。</p></blockquote><h3 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h3><h4 id="基础篇-1"><a href="#基础篇-1" class="headerlink" title="基础篇"></a>基础篇</h4><h5 id="说一些与Array相关的api，并且挑几个详细说明它们的作用？"><a href="#说一些与Array相关的api，并且挑几个详细说明它们的作用？" class="headerlink" title="说一些与Array相关的api，并且挑几个详细说明它们的作用？"></a>说一些与<code>Array</code>相关的api，并且挑几个详细说明它们的作用？</h5><blockquote><p><code>concat</code>: 合并两个或多个数组，不会改变原数组，返回一个新数组<br><code>every</code>: 测试数组所有元素是否通过制定函数的测试<br><code>some</code>: 测试数组是否存在元素是否通过制定函数的测试<br><code>forEach</code>: 对数组的每个元素执行一次提供的函数。<br><code>reduce</code>:对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值。第一个参数为执行函数，第二个参数为执行函数第一次调用时它第一个参数的值<br><code>map</code>: 创建一个新数组，结果为该数组每个元素调用函数的结果<br><code>filter</code>: 过滤，创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。<br><code>entries</code>: 返回一个新的Array Iterator对象，该对象包含数组中每个索引的键/值对。<br><code>find</code>: 返回数组中满足提供的测试函数第一个元素的值<br><code>findIndex</code>: 返回数组中满足提供的测试函数第一个元素的索引，没有返回-1<br><code>flat</code>: 按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。（IE不支持该方法）<br><code>includes</code>: 判断一个数组是否包含一个指定的值<br><code>concat</code>: 合并两个或多个数组，不会改变原数组，返回一个新数组<br><code>join</code>: 将一个数组（或一个类数组对象）的所有元素连接成一个字符串并返回这个字符串。如果数组只有一个项目，那么将返回该项目而不使用分隔符。<br><code>splice</code>: 通过删除或替换现有元素来修改数组,并以数组形式返回被修改的内容。此方法会改变原数组。三个参数，start(指定下标)，deleteCount(移除的个数),[item1,item2,…]从start位置开始插入的元素。<br><code>slice</code>: 返回一个新的数组对象，这一对象是一个由 begin和 end（不包括end）决定的原数组的浅拷贝。原始数组不会被改变。<br><code>reverse</code>: 倒序<br><code>sort</code>: 排序<br><code>push</code>,<code>pop</code>,<code>shift</code>,<code>unshift</code> 数组堆栈操作</p></blockquote><h5 id="js的基础类型有哪些？"><a href="#js的基础类型有哪些？" class="headerlink" title="js的基础类型有哪些？"></a>js的基础类型有哪些？</h5><blockquote><p>String,Boolean,Number,Object,Undefined,Null,Symbol</p></blockquote><h5 id="var-let-const三种声明变量的方式有什么区别？"><a href="#var-let-const三种声明变量的方式有什么区别？" class="headerlink" title="var,let,const三种声明变量的方式有什么区别？"></a><code>var</code>,<code>let</code>,<code>const</code>三种声明变量的方式有什么区别？</h5><blockquote><p><code>var</code> 声明变量有变量提升的功能 能重复声明<br><code>let</code> 声明一个具有块级作用域的变量，不具备变量提升功能，重复声明会报错<br><code>const</code> 声明一个具有块级作用域的常量，并且常用大写字母作为变量名，不具备变量提升功能，重复声明会报错，重新赋值也会报错</p></blockquote><h4 id="提升篇"><a href="#提升篇" class="headerlink" title="提升篇"></a>提升篇</h4><h5 id="Object-assign-方法只会拷贝源对象自身并且可枚举的属性到目标对象，那么如何拷贝不可枚举的属性和继承属性呢？"><a href="#Object-assign-方法只会拷贝源对象自身并且可枚举的属性到目标对象，那么如何拷贝不可枚举的属性和继承属性呢？" class="headerlink" title="Object.assign()方法只会拷贝源对象自身并且可枚举的属性到目标对象，那么如何拷贝不可枚举的属性和继承属性呢？"></a><code>Object.assign()</code>方法只会拷贝源对象自身并且可枚举的属性到目标对象，那么如何拷贝不可枚举的属性和继承属性呢？</h5><p>首先说一下如何拷贝不可枚举的属性。<br>何为不可枚举属性，其实对象里每一个键值对都有6个配置选项。比如<code>obj = {a:1}</code>这样的数据结构，他是与<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">'a'</span>,&#123;</span><br><span class="line">    configurable:<span class="literal">true</span>, <span class="comment">// 该属性的描述符是否能被改变</span></span><br><span class="line">    enumerable:<span class="literal">true</span>, <span class="comment">// 该属性是否可枚举</span></span><br><span class="line">    value: <span class="number">1</span> <span class="comment">// 数据描述符  该属性对应的值</span></span><br><span class="line">    writeable: <span class="literal">true</span> <span class="comment">// 数据描述符  value是否能被赋值运算符改变</span></span><br><span class="line">    <span class="comment">// 数据描述符与存取描述符不可同时存在</span></span><br><span class="line">    <span class="comment">// get:function()&#123;return aValue&#125;,  // 一个给属性提供getter的方法，当访问该属性时，该方法会被执行</span></span><br><span class="line">    <span class="comment">// set:function(newValue)&#123;aValue = newValue&#125; // 一个给属性提供setter的方法，当值修改时，触发执行该方法</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div></p><p>当设置了属性的<code>enumerable</code>为<code>false</code>时，这条属性就是不可枚举属性，即无法通过<code>for..in..</code>与<code>Object.keys()</code>获取到<br>首先你得通过<code>Object.getOwnPropertyNames(obj)</code>(能获取到不可枚举的属性的键名，但是获取不到以Symbol作为键名的属性)或者<code>Reflect.ownKeys(obj)</code>(获取到所有属性的键名)的方法获取到包括不可枚举属性的一个数组。<br>然后循环这个数组，通过<code>Object.getOwnPropertyDescriptor(obj,propkey)</code>的方法得知每一个属性的描述符，然后筛选出<code>enumerable:false</code>的属性，重新通过<code>Object.definePropertires(newObj,{&#39;propkey1&#39;:{...},&#39;propkey2&#39;:{...}})</code>的方式放入新的obj里，其他可枚举的属性通过<code>Object.assign({},obj1,...,objn)</code>的方式放入就好了。<br>至于继承属性的问题，可以通过<code>Object.getPrototypeOf(obj)</code>的方式获取指定对象的原型，然后设置新数组的<code>__proto__</code>为这个原型。问题就解决了。<br>当然有一种更好的方法。<br>配合使用<code>Object.create()</code>可用达到同样的目的<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newObj = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.getPrototypeOf(obj),<span class="built_in">Object</span>.getOwnPropertyDescriptors(obj))</span><br><span class="line"><span class="keyword">let</span> target = <span class="built_in">Object</span>.assign(&#123;&#125;,newObj,newObj1,...,newObjN)</span><br></pre></td></tr></table></figure></div></p><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><h4 id="基础篇-2"><a href="#基础篇-2" class="headerlink" title="基础篇"></a>基础篇</h4><h5 id="display-none与visibility-hidden与opacity-0-兼容写法filter：alpha-opacity-0-的区别"><a href="#display-none与visibility-hidden与opacity-0-兼容写法filter：alpha-opacity-0-的区别" class="headerlink" title="display:none与visibility:hidden与opacity:0(兼容写法filter：alpha(opacity=0))的区别?"></a><code>display:none</code>与<code>visibility:hidden</code>与<code>opacity:0</code>(兼容写法<code>filter：alpha(opacity=0)</code>)的区别?</h5><blockquote><p>他们都能让元素消失不见。<code>display:none</code>会让元素从渲染树中消失，渲染时不占任何空间，从而达到消失的目的。<code>visibility:hidden</code>与<code>opacity:0</code>只是让元素不可见，元素不会从渲染树消失不见，继续占据空间。<br><code>display:none</code>是非继承属性，元素直接消失了，修改子孙节点属性无法显示。<code>visibility:hidden</code>是继承属性，通过修改子孙属性<code>visibility:visible</code>可以让子孙节点<strong>显示</strong>。<br><code>opacity:0</code>，消失的原理是将元素的透明度设置为0，是继承属性，子孙节点通过设置<code>opacity:1</code><strong>无法显示</strong>，可以继续触发元素上绑定的事件。<br>修改元素的display通常会造成文档的回流，修改visibility与opacity属性只会造成本元素的重绘。</p></blockquote><h3 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h3><h4 id="基础篇-3"><a href="#基础篇-3" class="headerlink" title="基础篇"></a>基础篇</h4><h5 id="对手机号做加密处理，将中间四位数字用-代替"><a href="#对手机号做加密处理，将中间四位数字用-代替" class="headerlink" title="对手机号做加密处理，将中间四位数字用*代替"></a>对手机号做加密处理，将中间四位数字用<code>*</code>代替</h5><ol><li><p><code>replace</code>方法</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phone.replace(<span class="regexp">/(?&lt;=.&#123;3&#125;).(?=.&#123;4&#125;)/g</span>,<span class="string">'*'</span>)</span><br></pre></td></tr></table></figure></div></li><li><p><code>substring</code>方法,或<code>substr</code>方法</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">phone.substring(<span class="number">0</span>,<span class="number">3</span>)+<span class="string">'****'</span>+phone.substring(<span class="number">6</span>,<span class="number">4</span>)</span><br><span class="line"><span class="comment">//or</span></span><br><span class="line">phone.substr(<span class="number">0</span>,<span class="number">3</span>)+<span class="string">'****'</span>+phone.substr(<span class="number">-4</span>)</span><br></pre></td></tr></table></figure></div></li><li><p>数组<code>splice</code>方法</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr=phone.split();arr.splice(<span class="number">3</span>,<span class="number">4</span>,<span class="string">'****'</span>);arr.join(<span class="string">''</span>)</span><br></pre></td></tr></table></figure></div></li></ol><h5 id="处理金钱字符串，例如‘1234567’-gt-’1-234-567’"><a href="#处理金钱字符串，例如‘1234567’-gt-’1-234-567’" class="headerlink" title="处理金钱字符串，例如‘1234567’=&gt;’1,234,567’"></a>处理金钱字符串，例如‘1234567’=&gt;’1,234,567’</h5><ol><li><p>正则法</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.replace(<span class="regexp">/\B(?=(\d&#123;3&#125;)+(?!\d))/g</span>,<span class="string">','</span>)</span><br></pre></td></tr></table></figure></div></li><li><p>js法</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formarMoney</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str.split(<span class="string">''</span>).reverse().reduce(<span class="function">(<span class="params">pre,next,index</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> （(index%<span class="number">3</span>) ? next : (next+<span class="string">','</span>)) + pre</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>toLocaleString 法(这个是真的牛皮)</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">23333333</span>).toLocaleString(<span class="string">'en-US'</span>)</span><br></pre></td></tr></table></figure></div></li></ol><h5 id="介绍一下ES模块语法"><a href="#介绍一下ES模块语法" class="headerlink" title="介绍一下ES模块语法"></a>介绍一下ES模块语法</h5><ul><li><p>使用<code>export</code>关键字导出一个变量或者类型</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> someVar = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> type someType = &#123;</span><br><span class="line">    foo:string</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> interface someInterface = &#123;</span><br><span class="line">    foo ?:string</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在提前定义好变量或者类型后，可以这样导出</span></span><br><span class="line"><span class="keyword">export</span> &#123;someVar,someType&#125;</span><br><span class="line"><span class="comment">// 重命名变量导出</span></span><br><span class="line"><span class="keyword">export</span> &#123;someVar <span class="keyword">as</span> aDifferentName&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>使用<code>import</code>关键字导入一个变量或者一个类型</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;someVar,someType&#125; <span class="keyword">from</span> <span class="string">'./foo'</span></span><br><span class="line"><span class="comment">// 重命名导入变量或者类型</span></span><br><span class="line"><span class="keyword">import</span> &#123; someVar <span class="keyword">as</span> aDifferentName &#125; <span class="keyword">from</span> <span class="string">'./foo'</span>;</span><br><span class="line"><span class="comment">// 使用整体加载</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> foo <span class="keyword">from</span> <span class="string">'./foo'</span>; <span class="comment">// 你可以这样使用foo.someVar了</span></span><br><span class="line"><span class="comment">// 仅导入模块</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'core-js'</span>; <span class="comment">//工具库</span></span><br><span class="line"><span class="comment">// 从其他模块导入后整体导出：</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">'./foo'</span>;</span><br><span class="line"><span class="comment">// 从其他模块导入后，部分导出</span></span><br><span class="line"><span class="keyword">export</span> &#123; someVar &#125; <span class="keyword">from</span> <span class="string">'./foo'</span>;</span><br></pre></td></tr></table></figure></div></li><li><p>使用默认导入/导出 <code>export default</code></p><blockquote><p>使用<code>export defalut</code>与<code>export</code>的区别:</p><ol><li>导入使用时可以根据需要自定义导入命名,比如这样的语法<code>import someName from &#39;someModule&#39;</code></li><li>导出变量，函数，类不需要提前定义，比如<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (someVar = <span class="number">123</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">someFunction</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">someClass</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></div></li></ol></blockquote></li><li><p>重写类型的动态查找</p><blockquote><p>在项目里可以通过<code>declare module &#39;somePath&#39;</code>来声明一个全局模块的方式，用来解决查找模块路径的问题<br>全局类型声明写法</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局类型声明写法</span></span><br><span class="line"><span class="comment">// **暴露**</span></span><br><span class="line">declare <span class="built_in">module</span> <span class="string">'foo'</span> &#123;</span><br><span class="line"><span class="comment">// some variable declarations</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> bar: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// **引入**</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> foo <span class="keyword">from</span> <span class="string">'foo'</span>;</span><br></pre></td></tr></table></figure></div></blockquote><blockquote><p>模块导出声明写法</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模块导出声明写法</span></span><br><span class="line">declare interface funcAbcSign &#123;</span><br><span class="line">    (s: string): string</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> declare <span class="keyword">let</span> abc: funcAbcSign;</span><br><span class="line"><span class="keyword">export</span> declare <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>);</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">// 引入</span></span><br><span class="line"><span class="function"><span class="title">import</span> </span>&#123;funcAbcSign,abc&#125; <span class="keyword">from</span> <span class="string">'foo'</span>;</span><br></pre></td></tr></table></figure></div></blockquote><blockquote><p>全局类型声明里的名称将被引入整个 TypeScript 全局命名空间中，从引用这个 声明文件起就可以自由使用。<br>模块导出声明里的名称必须通过 import/require 才能使用。</p></blockquote></li></ul><h4 id="提升篇-1"><a href="#提升篇-1" class="headerlink" title="提升篇"></a>提升篇</h4><h5 id="介绍一下你了解的排序方式"><a href="#介绍一下你了解的排序方式" class="headerlink" title="介绍一下你了解的排序方式"></a>介绍一下你了解的排序方式</h5><h6 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h6><blockquote><p>冒泡排序是一种非常简单的排序方式，这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。<br>排序基本思想为循环序列内每一个元素，循环到的元素与相邻的元素作对比，每次循环会将最小或者最大值冒泡至最底部，直到整个循环结束。</p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>,l=arr.length;i&lt;l;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;l<span class="number">-1</span>-i;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">            <span class="keyword">let</span> tmp = arr[j+<span class="number">1</span>];</span><br><span class="line">            arr[j+<span class="number">1</span>] = arr[j];</span><br><span class="line">            arr[j] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>改进冒泡排序: 设置一标志性变量pos,用于记录每趟排序中最后一次进行交换的位置。由于pos位置之后的记录均已交换到位,故在进行下一趟排序时只要扫描到pos位置即可。<br>改进后如下</p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = arr.length<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(i &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">            pos = j;</span><br><span class="line">            <span class="keyword">var</span> tmp = arr[j];</span><br><span class="line">            arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">            arr[j+<span class="number">1</span>] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    i = pos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h6 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h6><blockquote><p>选择排序是一种简单直观的排序算法，它的原理是:首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> tmp,minIndex;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>,l=arr.length;i&lt;l<span class="number">-1</span>;i++)&#123;</span><br><span class="line">     minIndex = i;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">let</span> j=i+<span class="number">1</span>;j&lt;l;j++)&#123;</span><br><span class="line">         <span class="keyword">if</span>(arr[j]&lt;arr[minIndex])&#123;</span><br><span class="line">             minIndex = j;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     tmp = arr[i];</span><br><span class="line">     arr[i] = arr[minIndex];</span><br><span class="line">     arr[minIndex] = tmp;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div><h6 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h6><blockquote><p>插入排序的远离应该是最容易理解的了，就像打扑克牌，摸到牌以后，你需要对牌进行从小到大的排序，如果你打扑克从不排序，那当我没说…<br>它的工作原理是，构造一个有序序列，然后拿未排序的数据在已排序序列中从后向前扫描，找到相应位置插入。</p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>,l=arr.length;i&lt;l;i++)&#123;</span><br><span class="line">    <span class="keyword">let</span> key = arr[i];</span><br><span class="line">    <span class="keyword">var</span> j = i<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(j&gt;=<span class="number">0</span> &amp;&amp; arr[j]&gt;key)&#123;</span><br><span class="line">        arr[j+<span class="number">1</span>] = arr[j];</span><br><span class="line">        j--;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[j+<span class="number">1</span>]=key;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>未完待续…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 这两天面试了一些前端同行，面试别人同样是宝贵的经验，因为在问别人的同时，自己也会思考，这题的答案是什么，除了这种解法还有没有其他解法呢？所以这篇博文，我把自己问的问题作一个归纳与总结，并分为三个层次，&lt;strong&gt;基础&lt;/strong&gt;，&lt;strong&gt;提升&lt;/strong&gt;，&lt;strong&gt;高级&lt;/strong&gt;，并且写一些比较冷门的前端知识。&lt;/p&gt;
    
    </summary>
    
      <category term="面试" scheme="http://blog.zijunfe.cn/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>如何给自己的博客添加评论系统</title>
    <link href="http://blog.zijunfe.cn/2019/04/11/blog-comments/"/>
    <id>http://blog.zijunfe.cn/2019/04/11/blog-comments/</id>
    <published>2019-04-11T07:48:32.310Z</published>
    <updated>2019-04-29T06:00:53.098Z</updated>
    
    <content type="html"><![CDATA[<p>想要做一个骚气的博主，没有一个评论系统怎么行呢</p><p><div style="width:170px;margin:0 auto;"><img src="/2019/04/11/blog-comments/sao.gif" alt="你好骚啊"></div><br>打开我的Google复制一下别人的，<br>呸，<br>打开我的Google搜索一下前辈们的经验。<br><a id="more"></a><br>首先，我了解到的是next官网推荐的几种评论插件，分别是以下这几个哥们<br><code>DISQUS</code> <code>Facebook Comments</code> <code>HyperComments</code> <code>网易云跟帖</code> <code>来必力</code></p><p><div style="width:170px;margin:0 auto;"><img src="/2019/04/11/blog-comments/emm.jpg" alt="emm"></div><br>从名字上来说，我选择最后一个试一下(绝对不是我看不懂别人官网，绝对不是!)</p><h4 id="来必力"><a href="#来必力" class="headerlink" title="来必力"></a>来必力</h4><p>来必力(这特喵的居然是个韩文网站) 这款评论系统比较简单，首先要去人家官网注册一个账号，登陆以后根据提示申请一个免费的city版什么鬼的，然后在代码里能得到一串LiveRe UID，在next 的<code>_config.yml</code>文件里编辑<code>livere_uid</code>字段，就完成啦，系不系很简单？效果如下<br><img src="/2019/04/11/blog-comments/laibili.jpg" alt="来必力"><br>然后我觉得太丑了，不符合next的黑白简约主题，而且很大概率进入页面后需要重新刷新才能显示出来，所以我就放弃了。</p><p><div style="width:170px;margin:0 auto;"><img src="/2019/04/11/blog-comments/xianqi.jpg" alt="嫌弃"></div></p><h4 id="Gitment"><a href="#Gitment" class="headerlink" title="Gitment"></a>Gitment</h4><p>接下来我又在茫茫Google中搜索，然后找到了它，看介绍说是通过github提issue的方式来创建一个评论系统，看到github我嘴角疯狂上扬，符合我的气质，这个我看行，开搞！</p><ul><li><p>首先在<a href="https://github.com/settings/developers" target="_blank" rel="noopener">https://github.com/settings/developers</a>申请一个免费的application，根据提示填写如下内容，</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Application name：blog-comments  // 随便写啥，你能记住就好 </span><br><span class="line">Homepage URL：https://网站地址/  // 你的博客地址</span><br><span class="line">Application description：Blog comment system  // 随便写</span><br><span class="line">Authorization callback URL：https://网站地址/  // 你的博客地址</span><br></pre></td></tr></table></figure></div><p> 创建完成后先不要关闭，<code>client_id</code>与<code>client_secret</code>下面要用</p></li><li>接着在你的github新建一个空的仓库来存放评论，比如叫做<code>blog-comments</code></li><li>然后在主题配置文件<code>_config.yml</code>里填写gitment的相关配置<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">gitment:</span><br><span class="line">  enable: true  // 这个改成true</span><br><span class="line">  mint: true # RECOMMEND, A mint on Gitment, to support count, language and proxy_gateway</span><br><span class="line">  count: true # Show comments count in post meta area</span><br><span class="line">  lazy: false # Comments lazy loading with a button</span><br><span class="line">  cleanly: false # Hide &apos;Powered by ...&apos; on footer, and more</span><br><span class="line">  language: zh-Hans # Force language, or auto switch by theme</span><br><span class="line">  github_user: BiYangJun # MUST HAVE, Your Github ID</span><br><span class="line">  github_repo: blog-comments # MUST HAVE, The repo you use to store Gitment comments 这是你新建的存放评论的库</span><br><span class="line">  client_id: # MUST HAVE, Github client id for the Gitment 刚刚创建application里有的</span><br><span class="line">  client_secret: # EITHER this or proxy_gateway, Github access secret token for the Gitment 刚刚创建application里有的</span><br><span class="line">  proxy_gateway: # Address of api proxy, See: https://github.com/aimingoo/intersect</span><br><span class="line">  redirect_protocol: # Protocol of redirect_uri with force_redirect_protocol when mint enabled</span><br></pre></td></tr></table></figure></div></li></ul><p>全部配置完后，一切看起来很顺利，页面底部也出来了评论框，就差最后一步登陆自己的github来初始化了，一开始本地登陆不了，我以为是要部署后才能登陆，然后我部署了上去，心里想着这下成了!</p><p><div style="width:170px;margin:0 auto;"><img src="/2019/04/11/blog-comments/shangyang.jpg" alt="嘴角上扬"></div><br>部署后，我点击登陆后，一直给我报错<code>[object ProgressEvent]</code>，试了很多次，我还一度怀疑是不是我github密码输错了，纳闷的我去看了一下gitment的issue，最后发现原因大概是gitment的网站证书到期了，gitment需要这个为接口，所以一直报错。<br>辛辛苦苦1小时，我…</p><p><div style="width:170px;margin:0 auto;" center><img src="/2019/04/11/blog-comments/wufuckshuo.jpg" alt="无话可说"></div><br>哎，接着在茫茫Google找吧…</p><h4 id="Gitalk"><a href="#Gitalk" class="headerlink" title="Gitalk"></a>Gitalk</h4><p>接着，在茫茫博客中，我发现了<a href="https://www.lizhechen.com/" target="_blank" rel="noopener">戳兔专家</a>这位大哥的博文，跟着他的教程开始了安装<code>Gitalk</code>,帖个<a href="https://github.com/gitalk/gitalk" target="_blank" rel="noopener">官网</a>。</p><h5 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h5><p>刚刚申请的application和新建存放评论的仓库不要丢，裹上鸡蛋液，放在油锅里炸一炸，隔壁小孩…<br>住嘴！<br>由于next还没有集成gitalk，所以配置起来相当繁琐</p><ul><li>首先还是要在github上申请一个application和新建一个存放评论的仓库(上面的就可以用)</li><li><p>在 /layout/_third-party/comments/ 目录下新建 gitalk.swig 文件，内容如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if page.comments &amp;&amp; theme.gitalk.enable %&#125;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/gitalk/dist/gitalk.css&quot;&gt;</span><br><span class="line">    &lt;script src=&quot;https://unpkg.com/gitalk/dist/gitalk.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        var gitalk = new Gitalk(&#123;</span><br><span class="line">          clientID: &apos;&#123;&#123; theme.gitalk.ClientID &#125;&#125;&apos;,</span><br><span class="line">          clientSecret: &apos;&#123;&#123; theme.gitalk.ClientSecret &#125;&#125;&apos;,</span><br><span class="line">          repo: &apos;&#123;&#123; theme.gitalk.repo &#125;&#125;&apos;,</span><br><span class="line">          owner: &apos;&#123;&#123; theme.gitalk.owner &#125;&#125;&apos;,</span><br><span class="line">          admin: [&apos;&#123;&#123; theme.gitalk.adminUser &#125;&#125;&apos;],</span><br><span class="line">          id: location.pathname,</span><br><span class="line">          distractionFreeMode: &apos;&#123;&#123; theme.gitalk.distractionFreeMode &#125;&#125;&apos;</span><br><span class="line">        &#125;)</span><br><span class="line">        gitalk.render(&apos;gitalk-container&apos;)           </span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>修改 /layout/_partials/comments.swig，在最后一个 elseif 后添加字段，修改后如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> &#123;% elseif theme.gitment.enable %&#125;</span><br><span class="line">    &lt;div class=&quot;comments&quot; id=&quot;comments&quot;&gt;</span><br><span class="line">      &#123;% if theme.gitment.lazy %&#125;</span><br><span class="line">        &lt;div onclick=&quot;showGitment()&quot; id=&quot;gitment-display-button&quot;&gt;&#123;&#123; __(&apos;gitmentbutton&apos;) &#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;div id=&quot;gitment-container&quot; style=&quot;display:none&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &#123;% else %&#125;</span><br><span class="line">        &lt;div id=&quot;gitment-container&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &#123;% endif %&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &#123;% elseif theme.valine.appid and theme.valine.appkey %&#125;</span><br><span class="line">    &lt;div class=&quot;comments&quot; id=&quot;comments&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">  &#123;% elseif theme.gitalk.enable %&#125;</span><br><span class="line">    &lt;div id=&quot;gitalk-container&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>修改 /layout/_third-party/comments/index.swig，在其末尾添加如下字段：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include &apos;gitalk.swig&apos; %&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>设置 gitalk 的样式，参考1： 在 /source/css/_common/components/third-party/ 目录下新建 gitalk.styl 文件，内容如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.gt-header a, .gt-comments a, .gt-popup a</span><br><span class="line">  border-bottom: none;</span><br><span class="line">.gt-container .gt-popup .gt-action.is--active:before</span><br><span class="line">  top: 0.7em;</span><br></pre></td></tr></table></figure></div></li><li><p>修改 /source/css/_common/components/third-party/third-party.styl 文件，在末尾添加如下字段：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@import &quot;gitalk&quot;;</span><br></pre></td></tr></table></figure></div></li><li><p>最后在主题配置文件 _config.yml 中添加如下项：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gitalk:</span><br><span class="line">  enable: true</span><br><span class="line">  owner: 你的github帐号  # lzcwr  </span><br><span class="line">  repo: 存放评论的仓库名称   # Gitalk-comments</span><br><span class="line">  ClientID: 在申请好application的页面中有</span><br><span class="line">  ClientSecret: 在申请好application的页面中有</span><br><span class="line">  adminUser: 你的github帐号 # 可初始化评论的账户</span><br><span class="line">  distractionFreeMode: true</span><br></pre></td></tr></table></figure></div></li></ul><p>完整无误地完成上述步骤后，在本地可以看到gitalk的按钮，然后通过<code>hexo d</code>部署到线上后，登陆你的github进行初始化就大功告成了啦！</p><blockquote><p>如果你给一篇博文的文件命名有中文的话，你可能会碰到这个报错Error: Validation Failed。哎，真是一波三折啊</p></blockquote><h5 id="Error-Validation-Failed-解决方案"><a href="#Error-Validation-Failed-解决方案" class="headerlink" title="Error: Validation Failed 解决方案"></a>Error: Validation Failed 解决方案</h5><ol><li><p>修改前文提到的<code>gitalk.swig</code>，先下载一个<a href="https://github.com/blueimp/JavaScript-MD5/blob/master/js/md5.min.js" target="_blank" rel="noopener">md5.js</a>,更改完毕后的<code>gitalk.swig</code>如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if page.comments &amp;&amp; theme.gitalk.enable %&#125;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/gitalk/dist/gitalk.css&quot;&gt;</span><br><span class="line">    &lt;script src=&quot;/js/md5.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;https://unpkg.com/gitalk/dist/gitalk.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        var gitalk = new Gitalk(&#123;</span><br><span class="line">          clientID: &apos;&#123;&#123; theme.gitalk.ClientID &#125;&#125;&apos;,</span><br><span class="line">          clientSecret: &apos;&#123;&#123; theme.gitalk.ClientSecret &#125;&#125;&apos;,</span><br><span class="line">          repo: &apos;&#123;&#123; theme.gitalk.repo &#125;&#125;&apos;,</span><br><span class="line">          owner: &apos;&#123;&#123; theme.gitalk.owner &#125;&#125;&apos;,</span><br><span class="line">          admin: [&apos;&#123;&#123; theme.gitalk.adminUser &#125;&#125;&apos;],</span><br><span class="line">          id: md5(location.pathname),</span><br><span class="line">          distractionFreeMode: &apos;&#123;&#123; theme.gitalk.distractionFreeMode &#125;&#125;&apos;</span><br><span class="line">        &#125;)</span><br><span class="line">        gitalk.render(&apos;gitalk-container&apos;)           </span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>批量修改博客文件名，例如以时间戳的方式命名md文件，具体可以参考这位<a href="https://blog.lanthora.org/20181229230044/" target="_blank" rel="noopener">大哥的博文</a></p></li><li>避免使用中文命名，英文不好咱们就用拼音吧！</li></ol><p>忙活了一晚上我的评论系统终于搞定了…</p><p><div style="width:170px;margin:0 auto;"><img src="/2019/04/11/blog-comments/geyou.gif" alt="葛优"></div><br>感谢万能的Google和<a href="https://www.lizhechen.com/" target="_blank" rel="noopener">戳兔专家</a>这位大哥。<br>看完的小伙伴记得评论、关注、收藏三连哦～<br>呸、<br>什么坏毛病<br>能给评论就感激不尽啦～</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;想要做一个骚气的博主，没有一个评论系统怎么行呢&lt;/p&gt;
&lt;p&gt;&lt;div style=&quot;width:170px;margin:0 auto;&quot;&gt;&lt;img src=&quot;/2019/04/11/blog-comments/sao.gif&quot; alt=&quot;你好骚啊&quot;&gt;&lt;/div&gt;&lt;br&gt;打开我的Google复制一下别人的，&lt;br&gt;呸，&lt;br&gt;打开我的Google搜索一下前辈们的经验。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="博客" scheme="http://blog.zijunfe.cn/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
  </entry>
  
  <entry>
    <title>记录一下搭建第一个博客的经历</title>
    <link href="http://blog.zijunfe.cn/2019/04/10/first-blog/"/>
    <id>http://blog.zijunfe.cn/2019/04/10/first-blog/</id>
    <published>2019-04-10T03:42:33.791Z</published>
    <updated>2019-04-29T06:00:53.085Z</updated>
    
    <content type="html"><![CDATA[<p>  起因，在论坛闲逛的时候发现一个老哥把很多知识点，问题都记录在自己的个人博客里，知识罗列的很清楚。<br>虽然我平时也会把一些问题和有趣的东西记录在MacDown里，可时如果要看的话还需要打开mac，很不方便。so～在网上找了一篇搭建博客的教程，干了一晚上终于成了，中间碰到很多曲折的问题，所以在这里记录一下。</p><p><strong>一、搭建条件及环境</strong><br>    Github Pages + Hexo + Node.js Mac电脑的OSX系统/windows<br><strong>二、搭建步骤</strong><br><a id="more"></a></p><ol><li><p>首先你得有个github账号(作为新时代的码农，这是必备的)，创建一个新的repository，项目名称格式为<code>yourname.github.io</code>，如图<br> <img src="/2019/04/10/first-blog/img1.jpg" alt></p></li><li><p>全局安装Hexo，<code>npm install -g hexo-cli</code></p></li><li><p>创建一个空文件夹，进入该文件夹，依次执行以下命令</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></div><p> 在所有依赖都安装完成后，就可以在本地环境看一下hexo的博客内容啦，执行以下命令</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate  </span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure></div><p> 这两条命令可以缩写成<code>hexo g</code> <code>hexo s</code>作用分别是：将md文件生成html，css文件；启动本地hexo。打开<a href="http://localhost:4000就能看到本地效果啦。" target="_blank" rel="noopener">http://localhost:4000就能看到本地效果啦。</a></p></li><li><p>修改 _config.yml 文件，这是博客网站 的配置文件，在这里你可以更改你的网页title，description等，最主要的是修改你在github上的仓库地址。<br> 在最下面一行</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repository: git@github.com:BiYangJun/zijun.github.io.git</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure></div><p> 写上自己的仓库地址。至于是SSH公钥方式提交还是https方式提交，看个人喜好啦。</p></li><li><p>在写完自己的博客后，执行以下命令</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></div><p> <code>hexo deploy</code> 可以缩写成 <code>hexo d</code>意思为部署<br> 接着你会上传文件到github上。接着就可以在线访问啦。</p></li><li><p>那么如何在线访问呢？<br> 打开你的github。点击<code>environment</code>，<br> <img src="/2019/04/10/first-blog/img5.jpg" alt><br> 然后在点击 <code>View deployment</code>,打开后的网址就是你的线上博客地址辣，easy～</p></li></ol><p><strong>三、遇到的坑</strong></p><ol><li><p>如果发现线上博客一直是404，看一下repository中的setting，在GitHub Pages 这一栏中Source有没有选中master分支</p><p> <img src="/2019/04/10/first-blog/img2.jpg" alt></p></li><li><p>能打开线上博客后，如果发现样式没有加载出来，在_config.yml修改root为自己的项目名称</p><p> <img src="/2019/04/10/first-blog/img3.jpg" alt></p></li><li><p>其他hexo命令。<code>hexo clean</code>#缓存，在网页不正常的时候可以使用。<code>hexo new ‘我的博客’</code>#新建我的博客，<code>hexo server -p 5000</code>#更改端口</p></li><li><p>如何插入图片。</p><ul><li>在主题的source下面新建一个文件夹images专门放置图片资源，使用markdown的语法 <code>![](/images/test.jpg)</code></li><li>Hexo方式，设置_config.yml文件中<code>post_asset_folder</code>为true，之后新建一个文章后，会同时创建一个同名的空文件夹用来放图片资源，执行命令<code>npm install hexo-asset-image --save</code>，下载安装一个可以上传本地图片的插件，之后使用的时候，只需要图片名<code>![](test.jpg)</code></li><li>网络图片插入‘#’</li><li><p>Hexo 支持使用特定的语法，插入指定大小的图片，如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 语法</span><br><span class="line">&#123;% img [class names] /path/to/image [width] [height] [title text [alt text]] %&#125;</span><br><span class="line">// 实例</span><br><span class="line">&#123;% img full-image /hexo-experiences/PL01.jpg 180 180 hello %&#125;</span><br><span class="line">// 生成的代码</span><br><span class="line">&lt;img src=&quot;/blog/hexo-experiences/PL01.jpg&quot; class=&quot;full-image&quot; width=&quot;180&quot; height=&quot;180&quot; title=&quot;hello&quot;&gt;</span><br></pre></td></tr></table></figure></div></li><li><p>如果发现怎么都不行，看下你这个博客是不是在二级域名下的，如果是，要设置_config.yml文件中的url与root。<br><img src="/2019/04/10/first-blog/img4.jpg" alt></p></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  起因，在论坛闲逛的时候发现一个老哥把很多知识点，问题都记录在自己的个人博客里，知识罗列的很清楚。&lt;br&gt;虽然我平时也会把一些问题和有趣的东西记录在MacDown里，可时如果要看的话还需要打开mac，很不方便。so～在网上找了一篇搭建博客的教程，干了一晚上终于成了，中间碰到很多曲折的问题，所以在这里记录一下。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一、搭建条件及环境&lt;/strong&gt;&lt;br&gt;    Github Pages + Hexo + Node.js Mac电脑的OSX系统/windows&lt;br&gt;&lt;strong&gt;二、搭建步骤&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="博客" scheme="http://blog.zijunfe.cn/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
  </entry>
  
</feed>
